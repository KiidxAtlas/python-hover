/*! For license information please see extension.js.LICENSE.txt */
(()=>{"use strict";var e={417:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircuitBreakerManager=t.CircuitBreaker=void 0;const i=a(4417);class p{constructor(e,t){this.name=e,this.options=t,this.state="closed",this.failures=0,this.successes=0,this.lastFailureTime=0,this.lastSuccessTime=0,this.totalRequests=0,this.totalFailures=0,this.totalSuccesses=0,this.logger=i.Logger.getInstance(),this.logger.debug(`Circuit breaker "${e}" initialized`,{failureThreshold:t.failureThreshold,successThreshold:t.successThreshold,timeout:t.timeout})}async execute(e){if(this.totalRequests++,"open"===this.state){if(!(Date.now()-this.lastFailureTime>=(this.options.resetTimeout||this.options.timeout)))throw this.logger.debug(`Circuit breaker "${this.name}" is open, rejecting request`),new Error(`Circuit breaker "${this.name}" is open. Service temporarily unavailable.`);this.logger.debug(`Circuit breaker "${this.name}" transitioning to half-open`),this.state="half-open",this.successes=0}try{const t=await e();return this.onSuccess(),t}catch(e){throw this.onFailure(e),e}}onSuccess(){this.totalSuccesses++,this.lastSuccessTime=Date.now(),"half-open"===this.state?(this.successes++,this.logger.debug(`Circuit breaker "${this.name}" success in half-open state (${this.successes}/${this.options.successThreshold})`),this.successes>=this.options.successThreshold&&(this.logger.info(`Circuit breaker "${this.name}" closed after successful recovery`),this.state="closed",this.failures=0,this.successes=0)):"closed"===this.state&&(this.failures=0)}onFailure(e){this.totalFailures++,this.failures++,this.lastFailureTime=Date.now(),this.logger.debug(`Circuit breaker "${this.name}" failure (${this.failures}/${this.options.failureThreshold})`,e),"half-open"===this.state?(this.logger.warn(`Circuit breaker "${this.name}" opened after failure in half-open state`),this.state="open",this.failures=0,this.successes=0):"closed"===this.state&&this.failures>=this.options.failureThreshold&&(this.logger.warn(`Circuit breaker "${this.name}" opened after ${this.failures} consecutive failures`),this.state="open")}getState(){return this.state}getStats(){return{state:this.state,failures:this.failures,successes:this.successes,lastFailureTime:this.lastFailureTime,lastSuccessTime:this.lastSuccessTime,totalRequests:this.totalRequests,totalFailures:this.totalFailures,totalSuccesses:this.totalSuccesses}}reset(){this.logger.info(`Circuit breaker "${this.name}" manually reset`),this.state="closed",this.failures=0,this.successes=0}getSuccessRate(){return 0===this.totalRequests?1:this.totalSuccesses/this.totalRequests}isHealthy(){return"closed"===this.state||"half-open"===this.state}}t.CircuitBreaker=p,t.CircuitBreakerManager=class{constructor(){this.breakers=new Map,this.logger=i.Logger.getInstance()}getBreaker(e,t){if(!this.breakers.has(e)){const a=new p(e,t||{failureThreshold:5,successThreshold:2,timeout:6e4,resetTimeout:12e4});this.breakers.set(e,a),this.logger.debug(`Created circuit breaker: ${e}`)}return this.breakers.get(e)}getAllBreakers(){return new Map(this.breakers)}getHealthSummary(){const e=[];let t=0,a=0;for(const[i,p]of this.breakers){const r=p.getStats(),n=p.getSuccessRate();e.push({name:i,state:r.state,successRate:n}),p.isHealthy()?t++:a++}return{total:this.breakers.size,healthy:t,unhealthy:a,details:e}}resetAll(){this.logger.info("Resetting all circuit breakers");for(const e of this.breakers.values())e.reset()}remove(e){return this.breakers.delete(e)}clear(){this.breakers.clear()}}},1098:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CustomDocumentationLoader=void 0,t.formatCustomDoc=function(e){const t=[];return t.push(`### 📝 ${e.symbol}`),e.category&&t.push(`**Category:** ${e.category}`),t.push(`\n${e.description}`),e.example&&t.push(`\n**Example:**\n\`\`\`python\n${e.example}\n\`\`\``),e.tags&&e.tags.length>0&&t.push(`\n**Tags:** ${e.tags.map(e=>`\`${e}\``).join(", ")}`),e.url&&t.push(`\n📚 [Documentation](${e.url})`),t.push("\n---\n*Custom documentation from project*"),t.join("\n")};const i=a(9896),p=a(6928),r=a(1398),n=a(4417);class s{constructor(){this.customDocs=new Map,this.configFiles=[".python-hover.json","python-hover.json",".vscode/python-hover.json"]}async loadCustomDocs(e){if(this.customDocs.clear(),!e){const t=r.workspace.workspaceFolders;if(!t||0===t.length)return;e=t[0]}for(const t of this.configFiles){const a=p.join(e.uri.fsPath,t);try{if(i.existsSync(a)){const e=i.readFileSync(a,"utf-8"),p=JSON.parse(e);if(p.docs&&Array.isArray(p.docs)){for(const e of p.docs)this.customDocs.set(e.symbol.toLowerCase(),e);return void n.Logger.getInstance().debug(`Loaded ${p.docs.length} custom docs from ${t}`)}}}catch(e){n.Logger.getInstance().error(`Error loading custom docs from ${t}:`,e)}}}getCustomDoc(e){return this.customDocs.get(e.toLowerCase())||null}hasCustomDocs(){return this.customDocs.size>0}getAllCustomDocs(){return Array.from(this.customDocs.values())}static createSampleConfig(){return{version:"1.0",docs:[{symbol:"our_custom_decorator",description:"Custom decorator used in our project for timing functions.",example:"@our_custom_decorator\ndef my_function():\n    # Your code here\n    pass\n\n# The decorator will automatically log execution time",category:"decorators",tags:["custom","timing","performance"]},{symbol:"DatabaseConnection",description:"Our custom database connection class with automatic retry logic.",example:"from myproject import DatabaseConnection\n\n# Create connection\ndb = DatabaseConnection(\n    host='localhost',\n    database='mydb',\n    retry_count=3\n)\n\n# Use connection\nwith db.connection() as conn:\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM users\")\n    results = cursor.fetchall()",category:"database",tags:["custom","database","connection"],url:"https://internal-docs.company.com/database"}]}}static async createSampleConfigFile(e){const t=p.join(e.uri.fsPath,".python-hover.json"),a=s.createSampleConfig();i.writeFileSync(t,JSON.stringify(a,null,2),"utf-8");const n=await r.workspace.openTextDocument(t);await r.window.showTextDocument(n)}}t.CustomDocumentationLoader=s},1265:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExampleEnricher=void 0;const i=a(1844),p=a(8704);t.ExampleEnricher=class{enrichWithExamples(e,t,a){const r={...e,content:e.content},n=t.split(".").pop()||t;let s="",d=!1;return a&&i.ENHANCED_EXAMPLES[`${a}.${n}`]?(s=this.formatEnhancedExample(i.ENHANCED_EXAMPLES[`${a}.${n}`].content),d=!0):i.ENHANCED_EXAMPLES[n]?(s=this.formatEnhancedExample(i.ENHANCED_EXAMPLES[n].content),d=!0):p.STATIC_EXAMPLES[n]&&(s=this.formatStaticExample(p.STATIC_EXAMPLES[n].examples),d=!0),d&&(r.content+="\n\n## Examples\n\n"+s),r}formatEnhancedExample(e){return e}formatStaticExample(e){return"```python\n"+e.join("\n")+"\n```"}}},1398:e=>{e.exports=require("vscode")},1447:(e,t,a)=>{const i=a(3269),p=a(4823),r=a(7293),n=a(1998),{Z_FINISH:s,Z_BLOCK:d,Z_TREES:o,Z_OK:l,Z_STREAM_END:m,Z_NEED_DICT:c,Z_STREAM_ERROR:h,Z_DATA_ERROR:u,Z_MEM_ERROR:f,Z_BUF_ERROR:g,Z_DEFLATED:v}=a(9681),y=16180,_=16190,w=16191,b=16192,x=16194,S=16199,T=16200,D=16206,E=16209,k=16210,C=e=>(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24);function N(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const A=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.mode<y||t.mode>16211?1:0},$=e=>{if(A(e))return h;const t=e.state;return e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=y,t.last=0,t.havedict=0,t.flags=-1,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new Int32Array(852),t.distcode=t.distdyn=new Int32Array(592),t.sane=1,t.back=-1,l},R=e=>{if(A(e))return h;const t=e.state;return t.wsize=0,t.whave=0,t.wnext=0,$(e)},V=(e,t)=>{let a;if(A(e))return h;const i=e.state;return t<0?(a=0,t=-t):(a=5+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?h:(null!==i.window&&i.wbits!==t&&(i.window=null),i.wrap=a,i.wbits=t,R(e))},M=(e,t)=>{if(!e)return h;const a=new N;e.state=a,a.strm=e,a.window=null,a.mode=y;const i=V(e,t);return i!==l&&(e.state=null),i};let I,P,L=!0;const F=e=>{if(L){I=new Int32Array(512),P=new Int32Array(32);let t=0;for(;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(n(1,e.lens,0,288,I,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;n(2,e.lens,0,32,P,0,e.work,{bits:5}),L=!1}e.lencode=I,e.lenbits=9,e.distcode=P,e.distbits=5},O=(e,t,a,i)=>{let p;const r=e.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),i>=r.wsize?(r.window.set(t.subarray(a-r.wsize,a),0),r.wnext=0,r.whave=r.wsize):(p=r.wsize-r.wnext,p>i&&(p=i),r.window.set(t.subarray(a-i,a-i+p),r.wnext),(i-=p)?(r.window.set(t.subarray(a-i,a),0),r.wnext=i,r.whave=r.wsize):(r.wnext+=p,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=p))),0};e.exports.inflateReset=R,e.exports.inflateReset2=V,e.exports.inflateResetKeep=$,e.exports.inflateInit=e=>M(e,15),e.exports.inflateInit2=M,e.exports.inflate=(e,t)=>{let a,N,$,R,V,M,I,P,L,U,j,B,H,z,q,W,G,Z,Y,K,X,J,Q=0;const ee=new Uint8Array(4);let te,ae;const ie=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(A(e)||!e.output||!e.input&&0!==e.avail_in)return h;a=e.state,a.mode===w&&(a.mode=b),V=e.next_out,$=e.output,I=e.avail_out,R=e.next_in,N=e.input,M=e.avail_in,P=a.hold,L=a.bits,U=M,j=I,J=l;e:for(;;)switch(a.mode){case y:if(0===a.wrap){a.mode=b;break}for(;L<16;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(2&a.wrap&&35615===P){0===a.wbits&&(a.wbits=15),a.check=0,ee[0]=255&P,ee[1]=P>>>8&255,a.check=p(a.check,ee,2,0),P=0,L=0,a.mode=16181;break}if(a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&P)<<8)+(P>>8))%31){e.msg="incorrect header check",a.mode=E;break}if((15&P)!==v){e.msg="unknown compression method",a.mode=E;break}if(P>>>=4,L-=4,X=8+(15&P),0===a.wbits&&(a.wbits=X),X>15||X>a.wbits){e.msg="invalid window size",a.mode=E;break}a.dmax=1<<a.wbits,a.flags=0,e.adler=a.check=1,a.mode=512&P?16189:w,P=0,L=0;break;case 16181:for(;L<16;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(a.flags=P,(255&a.flags)!==v){e.msg="unknown compression method",a.mode=E;break}if(57344&a.flags){e.msg="unknown header flags set",a.mode=E;break}a.head&&(a.head.text=P>>8&1),512&a.flags&&4&a.wrap&&(ee[0]=255&P,ee[1]=P>>>8&255,a.check=p(a.check,ee,2,0)),P=0,L=0,a.mode=16182;case 16182:for(;L<32;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.head&&(a.head.time=P),512&a.flags&&4&a.wrap&&(ee[0]=255&P,ee[1]=P>>>8&255,ee[2]=P>>>16&255,ee[3]=P>>>24&255,a.check=p(a.check,ee,4,0)),P=0,L=0,a.mode=16183;case 16183:for(;L<16;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.head&&(a.head.xflags=255&P,a.head.os=P>>8),512&a.flags&&4&a.wrap&&(ee[0]=255&P,ee[1]=P>>>8&255,a.check=p(a.check,ee,2,0)),P=0,L=0,a.mode=16184;case 16184:if(1024&a.flags){for(;L<16;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.length=P,a.head&&(a.head.extra_len=P),512&a.flags&&4&a.wrap&&(ee[0]=255&P,ee[1]=P>>>8&255,a.check=p(a.check,ee,2,0)),P=0,L=0}else a.head&&(a.head.extra=null);a.mode=16185;case 16185:if(1024&a.flags&&(B=a.length,B>M&&(B=M),B&&(a.head&&(X=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Uint8Array(a.head.extra_len)),a.head.extra.set(N.subarray(R,R+B),X)),512&a.flags&&4&a.wrap&&(a.check=p(a.check,N,B,R)),M-=B,R+=B,a.length-=B),a.length))break e;a.length=0,a.mode=16186;case 16186:if(2048&a.flags){if(0===M)break e;B=0;do{X=N[R+B++],a.head&&X&&a.length<65536&&(a.head.name+=String.fromCharCode(X))}while(X&&B<M);if(512&a.flags&&4&a.wrap&&(a.check=p(a.check,N,B,R)),M-=B,R+=B,X)break e}else a.head&&(a.head.name=null);a.length=0,a.mode=16187;case 16187:if(4096&a.flags){if(0===M)break e;B=0;do{X=N[R+B++],a.head&&X&&a.length<65536&&(a.head.comment+=String.fromCharCode(X))}while(X&&B<M);if(512&a.flags&&4&a.wrap&&(a.check=p(a.check,N,B,R)),M-=B,R+=B,X)break e}else a.head&&(a.head.comment=null);a.mode=16188;case 16188:if(512&a.flags){for(;L<16;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(4&a.wrap&&P!==(65535&a.check)){e.msg="header crc mismatch",a.mode=E;break}P=0,L=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),e.adler=a.check=0,a.mode=w;break;case 16189:for(;L<32;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}e.adler=a.check=C(P),P=0,L=0,a.mode=_;case _:if(0===a.havedict)return e.next_out=V,e.avail_out=I,e.next_in=R,e.avail_in=M,a.hold=P,a.bits=L,c;e.adler=a.check=1,a.mode=w;case w:if(t===d||t===o)break e;case b:if(a.last){P>>>=7&L,L-=7&L,a.mode=D;break}for(;L<3;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}switch(a.last=1&P,P>>>=1,L-=1,3&P){case 0:a.mode=16193;break;case 1:if(F(a),a.mode=S,t===o){P>>>=2,L-=2;break e}break;case 2:a.mode=16196;break;case 3:e.msg="invalid block type",a.mode=E}P>>>=2,L-=2;break;case 16193:for(P>>>=7&L,L-=7&L;L<32;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if((65535&P)!=(P>>>16^65535)){e.msg="invalid stored block lengths",a.mode=E;break}if(a.length=65535&P,P=0,L=0,a.mode=x,t===o)break e;case x:a.mode=16195;case 16195:if(B=a.length,B){if(B>M&&(B=M),B>I&&(B=I),0===B)break e;$.set(N.subarray(R,R+B),V),M-=B,R+=B,I-=B,V+=B,a.length-=B;break}a.mode=w;break;case 16196:for(;L<14;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(a.nlen=257+(31&P),P>>>=5,L-=5,a.ndist=1+(31&P),P>>>=5,L-=5,a.ncode=4+(15&P),P>>>=4,L-=4,a.nlen>286||a.ndist>30){e.msg="too many length or distance symbols",a.mode=E;break}a.have=0,a.mode=16197;case 16197:for(;a.have<a.ncode;){for(;L<3;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.lens[ie[a.have++]]=7&P,P>>>=3,L-=3}for(;a.have<19;)a.lens[ie[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,te={bits:a.lenbits},J=n(0,a.lens,0,19,a.lencode,0,a.work,te),a.lenbits=te.bits,J){e.msg="invalid code lengths set",a.mode=E;break}a.have=0,a.mode=16198;case 16198:for(;a.have<a.nlen+a.ndist;){for(;Q=a.lencode[P&(1<<a.lenbits)-1],q=Q>>>24,W=Q>>>16&255,G=65535&Q,!(q<=L);){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(G<16)P>>>=q,L-=q,a.lens[a.have++]=G;else{if(16===G){for(ae=q+2;L<ae;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(P>>>=q,L-=q,0===a.have){e.msg="invalid bit length repeat",a.mode=E;break}X=a.lens[a.have-1],B=3+(3&P),P>>>=2,L-=2}else if(17===G){for(ae=q+3;L<ae;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}P>>>=q,L-=q,X=0,B=3+(7&P),P>>>=3,L-=3}else{for(ae=q+7;L<ae;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}P>>>=q,L-=q,X=0,B=11+(127&P),P>>>=7,L-=7}if(a.have+B>a.nlen+a.ndist){e.msg="invalid bit length repeat",a.mode=E;break}for(;B--;)a.lens[a.have++]=X}}if(a.mode===E)break;if(0===a.lens[256]){e.msg="invalid code -- missing end-of-block",a.mode=E;break}if(a.lenbits=9,te={bits:a.lenbits},J=n(1,a.lens,0,a.nlen,a.lencode,0,a.work,te),a.lenbits=te.bits,J){e.msg="invalid literal/lengths set",a.mode=E;break}if(a.distbits=6,a.distcode=a.distdyn,te={bits:a.distbits},J=n(2,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,te),a.distbits=te.bits,J){e.msg="invalid distances set",a.mode=E;break}if(a.mode=S,t===o)break e;case S:a.mode=T;case T:if(M>=6&&I>=258){e.next_out=V,e.avail_out=I,e.next_in=R,e.avail_in=M,a.hold=P,a.bits=L,r(e,j),V=e.next_out,$=e.output,I=e.avail_out,R=e.next_in,N=e.input,M=e.avail_in,P=a.hold,L=a.bits,a.mode===w&&(a.back=-1);break}for(a.back=0;Q=a.lencode[P&(1<<a.lenbits)-1],q=Q>>>24,W=Q>>>16&255,G=65535&Q,!(q<=L);){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(W&&!(240&W)){for(Z=q,Y=W,K=G;Q=a.lencode[K+((P&(1<<Z+Y)-1)>>Z)],q=Q>>>24,W=Q>>>16&255,G=65535&Q,!(Z+q<=L);){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}P>>>=Z,L-=Z,a.back+=Z}if(P>>>=q,L-=q,a.back+=q,a.length=G,0===W){a.mode=16205;break}if(32&W){a.back=-1,a.mode=w;break}if(64&W){e.msg="invalid literal/length code",a.mode=E;break}a.extra=15&W,a.mode=16201;case 16201:if(a.extra){for(ae=a.extra;L<ae;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.length+=P&(1<<a.extra)-1,P>>>=a.extra,L-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=16202;case 16202:for(;Q=a.distcode[P&(1<<a.distbits)-1],q=Q>>>24,W=Q>>>16&255,G=65535&Q,!(q<=L);){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(!(240&W)){for(Z=q,Y=W,K=G;Q=a.distcode[K+((P&(1<<Z+Y)-1)>>Z)],q=Q>>>24,W=Q>>>16&255,G=65535&Q,!(Z+q<=L);){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}P>>>=Z,L-=Z,a.back+=Z}if(P>>>=q,L-=q,a.back+=q,64&W){e.msg="invalid distance code",a.mode=E;break}a.offset=G,a.extra=15&W,a.mode=16203;case 16203:if(a.extra){for(ae=a.extra;L<ae;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}a.offset+=P&(1<<a.extra)-1,P>>>=a.extra,L-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){e.msg="invalid distance too far back",a.mode=E;break}a.mode=16204;case 16204:if(0===I)break e;if(B=j-I,a.offset>B){if(B=a.offset-B,B>a.whave&&a.sane){e.msg="invalid distance too far back",a.mode=E;break}B>a.wnext?(B-=a.wnext,H=a.wsize-B):H=a.wnext-B,B>a.length&&(B=a.length),z=a.window}else z=$,H=V-a.offset,B=a.length;B>I&&(B=I),I-=B,a.length-=B;do{$[V++]=z[H++]}while(--B);0===a.length&&(a.mode=T);break;case 16205:if(0===I)break e;$[V++]=a.length,I--,a.mode=T;break;case D:if(a.wrap){for(;L<32;){if(0===M)break e;M--,P|=N[R++]<<L,L+=8}if(j-=I,e.total_out+=j,a.total+=j,4&a.wrap&&j&&(e.adler=a.check=a.flags?p(a.check,$,j,V-j):i(a.check,$,j,V-j)),j=I,4&a.wrap&&(a.flags?P:C(P))!==a.check){e.msg="incorrect data check",a.mode=E;break}P=0,L=0}a.mode=16207;case 16207:if(a.wrap&&a.flags){for(;L<32;){if(0===M)break e;M--,P+=N[R++]<<L,L+=8}if(4&a.wrap&&P!==(4294967295&a.total)){e.msg="incorrect length check",a.mode=E;break}P=0,L=0}a.mode=16208;case 16208:J=m;break e;case E:J=u;break e;case k:return f;default:return h}return e.next_out=V,e.avail_out=I,e.next_in=R,e.avail_in=M,a.hold=P,a.bits=L,(a.wsize||j!==e.avail_out&&a.mode<E&&(a.mode<D||t!==s))&&O(e,e.output,e.next_out,j-e.avail_out)?(a.mode=k,f):(U-=e.avail_in,j-=e.avail_out,e.total_in+=U,e.total_out+=j,a.total+=j,4&a.wrap&&j&&(e.adler=a.check=a.flags?p(a.check,$,j,e.next_out-j):i(a.check,$,j,e.next_out-j)),e.data_type=a.bits+(a.last?64:0)+(a.mode===w?128:0)+(a.mode===S||a.mode===x?256:0),(0===U&&0===j||t===s)&&J===l&&(J=g),J)},e.exports.inflateEnd=e=>{if(A(e))return h;let t=e.state;return t.window&&(t.window=null),e.state=null,l},e.exports.inflateGetHeader=(e,t)=>{if(A(e))return h;const a=e.state;return 2&a.wrap?(a.head=t,t.done=!1,l):h},e.exports.inflateSetDictionary=(e,t)=>{const a=t.length;let p,r,n;return A(e)?h:(p=e.state,0!==p.wrap&&p.mode!==_?h:p.mode===_&&(r=1,r=i(r,t,a,0),r!==p.check)?u:(n=O(e,t,a,a),n?(p.mode=k,f):(p.havedict=1,l)))},e.exports.inflateInfo="pako inflate (from Nodeca project)"},1668:(e,t,a)=>{const{Deflate:i,deflate:p,deflateRaw:r,gzip:n}=a(3303),{Inflate:s,inflate:d,inflateRaw:o,ungzip:l}=a(7083),m=a(9681);e.exports.Deflate=i,e.exports.deflate=p,e.exports.deflateRaw=r,e.exports.gzip=n,e.exports.Inflate=s,e.exports.inflate=d,e.exports.inflateRaw=o,e.exports.ungzip=l,e.exports.constants=m},1844:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ENHANCED_EXAMPLES=void 0,t.ENHANCED_EXAMPLES={class:{content:'```python\n# Basic class definition\nclass Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n    \n    def __repr__(self) -> str:\n        return f"Person(\'{self.name}\', {self.age})"\n    \n    def greet(self) -> str:\n        return f"Hello, I\'m {self.name}"\n\n# Inheritance\nclass Student(Person):\n    def __init__(self, name: str, age: int, student_id: str):\n        super().__init__(name, age)\n        self.student_id = student_id\n\n# Usage\nperson = Person("Alice", 30)\nstudent = Student("Bob", 20, "S123")\n```',description:"Define a new class"},def:{content:'```python\n# Function with type hints\ndef calculate_area(length: float, width: float) -> float:\n    """Calculate the area of a rectangle."""\n    return length * width\n\n# Function with default parameters\ndef greet(name: str, greeting: str = "Hello") -> str:\n    return f"{greeting}, {name}!"\n\n# Function with *args and **kwargs\ndef flexible_function(*args, **kwargs):\n    print(f"Args: {args}")\n    print(f"Kwargs: {kwargs}")\n\n# Async function\nasync def fetch_data(url: str) -> dict:\n    # Simulated async operation\n    return {"data": "example"}\n```',description:"Define a function"},import:{content:"```python\n# Basic imports\nimport os\nimport sys\nimport math\n\n# Import with alias\nimport numpy as np\nimport pandas as pd\n\n# Import specific items\nfrom datetime import datetime, timedelta\nfrom collections import defaultdict, Counter\n\n# Import all (use sparingly)\nfrom math import *\n\n# Conditional imports\ntry:\n    import ujson as json\nexcept ImportError:\n    import json\n\n# Relative imports (in packages)\nfrom . import utils\nfrom ..models import User\n```",description:"Import modules"},try:{content:'```python\n# Basic exception handling\ntry:\n    result = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f"Error: {e}")\nexcept Exception as e:\n    print(f"Unexpected error: {e}")\nelse:\n    print("No exceptions occurred")\nfinally:\n    print("Cleanup code")\n\n# Multiple exception types\ntry:\n    data = json.loads(user_input)\n    value = data[\'key\']\nexcept (json.JSONDecodeError, KeyError) as e:\n    print(f"Data processing error: {e}")\n\n# Re-raising exceptions\ntry:\n    risky_operation()\nexcept ValueError:\n    log_error("ValueError occurred")\n    raise  # Re-raise the same exception\n```',description:"Handle exceptions"},with:{content:"```python\n# File handling\nwith open('file.txt', 'r') as f:\n    content = f.read()\n\n# Multiple context managers\nwith open('input.txt', 'r') as infile, open('output.txt', 'w') as outfile:\n    data = infile.read()\n    outfile.write(data.upper())\n\n# Custom context manager\nfrom contextlib import contextmanager\n\n@contextmanager\ndef timer():\n    start = time.time()\n    try:\n        yield\n    finally:\n        print(f\"Elapsed: {time.time() - start:.2f}s\")\n\nwith timer():\n    time.sleep(1)\n\n# Async context manager\nasync with aiohttp.ClientSession() as session:\n    async with session.get('https://api.example.com') as response:\n        data = await response.json()\n```",description:"Context manager"},for:{content:"```python\n# Iterating over sequences\nfruits = ['apple', 'banana', 'cherry']\nfor fruit in fruits:\n    print(fruit)\n\n# With enumerate for indices\nfor i, fruit in enumerate(fruits):\n    print(f\"{i}: {fruit}\")\n\n# Dictionary iteration\nuser = {'name': 'Alice', 'age': 30, 'city': 'New York'}\nfor key, value in user.items():\n    print(f\"{key}: {value}\")\n\n# Range iterations\nfor i in range(5):        # 0, 1, 2, 3, 4\n    print(i)\n\nfor i in range(2, 8, 2):  # 2, 4, 6\n    print(i)\n\n# List comprehensions (alternative to loops)\nsquares = [x**2 for x in range(10)]\neven_squares = [x**2 for x in range(10) if x % 2 == 0]\n```",description:"Loop over a sequence"},lambda:{content:"```python\n# Basic lambda functions\nsquare = lambda x: x**2\nadd = lambda x, y: x + y\n\n# Using with built-in functions\nnumbers = [1, 2, 3, 4, 5]\nsquared = list(map(lambda x: x**2, numbers))\nevens = list(filter(lambda x: x % 2 == 0, numbers))\n\n# Sorting with lambda\nstudents = [('Alice', 85), ('Bob', 90), ('Charlie', 78)]\nstudents.sort(key=lambda x: x[1])  # Sort by grade\n\n# Conditional lambda\nmax_val = lambda a, b: a if a > b else b\n```",description:"Create anonymous function"},"str.upper":{content:'```python\n# Convert string to uppercase\n"hello".upper()  # Returns "HELLO"\n\n# Useful for case-insensitive comparisons\nuser_input = "yes"\nif user_input.upper() == "YES":\n    print("User agreed")\n\n# Works with any string, including variables\nname = "alice"\ngreeting = f"Hello, {name.upper()}!"  # "Hello, ALICE!"\n```',description:"Convert string to uppercase"},"str.lower":{content:'```python\n# Convert string to lowercase\n"HELLO".lower()  # Returns "hello"\n\n# Case normalization for comparison\nemail = "User@Example.COM"\nnormalized = email.lower()  # "user@example.com"\n\n# Case-insensitive validation\nresponse = "YES"\nif response.lower() == "yes":\n    print("Affirmative response")\n```',description:"Convert string to lowercase"},"str.split":{content:'```python\n# Split by whitespace (default)\n"hello world".split()  # ["hello", "world"]\n\n# Split by specific delimiter\n"apple,banana,cherry".split(",")  # ["apple", "banana", "cherry"]\n\n# Limit splits with maxsplit parameter\n"a-b-c-d".split("-", maxsplit=2)  # ["a", "b", "c-d"]\n\n# Practical example: parsing CSV data\ndata = "John,25,New York"\nname, age, city = data.split(",")\n```',description:"Split string into list by delimiter"},"str.join":{content:'```python\n# Join list elements into string\n"-".join(["apple", "banana", "cherry"])  # "apple-banana-cherry"\n\n# Empty separator for concatenation\n"".join(["a", "b", "c"])  # "abc"\n\n# Newline separator for multi-line text\nlines = ["First line", "Second line", "Third line"]\ntext = "\\n".join(lines)\n\n# Joining path components\npath = "/".join(["home", "user", "documents", "file.txt"])  # "home/user/documents/file.txt"\n```',description:"Join iterable elements with string"},"list.append":{content:'```python\n# Add single element to end of list\nfruits = ["apple", "banana"]\nfruits.append("cherry")  # fruits becomes ["apple", "banana", "cherry"]\n\n# Append any type of object\nnumbers = [1, 2, 3]\nnumbers.append(4)  # [1, 2, 3, 4]\n\n# Note: Appending a list adds it as a single element\nlist1 = [1, 2]\nlist1.append([3, 4])  # list1 becomes [1, 2, [3, 4]]\n\n# To add multiple items individually, use extend() instead\n```',description:"Add item to end of list"},"list.extend":{content:'```python\n# Add multiple items from iterable\nfruits = ["apple", "banana"]\nfruits.extend(["cherry", "date"])  # fruits becomes ["apple", "banana", "cherry", "date"]\n\n# Works with any iterable, not just lists\nnumbers = [1, 2]\nnumbers.extend(range(3, 6))  # numbers becomes [1, 2, 3, 4, 5]\n\n# Extend with string (adds each character)\nchars = ["A", "B"]\nchars.extend("CD")  # chars becomes ["A", "B", "C", "D"]\n\n# Equivalent to: for item in iterable: list.append(item)\n```',description:"Extend list with items from iterable"},"dict.keys":{content:'```python\n# Get view of dictionary keys\nuser = {"name": "Alice", "age": 30, "city": "New York"}\nkeys = user.keys()  # dict_keys(["name", "age", "city"])\n\n# Convert to list if needed\nkey_list = list(user.keys())  # ["name", "age", "city"]\n\n# Iterate over keys\nfor key in user.keys():\n    print(f"Key: {key}, Value: {user[key]}")\n\n# Views are dynamic - they reflect dictionary changes\nuser["email"] = "alice@example.com"\n# Now keys contains "email" too\n```',description:"Get view of dictionary keys"},"dict.values":{content:'```python\n# Get view of dictionary values\nuser = {"name": "Alice", "age": 30, "city": "New York"}\nvalues = user.values()  # dict_values(["Alice", 30, "New York"])\n\n# Convert to list if needed\nvalue_list = list(user.values())  # ["Alice", 30, "New York"]\n\n# Iterate over values\nfor value in user.values():\n    print(f"Value: {value}")\n\n# Calculate statistics\nnumbers = {"a": 10, "b": 20, "c": 30}\ntotal = sum(numbers.values())  # 60\naverage = total / len(numbers)  # 20.0\n```',description:"Get view of dictionary values"},"dict.items":{content:'```python\n# Get view of (key, value) pairs\nuser = {"name": "Alice", "age": 30, "city": "New York"}\nitems = user.items()  # dict_items([("name", "Alice"), ("age", 30), ("city", "New York")])\n\n# Iterate over key-value pairs\nfor key, value in user.items():\n    print(f"{key}: {value}")\n\n# Unpack in list comprehension\nupper_items = {k.upper(): v for k, v in user.items()}\n# {"NAME": "Alice", "AGE": 30, "CITY": "New York"}\n\n# Filter dictionary based on values\nfiltered = {k: v for k, v in user.items() if isinstance(v, str)}\n# {"name": "Alice", "city": "New York"}\n```',description:"Get view of dictionary key-value pairs"},__init__:{content:'```python\n# Basic constructor\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n# Constructor with type hints\nclass Rectangle:\n    def __init__(self, width: float, height: float):\n        self.width = width\n        self.height = height\n\n# Constructor with default values\nclass Config:\n    def __init__(self, path=None, defaults=None, **kwargs):\n        self.path = path or "config.ini"\n        self.defaults = defaults or {}\n        self.options = kwargs\n\n# Constructor with validation\nclass Circle:\n    def __init__(self, radius):\n        if radius <= 0:\n            raise ValueError("Radius must be positive")\n        self.radius = radius\n```',description:"Initialize a new instance"},__str__:{content:'```python\n# User-friendly string representation\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self) -> str:\n        return f"{self.name}, {self.age} years old"\n\n# Usage:\nperson = Person("Alice", 30)\nprint(person)  # "Alice, 30 years old"\nstr(person)    # "Alice, 30 years old"\n\n# Called by print() and str()\n```',description:"User-friendly string representation"},__repr__:{content:'```python\n# Official string representation\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __repr__(self) -> str:\n        return f"Point({self.x}, {self.y})"\n\n# Usage:\npoint = Point(3, 4)\nrepr(point)  # "Point(3, 4)"\npoint        # Point(3, 4)  - in interactive console\n\n# Fallback for __str__ if not defined\n# Good practice: output should be valid Python code\n```',description:"Official string representation"}}},1932:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TYPING_CONSTRUCTS=void 0,t.TYPING_CONSTRUCTS={List:"Generic version of list. Subscriptable with the type of items: `List[int]`",Dict:"Generic version of dict. Requires key and value types: `Dict[str, int]`",Tuple:"Generic version of tuple. Fixed-length: `Tuple[int, str]` or variable: `Tuple[int, ...]`",Set:"Generic version of set. Subscriptable with the type of items: `Set[int]`",FrozenSet:"Immutable variant of Set: `FrozenSet[int]`",Optional:"Type that is either the specified type or None: `Optional[str]` is `Union[str, None]`",Union:"Type that could be any of several types: `Union[int, str, bool]`",Any:"Special type indicating any type is acceptable. Disables type checking.",Callable:"Function or callable object. Specify arg and return types: `Callable[[int, str], bool]`",Iterator:"Iterator yielding items of the specified type: `Iterator[int]`",Iterable:"Iterable of items of the specified type: `Iterable[str]`",Sequence:"Sequence of items of the specified type: `Sequence[float]`",Mapping:"Mapping with keys and values of specified types: `Mapping[str, Any]`",Type:"A type itself. Used for class references: `Type[User]`",TypeVar:'Type variable for generic functions/classes: `T = TypeVar("T")`',Protocol:"Define structural subtyping protocols (PEP 544)",Generic:"Base for user-defined generic classes: `class Stack(Generic[T]): ...`",TypedDict:"Dictionary with known keys and value types: `class Movie(TypedDict): title: str`",Final:"Indicates a value cannot be reassigned: `x: Final = 1`",Literal:'Type restricted to specific values: `Literal["red", "green", "blue"]`',ClassVar:"Class variable rather than instance variable: `count: ClassVar[int] = 0`",NewType:'Create distinct types: `UserId = NewType("UserId", int)`',cast:"Cast a value to a type: `x = cast(List[int], y)`",overload:"Decorator for defining multiple function signatures",Annotated:'Type with additional metadata: `Annotated[int, "positive"]`'}},1943:e=>{e.exports=require("fs/promises")},1996:e=>{let t=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){t=!1}const a=new Uint8Array(256);for(let e=0;e<256;e++)a[e]=e>=252?6:e>=248?5:e>=240?4:e>=224?3:e>=192?2:1;a[254]=a[254]=1,e.exports.string2buf=e=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(e);let t,a,i,p,r,n=e.length,s=0;for(p=0;p<n;p++)a=e.charCodeAt(p),55296==(64512&a)&&p+1<n&&(i=e.charCodeAt(p+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),p++)),s+=a<128?1:a<2048?2:a<65536?3:4;for(t=new Uint8Array(s),r=0,p=0;r<s;p++)a=e.charCodeAt(p),55296==(64512&a)&&p+1<n&&(i=e.charCodeAt(p+1),56320==(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),p++)),a<128?t[r++]=a:a<2048?(t[r++]=192|a>>>6,t[r++]=128|63&a):a<65536?(t[r++]=224|a>>>12,t[r++]=128|a>>>6&63,t[r++]=128|63&a):(t[r++]=240|a>>>18,t[r++]=128|a>>>12&63,t[r++]=128|a>>>6&63,t[r++]=128|63&a);return t},e.exports.buf2string=(e,i)=>{const p=i||e.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(e.subarray(0,i));let r,n;const s=new Array(2*p);for(n=0,r=0;r<p;){let t=e[r++];if(t<128){s[n++]=t;continue}let i=a[t];if(i>4)s[n++]=65533,r+=i-1;else{for(t&=2===i?31:3===i?15:7;i>1&&r<p;)t=t<<6|63&e[r++],i--;i>1?s[n++]=65533:t<65536?s[n++]=t:(t-=65536,s[n++]=55296|t>>10&1023,s[n++]=56320|1023&t)}}return((e,a)=>{if(a<65534&&e.subarray&&t)return String.fromCharCode.apply(null,e.length===a?e:e.subarray(0,a));let i="";for(let t=0;t<a;t++)i+=String.fromCharCode(e[t]);return i})(s,n)},e.exports.utf8border=(e,t)=>{(t=t||e.length)>e.length&&(t=e.length);let i=t-1;for(;i>=0&&128==(192&e[i]);)i--;return i<0||0===i?t:i+a[e[i]]>t?i:t}},1998:e=>{const t=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),a=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),i=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),p=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);e.exports=(e,r,n,s,d,o,l,m)=>{const c=m.bits;let h,u,f,g,v,y,_=0,w=0,b=0,x=0,S=0,T=0,D=0,E=0,k=0,C=0,N=null;const A=new Uint16Array(16),$=new Uint16Array(16);let R,V,M,I=null;for(_=0;_<=15;_++)A[_]=0;for(w=0;w<s;w++)A[r[n+w]]++;for(S=c,x=15;x>=1&&0===A[x];x--);if(S>x&&(S=x),0===x)return d[o++]=20971520,d[o++]=20971520,m.bits=1,0;for(b=1;b<x&&0===A[b];b++);for(S<b&&(S=b),E=1,_=1;_<=15;_++)if(E<<=1,E-=A[_],E<0)return-1;if(E>0&&(0===e||1!==x))return-1;for($[1]=0,_=1;_<15;_++)$[_+1]=$[_]+A[_];for(w=0;w<s;w++)0!==r[n+w]&&(l[$[r[n+w]]++]=w);if(0===e?(N=I=l,y=20):1===e?(N=t,I=a,y=257):(N=i,I=p,y=0),C=0,w=0,_=b,v=o,T=S,D=0,f=-1,k=1<<S,g=k-1,1===e&&k>852||2===e&&k>592)return 1;for(;;){R=_-D,l[w]+1<y?(V=0,M=l[w]):l[w]>=y?(V=I[l[w]-y],M=N[l[w]-y]):(V=96,M=0),h=1<<_-D,u=1<<T,b=u;do{u-=h,d[v+(C>>D)+u]=R<<24|V<<16|M}while(0!==u);for(h=1<<_-1;C&h;)h>>=1;if(0!==h?(C&=h-1,C+=h):C=0,w++,0===--A[_]){if(_===x)break;_=r[n+l[w]]}if(_>S&&(C&g)!==f){for(0===D&&(D=S),v+=b,T=_-D,E=1<<T;T+D<x&&(E-=A[T+D],!(E<=0));)T++,E<<=1;if(k+=1<<T,1===e&&k>852||2===e&&k>592)return 1;f=C&g,d[f]=S<<24|T<<16|v-o}}return 0!==C&&(d[v+C]=_-D<<24|64<<16),m.bits=S,0}},2145:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OPERATORS=t.TYPING_CONSTRUCTS=t.CONSTANTS=t.DATA_TYPES=t.BUILTIN_KEYWORDS=t.MODULES=t.MAP=void 0,t.getDunderInfo=function(e){if(/^__.*__$/.test(e))return{title:`${e} — Special method`,url:"reference/datamodel.html",anchor:`object.${e}`}},t.MAP={class:{title:"class — Class Definitions",url:"reference/compound_stmts.html",anchor:"class-definitions"},def:{title:"def — Function Definitions",url:"reference/compound_stmts.html",anchor:"function-definitions"},return:{title:"return — Return Statement",url:"reference/simple_stmts.html",anchor:"the-return-statement"},with:{title:"with — Context Managers",url:"reference/compound_stmts.html",anchor:"the-with-statement"},yield:{title:"yield — Yield Expressions",url:"reference/expressions.html",anchor:"yield-expressions"},async:{title:"async — Asynchronous Functions",url:"reference/compound_stmts.html",anchor:"the-async-for-statement"},await:{title:"await — Await Expressions",url:"reference/expressions.html",anchor:"await-expression"},import:{title:"import — Import Statement",url:"reference/simple_stmts.html",anchor:"import"},from:{title:"from — Import Statement",url:"reference/simple_stmts.html",anchor:"import"},try:{title:"try — Exception Handling",url:"reference/compound_stmts.html",anchor:"the-try-statement"},if:{title:"if — Conditional Statements",url:"reference/compound_stmts.html",anchor:"the-if-statement"},for:{title:"for — For Loops",url:"reference/compound_stmts.html",anchor:"the-for-statement"},while:{title:"while — While Loops",url:"reference/compound_stmts.html",anchor:"the-while-statement"},except:{title:"except — Exception Handlers",url:"reference/executionmodel.html",anchor:"exceptions"},finally:{title:"finally — Cleanup Code",url:"reference/compound_stmts.html",anchor:"finally-clause"},else:{title:"else — Alternative Execution",url:"reference/compound_stmts.html",anchor:"else-clause"},elif:{title:"elif — Else If",url:"reference/compound_stmts.html",anchor:"the-if-statement"},break:{title:"break — Loop Termination",url:"reference/simple_stmts.html",anchor:"the-break-statement"},continue:{title:"continue — Loop Continuation",url:"reference/simple_stmts.html",anchor:"the-continue-statement"},pass:{title:"pass — No Operation",url:"reference/simple_stmts.html",anchor:"the-pass-statement"},lambda:{title:"lambda — Anonymous Functions",url:"reference/expressions.html",anchor:"lambda"},"f-string":{title:"f-strings — Formatted String Literals",url:"reference/lexical_analysis.html",anchor:"formatted-string-literals"},global:{title:"global — Global Variables",url:"reference/simple_stmts.html",anchor:"the-global-statement"},nonlocal:{title:"nonlocal — Nonlocal Variables",url:"reference/simple_stmts.html",anchor:"the-nonlocal-statement"},raise:{title:"raise — Raise Exception",url:"reference/simple_stmts.html",anchor:"the-raise-statement"},assert:{title:"assert — Debug Assertion",url:"reference/simple_stmts.html",anchor:"the-assert-statement"},del:{title:"del — Delete Statement",url:"reference/simple_stmts.html",anchor:"the-del-statement"},match:{title:"match — Pattern Matching (Python 3.10+)",url:"reference/compound_stmts.html",anchor:"the-match-statement"},case:{title:"case — Match Case (Python 3.10+)",url:"reference/compound_stmts.html",anchor:"the-match-statement"},and:{title:"and — Logical AND",url:"reference/expressions.html",anchor:"boolean-operations"},or:{title:"or — Logical OR",url:"reference/expressions.html",anchor:"boolean-operations"},not:{title:"not — Logical NOT",url:"reference/expressions.html",anchor:"unary-arithmetic-and-bitwise-operations"},is:{title:"is — Identity Comparison",url:"reference/expressions.html",anchor:"identity-comparisons"},in:{title:"in — Membership Test",url:"reference/expressions.html",anchor:"membership-test-operations"},"==":{title:"== — Equality Comparison",url:"reference/expressions.html",anchor:"value-comparisons"},"!=":{title:"!= — Inequality Comparison",url:"reference/expressions.html",anchor:"value-comparisons"},"<":{title:"< — Less Than",url:"reference/expressions.html",anchor:"value-comparisons"},">":{title:"> — Greater Than",url:"reference/expressions.html",anchor:"value-comparisons"},"<=":{title:"<= — Less Than or Equal",url:"reference/expressions.html",anchor:"value-comparisons"},">=":{title:">= — Greater Than or Equal",url:"reference/expressions.html",anchor:"value-comparisons"},"+":{title:"+ — Addition",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"-":{title:"- — Subtraction",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"*":{title:"* — Multiplication",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"/":{title:"/ — Division",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"//":{title:"// — Floor Division",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"%":{title:"% — Modulo",url:"reference/expressions.html",anchor:"binary-arithmetic-operations"},"**":{title:"** — Exponentiation",url:"reference/expressions.html",anchor:"the-power-operator"},"&":{title:"& — Bitwise AND",url:"reference/expressions.html",anchor:"binary-bitwise-operations"},"|":{title:"| — Bitwise OR",url:"reference/expressions.html",anchor:"binary-bitwise-operations"},"^":{title:"^ — Bitwise XOR",url:"reference/expressions.html",anchor:"binary-bitwise-operations"},"~":{title:"~ — Bitwise NOT",url:"reference/expressions.html",anchor:"unary-arithmetic-and-bitwise-operations"},"<<":{title:"<< — Left Shift",url:"reference/expressions.html",anchor:"shifting-operations"},">>":{title:">> — Right Shift",url:"reference/expressions.html",anchor:"shifting-operations"},"=":{title:"= — Assignment",url:"reference/simple_stmts.html",anchor:"assignment-statements"},"+=":{title:"+= — Addition Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"-=":{title:"-= — Subtraction Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"*=":{title:"*= — Multiplication Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"/=":{title:"/= — Division Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"//=":{title:"//= — Floor Division Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"%=":{title:"%= — Modulo Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"**=":{title:"**= — Exponentiation Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"&=":{title:"&= — Bitwise AND Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"|=":{title:"|= — Bitwise OR Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"^=":{title:"^= — Bitwise XOR Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},"<<=":{title:"<<= — Left Shift Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},">>=":{title:">>= — Right Shift Assignment",url:"reference/simple_stmts.html",anchor:"augmented-assignment-statements"},print:{title:"print() — Print Objects",url:"library/functions.html",anchor:"print"},len:{title:"len() — Return Length",url:"library/functions.html",anchor:"len"},range:{title:"range() — Range Object",url:"library/functions.html",anchor:"range"},enumerate:{title:"enumerate() — Enumerate Object",url:"library/functions.html",anchor:"enumerate"},zip:{title:"zip() — Zip Iterator",url:"library/functions.html",anchor:"zip"},map:{title:"map() — Apply Function",url:"library/functions.html",anchor:"map"},filter:{title:"filter() — Filter Elements",url:"library/functions.html",anchor:"filter"},sorted:{title:"sorted() — Return Sorted List",url:"library/functions.html",anchor:"sorted"},reversed:{title:"reversed() — Reverse Iterator",url:"library/functions.html",anchor:"reversed"},sum:{title:"sum() — Sum Iterable",url:"library/functions.html",anchor:"sum"},max:{title:"max() — Maximum Value",url:"library/functions.html",anchor:"max"},min:{title:"min() — Minimum Value",url:"library/functions.html",anchor:"min"},abs:{title:"abs() — Absolute Value",url:"library/functions.html",anchor:"abs"},round:{title:"round() — Round Number",url:"library/functions.html",anchor:"round"},any:{title:"any() — Any True",url:"library/functions.html",anchor:"any"},all:{title:"all() — All True",url:"library/functions.html",anchor:"all"},open:{title:"open() — Open File",url:"library/functions.html",anchor:"open"},isinstance:{title:"isinstance() — Type Check",url:"library/functions.html",anchor:"isinstance"},issubclass:{title:"issubclass() — Subclass Check",url:"library/functions.html",anchor:"issubclass"},getattr:{title:"getattr() — Get Attribute",url:"library/functions.html",anchor:"getattr"},setattr:{title:"setattr() — Set Attribute",url:"library/functions.html",anchor:"setattr"},hasattr:{title:"hasattr() — Has Attribute",url:"library/functions.html",anchor:"hasattr"},delattr:{title:"delattr() — Delete Attribute",url:"library/functions.html",anchor:"delattr"},id:{title:"id() — Identity",url:"library/functions.html",anchor:"id"},pow:{title:"pow() — Exponentiation",url:"library/functions.html",anchor:"pow"},iter:{title:"iter() — Iterator",url:"library/functions.html",anchor:"iter"},next:{title:"next() — Next Item",url:"library/functions.html",anchor:"next"},type:{title:"type() — Return Type",url:"library/functions.html",anchor:"type"},vars:{title:"vars() — Object Variables",url:"library/functions.html",anchor:"vars"},dir:{title:"dir() — List Attributes",url:"library/functions.html",anchor:"dir"},help:{title:"help() — Interactive Help",url:"library/functions.html",anchor:"help"},input:{title:"input() — Read Input",url:"library/functions.html",anchor:"input"},eval:{title:"eval() — Evaluate Expression",url:"library/functions.html",anchor:"eval"},exec:{title:"exec() — Execute Code",url:"library/functions.html",anchor:"exec"},compile:{title:"compile() — Compile Source",url:"library/functions.html",anchor:"compile"},hash:{title:"hash() — Hash Value",url:"library/functions.html",anchor:"hash"},hex:{title:"hex() — Hexadecimal",url:"library/functions.html",anchor:"hex"},oct:{title:"oct() — Octal",url:"library/functions.html",anchor:"oct"},bin:{title:"bin() — Binary",url:"library/functions.html",anchor:"bin"},ord:{title:"ord() — Unicode Point",url:"library/functions.html",anchor:"ord"},chr:{title:"chr() — Character",url:"library/functions.html",anchor:"chr"},ascii:{title:"ascii() — ASCII Representation",url:"library/functions.html",anchor:"ascii"},repr:{title:"repr() — String Representation",url:"library/functions.html",anchor:"repr"},format:{title:"format() — Format Value",url:"library/functions.html",anchor:"format"},divmod:{title:"divmod() — Division & Modulo",url:"library/functions.html",anchor:"divmod"},callable:{title:"callable() — Check if Callable",url:"library/functions.html",anchor:"callable"},super:{title:"super() — Access Parent Class",url:"library/functions.html",anchor:"super"},staticmethod:{title:"staticmethod() — Static Method",url:"library/functions.html",anchor:"staticmethod"},classmethod:{title:"classmethod() — Class Method",url:"library/functions.html",anchor:"classmethod"},property:{title:"property() — Property Descriptor",url:"library/functions.html",anchor:"property"},slice:{title:"slice() — Slice Object",url:"library/functions.html",anchor:"slice"},object:{title:"object() — Base Object",url:"library/functions.html",anchor:"object"},bytes:{title:"bytes() — Bytes Type",url:"library/functions.html",anchor:"bytes"},bytearray:{title:"bytearray() — Mutable Bytes",url:"library/functions.html",anchor:"bytearray"},memoryview:{title:"memoryview() — Memory View",url:"library/functions.html",anchor:"memoryview"},frozenset:{title:"frozenset() — Immutable Set",url:"library/functions.html",anchor:"frozenset"},complex:{title:"complex() — Complex Number",url:"library/functions.html",anchor:"complex"},locals:{title:"locals() — Local Variables",url:"library/functions.html",anchor:"locals"},globals:{title:"globals() — Global Variables",url:"library/functions.html",anchor:"globals"},breakpoint:{title:"breakpoint() — Debug Breakpoint",url:"library/functions.html",anchor:"breakpoint"},__import__:{title:"__import__() — Import Function",url:"library/functions.html",anchor:"import__"},aiter:{title:"aiter() — Async Iterator (3.10+)",url:"library/functions.html",anchor:"aiter"},anext:{title:"anext() — Async Next (3.10+)",url:"library/functions.html",anchor:"anext"},str:{title:"str — String Type",url:"library/stdtypes.html",anchor:"text-sequence-type-str"},int:{title:"int — Integer Type",url:"library/functions.html",anchor:"int"},float:{title:"float — Floating Point",url:"library/functions.html",anchor:"float"},bool:{title:"bool — Boolean Type",url:"library/functions.html",anchor:"bool"},list:{title:"list — List Type",url:"library/stdtypes.html",anchor:"list"},dict:{title:"dict — Dictionary Type",url:"library/stdtypes.html",anchor:"dict"},set:{title:"set — Set Type",url:"library/stdtypes.html",anchor:"set"},tuple:{title:"tuple — Tuple Type",url:"library/stdtypes.html",anchor:"tuple"},None:{title:"None — Null Value",url:"library/constants.html",anchor:"None"},True:{title:"True — Boolean True",url:"library/constants.html",anchor:"True"},False:{title:"False — Boolean False",url:"library/constants.html",anchor:"False"},Exception:{title:"Exception — Base Exception",url:"library/exceptions.html",anchor:"Exception"},BaseException:{title:"BaseException — Root of Exceptions",url:"library/exceptions.html",anchor:"BaseException"},ValueError:{title:"ValueError — Invalid Value",url:"library/exceptions.html",anchor:"ValueError"},TypeError:{title:"TypeError — Invalid Type",url:"library/exceptions.html",anchor:"TypeError"},KeyError:{title:"KeyError — Missing Mapping Key",url:"library/exceptions.html",anchor:"KeyError"},IndexError:{title:"IndexError — Sequence Index Out of Range",url:"library/exceptions.html",anchor:"IndexError"},StopIteration:{title:"StopIteration — Iterator Exhausted",url:"library/exceptions.html",anchor:"StopIteration"},ImportError:{title:"ImportError — Import Failed",url:"library/exceptions.html",anchor:"ImportError"},AttributeError:{title:"AttributeError — Attribute Error",url:"library/exceptions.html",anchor:"AttributeError"},NameError:{title:"NameError — Name Not Found",url:"library/exceptions.html",anchor:"NameError"},RuntimeError:{title:"RuntimeError — Runtime Error",url:"library/exceptions.html",anchor:"RuntimeError"},NotImplementedError:{title:"NotImplementedError — Not Implemented",url:"library/exceptions.html",anchor:"NotImplementedError"},FileNotFoundError:{title:"FileNotFoundError — File Not Found",url:"library/exceptions.html",anchor:"FileNotFoundError"},PermissionError:{title:"PermissionError — Permission Denied",url:"library/exceptions.html",anchor:"PermissionError"},strip:{title:"str.strip() — Remove Whitespace",url:"library/stdtypes.html",anchor:"str.strip"},lstrip:{title:"str.lstrip() — Remove Left Whitespace",url:"library/stdtypes.html",anchor:"str.lstrip"},rstrip:{title:"str.rstrip() — Remove Right Whitespace",url:"library/stdtypes.html",anchor:"str.rstrip"},split:{title:"str.split() — Split String",url:"library/stdtypes.html",anchor:"str.split"},rsplit:{title:"str.rsplit() — Right Split String",url:"library/stdtypes.html",anchor:"str.rsplit"},join:{title:"str.join() — Join Iterable",url:"library/stdtypes.html",anchor:"str.join"},replace:{title:"str.replace() — Replace Substring",url:"library/stdtypes.html",anchor:"str.replace"},find:{title:"str.find() — Find Substring",url:"library/stdtypes.html",anchor:"str.find"},rfind:{title:"str.rfind() — Find Substring (Right)",url:"library/stdtypes.html",anchor:"str.rfind"},index:{title:"str.index() — Index of Substring",url:"library/stdtypes.html",anchor:"str.index"},rindex:{title:"str.rindex() — Index of Substring (Right)",url:"library/stdtypes.html",anchor:"str.rindex"},startswith:{title:"str.startswith() — Check Prefix",url:"library/stdtypes.html",anchor:"str.startswith"},endswith:{title:"str.endswith() — Check Suffix",url:"library/stdtypes.html",anchor:"str.endswith"},upper:{title:"str.upper() — Uppercase",url:"library/stdtypes.html",anchor:"str.upper"},lower:{title:"str.lower() — Lowercase",url:"library/stdtypes.html",anchor:"str.lower"},capitalize:{title:"str.capitalize() — Capitalize First",url:"library/stdtypes.html",anchor:"str.capitalize"},title:{title:"str.title() — Title Case",url:"library/stdtypes.html",anchor:"str.title"},swapcase:{title:"str.swapcase() — Swap Case",url:"library/stdtypes.html",anchor:"str.swapcase"},casefold:{title:"str.casefold() — Case Folding",url:"library/stdtypes.html",anchor:"str.casefold"},isdigit:{title:"str.isdigit() — Check Digits",url:"library/stdtypes.html",anchor:"str.isdigit"},isalpha:{title:"str.isalpha() — Check Letters",url:"library/stdtypes.html",anchor:"str.isalpha"},isalnum:{title:"str.isalnum() — Check Alphanumeric",url:"library/stdtypes.html",anchor:"str.isalnum"},isspace:{title:"str.isspace() — Check Whitespace",url:"library/stdtypes.html",anchor:"str.isspace"},islower:{title:"str.islower() — Check Lowercase",url:"library/stdtypes.html",anchor:"str.islower"},isupper:{title:"str.isupper() — Check Uppercase",url:"library/stdtypes.html",anchor:"str.isupper"},istitle:{title:"str.istitle() — Check Title Case",url:"library/stdtypes.html",anchor:"str.istitle"},count:{title:"str.count() — Count Occurrences",url:"library/stdtypes.html",anchor:"str.count"},encode:{title:"str.encode() — Encode to Bytes",url:"library/stdtypes.html",anchor:"str.encode"},str_format:{title:"str.format() — Format String",url:"library/stdtypes.html",anchor:"str.format"},format_map:{title:"str.format_map() — Format with Mapping",url:"library/stdtypes.html",anchor:"str.format_map"},center:{title:"str.center() — Center String",url:"library/stdtypes.html",anchor:"str.center"},ljust:{title:"str.ljust() — Left Justify",url:"library/stdtypes.html",anchor:"str.ljust"},rjust:{title:"str.rjust() — Right Justify",url:"library/stdtypes.html",anchor:"str.rjust"},zfill:{title:"str.zfill() — Zero Fill",url:"library/stdtypes.html",anchor:"str.zfill"},partition:{title:"str.partition() — Partition String",url:"library/stdtypes.html",anchor:"str.partition"},rpartition:{title:"str.rpartition() — Right Partition",url:"library/stdtypes.html",anchor:"str.rpartition"},splitlines:{title:"str.splitlines() — Split by Lines",url:"library/stdtypes.html",anchor:"str.splitlines"},expandtabs:{title:"str.expandtabs() — Expand Tabs",url:"library/stdtypes.html",anchor:"str.expandtabs"},translate:{title:"str.translate() — Translate Characters",url:"library/stdtypes.html",anchor:"str.translate"},maketrans:{title:"str.maketrans() — Make Translation Table",url:"library/stdtypes.html",anchor:"str.maketrans"},removeprefix:{title:"str.removeprefix() — Remove Prefix (Python 3.9+)",url:"library/stdtypes.html",anchor:"str.removeprefix"},removesuffix:{title:"str.removesuffix() — Remove Suffix (Python 3.9+)",url:"library/stdtypes.html",anchor:"str.removesuffix"},isascii:{title:"str.isascii() — Check ASCII (3.7+)",url:"library/stdtypes.html",anchor:"str.isascii"},isprintable:{title:"str.isprintable() — Check Printable",url:"library/stdtypes.html",anchor:"str.isprintable"},isidentifier:{title:"str.isidentifier() — Check Identifier",url:"library/stdtypes.html",anchor:"str.isidentifier"},isnumeric:{title:"str.isnumeric() — Check Numeric",url:"library/stdtypes.html",anchor:"str.isnumeric"},isdecimal:{title:"str.isdecimal() — Check Decimal",url:"library/stdtypes.html",anchor:"str.isdecimal"},append:{title:"list.append() — Add Item",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},extend:{title:"list.extend() — Extend List",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},insert:{title:"list.insert() — Insert Item",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},remove:{title:"list.remove() — Remove Item",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},pop:{title:"list.pop() — Remove & Return",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},clear:{title:"list.clear() — Remove All Items",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},copy:{title:"list.copy() — Shallow Copy",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},reverse:{title:"list.reverse() — Reverse In Place",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},sort:{title:"list.sort() — Sort In Place",url:"library/stdtypes.html",anchor:"mutable-sequence-types"},keys:{title:"dict.keys() — Dictionary Keys",url:"library/stdtypes.html",anchor:"dict.keys"},values:{title:"dict.values() — Dictionary Values",url:"library/stdtypes.html",anchor:"dict.values"},items:{title:"dict.items() — Dictionary Items",url:"library/stdtypes.html",anchor:"dict.items"},get:{title:"dict.get() — Get Value",url:"library/stdtypes.html",anchor:"dict.get"},setdefault:{title:"dict.setdefault() — Get or Set Default",url:"library/stdtypes.html",anchor:"dict.setdefault"},update:{title:"dict.update() — Update Dictionary",url:"library/stdtypes.html",anchor:"dict.update"},popitem:{title:"dict.popitem() — Remove & Return Item",url:"library/stdtypes.html",anchor:"dict.popitem"},fromkeys:{title:"dict.fromkeys() — Create from Keys",url:"library/stdtypes.html",anchor:"dict.fromkeys"},add:{title:"set.add() — Add Element",url:"library/stdtypes.html",anchor:"frozenset.add"},discard:{title:"set.discard() — Remove Element",url:"library/stdtypes.html",anchor:"frozenset.discard"},union:{title:"set.union() — Union of Sets",url:"library/stdtypes.html",anchor:"frozenset.union"},intersection:{title:"set.intersection() — Intersection",url:"library/stdtypes.html",anchor:"frozenset.intersection"},difference:{title:"set.difference() — Difference",url:"library/stdtypes.html",anchor:"frozenset.difference"},symmetric_difference:{title:"set.symmetric_difference() — Symmetric Difference",url:"library/stdtypes.html",anchor:"frozenset.symmetric_difference"},issubset:{title:"set.issubset() — Check Subset",url:"library/stdtypes.html",anchor:"frozenset.issubset"},issuperset:{title:"set.issuperset() — Check Superset",url:"library/stdtypes.html",anchor:"frozenset.issuperset"},isdisjoint:{title:"set.isdisjoint() — Check Disjoint",url:"library/stdtypes.html",anchor:"frozenset.isdisjoint"},intersection_update:{title:"set.intersection_update() — Update Intersection",url:"library/stdtypes.html",anchor:"frozenset.intersection_update"},difference_update:{title:"set.difference_update() — Update Difference",url:"library/stdtypes.html",anchor:"frozenset.difference_update"},symmetric_difference_update:{title:"set.symmetric_difference_update() — Update Symmetric Difference",url:"library/stdtypes.html",anchor:"frozenset.symmetric_difference_update"},Generic:{title:"typing.Generic — Generic Types",url:"library/typing.html",anchor:"typing.Generic"},TypeVar:{title:"typing.TypeVar — Type Variables",url:"library/typing.html",anchor:"typing.TypeVar"},Protocol:{title:"typing.Protocol — Structural Subtyping",url:"library/typing.html",anchor:"typing.Protocol"},Union:{title:"typing.Union — Union Types",url:"library/typing.html",anchor:"typing.Union"},Optional:{title:"typing.Optional — Optional Types",url:"library/typing.html",anchor:"typing.Optional"},List:{title:"typing.List — List Type Hint",url:"library/typing.html",anchor:"typing.List"},Dict:{title:"typing.Dict — Dictionary Type Hint",url:"library/typing.html",anchor:"typing.Dict"},Set:{title:"typing.Set — Set Type Hint",url:"library/typing.html",anchor:"typing.Set"},Tuple:{title:"typing.Tuple — Tuple Type Hint",url:"library/typing.html",anchor:"typing.Tuple"},Callable:{title:"typing.Callable — Callable Types",url:"library/typing.html",anchor:"typing.Callable"},Type:{title:"typing.Type — Class Types",url:"library/typing.html",anchor:"typing.Type"},ClassVar:{title:"typing.ClassVar — Class Variables",url:"library/typing.html",anchor:"typing.ClassVar"},Final:{title:"typing.Final — Final Variables",url:"library/typing.html",anchor:"typing.Final"},Literal:{title:"typing.Literal — Literal Types",url:"library/typing.html",anchor:"typing.Literal"},Annotated:{title:"typing.Annotated — Annotated Types",url:"library/typing.html",anchor:"typing.Annotated"},Any:{title:"typing.Any — Any Type",url:"library/typing.html",anchor:"typing.Any"},NoReturn:{title:"typing.NoReturn — No Return Type",url:"library/typing.html",anchor:"typing.NoReturn"},overload:{title:"typing.overload — Function Overloading",url:"library/typing.html",anchor:"typing.overload"}},t.MODULES={os:{title:"os — Operating System Interface",url:"library/os.html"},sys:{title:"sys — System Parameters & Functions",url:"library/sys.html"},math:{title:"math — Mathematical Functions",url:"library/math.html"},random:{title:"random — Random Number Generation",url:"library/random.html"},datetime:{title:"datetime — Date & Time Handling",url:"library/datetime.html"},time:{title:"time — Time Access & Conversions",url:"library/time.html"},json:{title:"json — JSON Encoder & Decoder",url:"library/json.html"},re:{title:"re — Regular Expression Operations",url:"library/re.html"},urllib:{title:"urllib — URL Handling Modules",url:"library/urllib.html"},http:{title:"http — HTTP Modules",url:"library/http.html"},pathlib:{title:"pathlib — Object-oriented Filesystem Paths",url:"library/pathlib.html"},typing:{title:"typing — Type Hints Support",url:"library/typing.html"},collections:{title:"collections — Container Data Types",url:"library/collections.html"},itertools:{title:"itertools — Iterator Building Functions",url:"library/itertools.html"},functools:{title:"functools — Higher-order Functions & Utilities",url:"library/functools.html"},operator:{title:"operator — Standard Operators as Functions",url:"library/operator.html"},copy:{title:"copy — Shallow & Deep Copy Operations",url:"library/copy.html"},pickle:{title:"pickle — Python Object Serialization",url:"library/pickle.html"},csv:{title:"csv — CSV File Reading & Writing",url:"library/csv.html"},sqlite3:{title:"sqlite3 — SQLite Database Interface",url:"library/sqlite3.html"},threading:{title:"threading — Thread-based Parallelism",url:"library/threading.html"},multiprocessing:{title:"multiprocessing — Process-based Parallelism",url:"library/multiprocessing.html"},concurrent:{title:"concurrent — Concurrent Execution",url:"library/concurrent.html"},asyncio:{title:"asyncio — Asynchronous I/O",url:"library/asyncio.html"},subprocess:{title:"subprocess — Subprocess Management",url:"library/subprocess.html"},shutil:{title:"shutil — High-level File Operations",url:"library/shutil.html"},glob:{title:"glob — Unix Pathname Pattern Expansion",url:"library/glob.html"},tempfile:{title:"tempfile — Temporary Files & Directories",url:"library/tempfile.html"},io:{title:"io — Core Tools for Working with Streams",url:"library/io.html"},logging:{title:"logging — Logging Facility",url:"library/logging.html"},argparse:{title:"argparse — Command-line Argument Parser",url:"library/argparse.html"},configparser:{title:"configparser — Configuration File Parser",url:"library/configparser.html"},xml:{title:"xml — XML Processing Modules",url:"library/xml.html"},html:{title:"html — HTML Support",url:"library/html.html"},email:{title:"email — Email Handling Package",url:"library/email.html"},base64:{title:"base64 — Base16, Base32, Base64 Data Encodings",url:"library/base64.html"},hashlib:{title:"hashlib — Secure Hash & Message Digest",url:"library/hashlib.html"},hmac:{title:"hmac — Keyed-Hashing for Message Authentication",url:"library/hmac.html"},secrets:{title:"secrets — Cryptographically Strong Random Numbers",url:"library/secrets.html"},ssl:{title:"ssl — TLS/SSL Wrapper for Socket Objects",url:"library/ssl.html"},socket:{title:"socket — Low-level Networking Interface",url:"library/socket.html"},select:{title:"select — Waiting for I/O Completion",url:"library/select.html"},signal:{title:"signal — Signal Handling",url:"library/signal.html"},struct:{title:"struct — Binary Data Structures",url:"library/struct.html"},array:{title:"array — Efficient Arrays of Numeric Values",url:"library/array.html"},queue:{title:"queue — Synchronized Queue Class",url:"library/queue.html"},heapq:{title:"heapq — Heap Queue Algorithm",url:"library/heapq.html"},bisect:{title:"bisect — Array Bisection Algorithm",url:"library/bisect.html"},weakref:{title:"weakref — Weak References",url:"library/weakref.html"},gc:{title:"gc — Garbage Collector Interface",url:"library/gc.html"},inspect:{title:"inspect — Inspect Live Objects",url:"library/inspect.html"},traceback:{title:"traceback — Print or Retrieve Stack Traceback",url:"library/traceback.html"},warnings:{title:"warnings — Warning Control",url:"library/warnings.html"},contextlib:{title:"contextlib — Context Manager Utilities",url:"library/contextlib.html"},abc:{title:"abc — Abstract Base Classes",url:"library/abc.html"},numbers:{title:"numbers — Numeric Abstract Base Classes",url:"library/numbers.html"},decimal:{title:"decimal — Decimal Fixed Point & Floating Point",url:"library/decimal.html"},fractions:{title:"fractions — Rational Numbers",url:"library/fractions.html"},statistics:{title:"statistics — Mathematical Statistics Functions",url:"library/statistics.html"},enum:{title:"enum — Enumerations",url:"library/enum.html"},dataclasses:{title:"dataclasses — Data Classes",url:"library/dataclasses.html"},calendar:{title:"calendar — Calendar-related Functions",url:"library/calendar.html"},locale:{title:"locale — Internationalization Services",url:"library/locale.html"},gettext:{title:"gettext — Multilingual Internationalization",url:"library/gettext.html"},string:{title:"string — Common String Operations",url:"library/string.html"},textwrap:{title:"textwrap — Text Wrapping & Filling",url:"library/textwrap.html"},unicodedata:{title:"unicodedata — Unicode Database",url:"library/unicodedata.html"},codecs:{title:"codecs — Codec Registry & Base Classes",url:"library/codecs.html"},keyword:{title:"keyword — Testing for Python Keywords",url:"library/keyword.html"},token:{title:"token — Constants for Python Parse Trees",url:"library/token.html"},tokenize:{title:"tokenize — Tokenizer for Python Source",url:"library/tokenize.html"},ast:{title:"ast — Abstract Syntax Trees",url:"library/ast.html"},symtable:{title:"symtable — Symbol Table Generation",url:"library/symtable.html"},dis:{title:"dis — Disassembler for Python Bytecode",url:"library/dis.html"},importlib:{title:"importlib — Import System",url:"library/importlib.html"},pkgutil:{title:"pkgutil — Package Extension Utilities",url:"library/pkgutil.html"},modulefinder:{title:"modulefinder — Find Modules Used by Script",url:"library/modulefinder.html"},runpy:{title:"runpy — Locating & Executing Python Modules",url:"library/runpy.html"},types:{title:"types — Dynamic Type Creation & Names for Built-in Types",url:"library/types.html"},platform:{title:"platform — Access Underlying Platform Data",url:"library/platform.html"},errno:{title:"errno — Standard errno System Symbols",url:"library/errno.html"},ctypes:{title:"ctypes — Foreign Function Library",url:"library/ctypes.html"}},t.BUILTIN_KEYWORDS=["print","len","range","enumerate","zip","map","filter","sorted","reversed","sum","max","min","abs","round","type","vars","dir","help","input","eval","exec","compile","hash","hex","oct","bin","ord","chr","ascii","repr","format","divmod","callable","super","staticmethod","classmethod","property","slice","object","bytes","bytearray","memoryview","frozenset","complex","locals","globals","breakpoint","and","or","not","is","in"],t.DATA_TYPES=["str","int","float","bool","list","dict","set","tuple"],t.CONSTANTS=["None","True","False"],t.TYPING_CONSTRUCTS=["Generic","TypeVar","Protocol","Union","Optional","List","Dict","Set","Tuple","Callable","Type","ClassVar","Final","Literal","Annotated","Any","NoReturn","overload"],t.OPERATORS=["==","!=","<=",">=","<",">","+","-","*","/","//","%","**","&","|","^","~","<<",">>","=","+=","-=","*=","/=","//=","%=","**=","&=","|=","^=","<<=",">>="]},2218:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.METHOD_COMPARISONS=t.VERSION_HISTORY=void 0,t.getVersionInfo=function(e){return t.VERSION_HISTORY[e.toLowerCase()]||null},t.getMethodComparison=function(e){if(t.METHOD_COMPARISONS[e])return t.METHOD_COMPARISONS[e];for(const[a,i]of Object.entries(t.METHOD_COMPARISONS))if(i.similar.includes(e))return i;return null},t.formatVersionInfo=function(e){const t=[];if(e.addedIn&&t.push(`✨ **New in Python ${e.addedIn}**`),e.deprecatedIn&&t.push(`⚠️  **Deprecated in Python ${e.deprecatedIn}**`),e.removedIn&&t.push(`❌ **Removed in Python ${e.removedIn}**`),e.changedIn&&e.changedIn.length>0){t.push("📝 **Changes:**");for(const a of e.changedIn)t.push(`  - Python ${a.version}: ${a.change}`)}return e.migrationGuide&&t.push(`\n💡 **Migration:** ${e.migrationGuide}`),t.join("\n")},t.formatComparison=function(e){return`### 🔄 Similar Methods: ${e.similar.join(", ")}\n\n${e.differences}\n\n**When to use:** ${e.whenToUse}`},t.VERSION_HISTORY={match:{addedIn:"3.10",migrationGuide:"Replace complex if-elif chains with match-case for pattern matching"},case:{addedIn:"3.10",migrationGuide:"Used within match statements for pattern matching"},removeprefix:{addedIn:"3.9",migrationGuide:"Replace: s[len(prefix):] if s.startswith(prefix) else s"},removesuffix:{addedIn:"3.9",migrationGuide:"Replace: s[:-len(suffix)] if s.endswith(suffix) else s"},uniontype:{addedIn:"3.10",migrationGuide:"Use X | Y instead of Union[X, Y] from typing"},async:{addedIn:"3.5",changedIn:[{version:"3.7",change:"async and await became reserved keywords"}]},await:{addedIn:"3.5",changedIn:[{version:"3.7",change:"async and await became reserved keywords"}]},"f-string":{addedIn:"3.6",migrationGuide:'Replace: "Hello {}".format(name) with f"Hello {name}"'},walrus:{addedIn:"3.8",migrationGuide:"Assignment expressions: (n := len(data)) allows assignment in expressions"},TypeAlias:{addedIn:"3.10",migrationGuide:"Explicit type alias: Vector: TypeAlias = list[float]"},zip:{changedIn:[{version:"3.10",change:"Added strict parameter to ensure equal length iterables"}]},dict:{changedIn:[{version:"3.7",change:"Dictionaries are guaranteed to maintain insertion order"},{version:"3.9",change:"Can use dict | other_dict for merging (union operator)"}]},print:{changedIn:[{version:"3.0",change:"Changed from statement to function"}]}},t.METHOD_COMPARISONS={append_vs_extend:{similar:["append","extend","insert"],differences:"**append()**: Adds a single element to the end\n**extend()**: Adds all elements from an iterable\n**insert()**: Adds element at specific position\n\nExample:\nlst = [1, 2]\nlst.append([3, 4])   # [1, 2, [3, 4]]\nlst.extend([3, 4])   # [1, 2, 3, 4]\nlst.insert(0, 0)     # [0, 1, 2]",whenToUse:"Use append for single items, extend for multiple items, insert for specific positions"},remove_vs_pop_vs_del:{similar:["remove","pop","del","clear"],differences:"**remove()**: Removes first occurrence by value\n**pop()**: Removes and returns item by index\n**del**: Removes item by index (no return)\n**clear()**: Removes all items\n\nExample:\nlst = [1, 2, 3, 2]\nlst.remove(2)    # [1, 3, 2] - first 2 removed\nval = lst.pop()  # returns 2, lst = [1, 3]\ndel lst[0]       # lst = [3]\nlst.clear()      # lst = []",whenToUse:"Use remove for value-based deletion, pop when you need the value, del for index-based, clear for all"},sort_vs_sorted:{similar:["sort","sorted","reverse","reversed"],differences:"**sort()**: Sorts list in-place, returns None\n**sorted()**: Returns new sorted list, original unchanged\n\nExample:\nlst = [3, 1, 2]\nlst.sort()           # lst = [1, 2, 3]\nnew_lst = sorted(lst) # lst unchanged, new_lst = [1, 2, 3]",whenToUse:"Use sort() to modify existing list, sorted() to create new sorted list"},get_vs_setdefault:{similar:["get","setdefault","__getitem__"],differences:"**get()**: Returns value or default, doesn't modify dict\n**setdefault()**: Returns value or sets and returns default\n**dict[key]**: Raises KeyError if missing\n\nExample:\nd = {'a': 1}\nd.get('b', 0)        # returns 0, d unchanged\nd.setdefault('b', 0) # returns 0, d = {'a': 1, 'b': 0}\nd['c']               # raises KeyError",whenToUse:"Use get() for read-only, setdefault() when you want to initialize missing keys"},join_vs_concatenation:{similar:["join","+","f-string"],differences:"**join()**: Most efficient for multiple strings\n**+ operator**: Simple but slow for many strings\n**f-string**: Best for formatting with variables\n\nExample:\n# join - O(n)\n''.join(['a', 'b', 'c'])  # 'abc'\n\n# + operator - O(n²) for many strings\ns = 'a' + 'b' + 'c'  # 'abc'\n\n# f-string - best for formatting\nf'{name}: {value}'",whenToUse:"Use join() for lists of strings, f-strings for formatting, avoid + in loops"}}},2441:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.MethodResolver=t.METHOD_TO_TYPE_MAP=void 0;const i=a(4417);t.METHOD_TO_TYPE_MAP={strip:{types:["str"],anchor:"str.strip",title:"str.strip() — Remove Whitespace"},split:{types:["str"],anchor:"str.split",title:"str.split() — Split String"},join:{types:["str"],anchor:"str.join",title:"str.join() — Join Iterable"},replace:{types:["str"],anchor:"str.replace",title:"str.replace() — Replace Substring"},find:{types:["str"],anchor:"str.find",title:"str.find() — Find Substring"},startswith:{types:["str"],anchor:"str.startswith",title:"str.startswith() — Check Prefix"},endswith:{types:["str"],anchor:"str.endswith",title:"str.endswith() — Check Suffix"},upper:{types:["str"],anchor:"str.upper",title:"str.upper() — Uppercase"},lower:{types:["str"],anchor:"str.lower",title:"str.lower() — Lowercase"},capitalize:{types:["str"],anchor:"str.capitalize",title:"str.capitalize() — First Letter"},title:{types:["str"],anchor:"str.title",title:"str.title() — Title Case"},isdigit:{types:["str"],anchor:"str.isdigit",title:"str.isdigit() — Check Digits"},isalpha:{types:["str"],anchor:"str.isalpha",title:"str.isalpha() — Check Letters"},isalnum:{types:["str"],anchor:"str.isalnum",title:"str.isalnum() — Check Alphanumeric"},count:{types:["str","list"],anchor:"str.count",title:"count() — Count Occurrences"},format:{types:["str"],anchor:"str.format",title:"str.format() — Format String"},append:{types:["list"],anchor:"mutable-sequence-types",title:"list.append() — Add Item"},extend:{types:["list"],anchor:"mutable-sequence-types",title:"list.extend() — Extend List"},insert:{types:["list"],anchor:"mutable-sequence-types",title:"list.insert() — Insert Item"},remove:{types:["list"],anchor:"mutable-sequence-types",title:"list.remove() — Remove Item"},pop:{types:["list","dict"],anchor:"mutable-sequence-types",title:"pop() — Remove & Return"},clear:{types:["list","dict","set"],anchor:"mutable-sequence-types",title:"clear() — Remove All Items"},copy:{types:["list","dict","set"],anchor:"mutable-sequence-types",title:"copy() — Shallow Copy"},reverse:{types:["list"],anchor:"mutable-sequence-types",title:"list.reverse() — Reverse In Place"},sort:{types:["list"],anchor:"mutable-sequence-types",title:"list.sort() — Sort In Place"},index:{types:["list","tuple","str"],anchor:"common-sequence-operations",title:"index() — Find Index"},keys:{types:["dict"],anchor:"dict.keys",title:"dict.keys() — Dictionary Keys"},values:{types:["dict"],anchor:"dict.values",title:"dict.values() — Dictionary Values"},items:{types:["dict"],anchor:"dict.items",title:"dict.items() — Dictionary Items"},get:{types:["dict"],anchor:"dict.get",title:"dict.get() — Get Value"},setdefault:{types:["dict"],anchor:"dict.setdefault",title:"dict.setdefault() — Get or Set Default"},update:{types:["dict"],anchor:"dict.update",title:"dict.update() — Update Dictionary"},popitem:{types:["dict"],anchor:"dict.popitem",title:"dict.popitem() — Remove & Return Item"},fromkeys:{types:["dict"],anchor:"dict.fromkeys",title:"dict.fromkeys() — Create from Keys"},add:{types:["set"],anchor:"set.add",title:"set.add() — Add Element"},discard:{types:["set"],anchor:"set.discard",title:"set.discard() — Remove If Present"},union:{types:["set"],anchor:"set.union",title:"set.union() — Union of Sets"},intersection:{types:["set"],anchor:"set.intersection",title:"set.intersection() — Intersection of Sets"},difference:{types:["set"],anchor:"set.difference",title:"set.difference() — Set Difference"},symmetric_difference:{types:["set"],anchor:"set.symmetric_difference",title:"set.symmetric_difference() — Symmetric Difference"},issubset:{types:["set"],anchor:"set.issubset",title:"set.issubset() — Test Subset"},issuperset:{types:["set"],anchor:"set.issuperset",title:"set.issuperset() — Test Superset"},read:{types:["file"],anchor:"io-methods",title:"read() — Read Contents"},readline:{types:["file"],anchor:"io-methods",title:"readline() — Read Single Line"},readlines:{types:["file"],anchor:"io-methods",title:"readlines() — Read All Lines"},write:{types:["file"],anchor:"io-methods",title:"write() — Write String"},writelines:{types:["file"],anchor:"io-methods",title:"writelines() — Write Lines"},close:{types:["file"],anchor:"io-methods",title:"close() — Close File"}},t.MethodResolver=class{isKnownMethod(e){return t.METHOD_TO_TYPE_MAP.hasOwnProperty(e)}resolveMethodInfo(e,a,i,p){if(!this.isKnownMethod(i))return;const r=t.METHOD_TO_TYPE_MAP[i];if(p)return r.types.includes(p),{symbol:`${p}.${i}`,type:"method",context:p,documentation:r.title};if(1===r.types.length){const e=r.types[0];return{symbol:`${e}.${i}`,type:"method",context:e,documentation:r.title}}const n=this.scoreAndSelectBestType(e,a,i,r.types);return{symbol:`${n}.${i}`,type:"method",context:n,documentation:r.title}}scoreAndSelectBestType(e,t,a,p){const r=new Map;for(const e of p)r.set(e,0);const n=e.lineAt(t.line).text,s=Math.max(0,t.line-5),d=Math.min(e.lineCount-1,t.line+5),o=[];for(let t=s;t<=d;t++)o.push(e.lineAt(t).text);const l=o.join("\n");for(const e of p){let t=0;new RegExp(`:\\s*${e}\\b`,"i").test(l)&&(t+=10),new RegExp(`=\\s*${e}\\s*\\(`,"i").test(l)&&(t+=8),"list"===e&&/\[.*\]/.test(n)&&(t+=5),"dict"===e&&/\{.*:.*\}/.test(n)&&(t+=5),"set"===e&&/\{.*\}/.test(n)&&!/\{.*:.*\}/.test(n)&&(t+=5),"str"===e&&/['"].*['"]/.test(n)&&(t+=3),"list"===e&&/\.(append|extend|insert)\s*\(/.test(l)&&(t+=7),"dict"===e&&/\.(keys|values|items|get)\s*\(/.test(l)&&(t+=7),"set"===e&&/\.(add|discard|union|intersection)\s*\(/.test(l)&&(t+=7),"str"===e&&/\.(strip|split|replace|format)\s*\(/.test(l)&&(t+=7),"pop"===a&&("list"===e&&(t+=2),"dict"===e&&(t+=1)),"clear"===a&&("list"===e&&(t+=2),"dict"===e&&(t+=1),"set"===e&&(t+=1)),"copy"===a&&("list"===e&&(t+=2),"dict"===e&&(t+=1),"set"===e&&(t+=1)),"count"===a&&("str"===e&&(t+=3),"list"===e&&(t+=1)),"index"===a&&("list"===e&&(t+=3),"tuple"===e&&(t+=2),"str"===e&&(t+=1)),r.set(e,t)}let m=p[0],c=r.get(m)||0;for(const[e,t]of r.entries())t>c&&(c=t,m=e);return i.Logger.getInstance().debug(`Scored types for "${a}": ${Array.from(r.entries()).map(([e,t])=>`${e}=${t}`).join(", ")}`),i.Logger.getInstance().debug(`Selected best type: ${m} (score: ${c})`),m}}},2472:e=>{e.exports=JSON.parse('[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]')},3029:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ErrorNotifier=void 0;const i=a(1398),p=a(4417);class r{static getLogger(){return p.Logger.getInstance()}static async showError(e,...t){if(e.includes("Canceled")||"Canceled"===e)return void this.getLogger().debug(`Ignoring cancellation error: ${e}`);const a=this.formatMessage(e);if(this.getLogger().error(e),!this.shouldThrottle(a))return this.recordNotification(a),await i.window.showErrorMessage(a,...t);this.getLogger().debug(`Throttling error notification: ${e}`)}static async showWarning(e,...t){if(e.includes("Canceled")||"Canceled"===e)return void this.getLogger().debug(`Ignoring cancellation warning: ${e}`);const a=this.formatMessage(e);if(this.getLogger().warn(e),!this.shouldThrottle(a))return this.recordNotification(a),await i.window.showWarningMessage(a,...t);this.getLogger().debug(`Throttling warning notification: ${e}`)}static async showInfo(e,...t){const a=this.formatMessage(e);return this.getLogger().info(e),await i.window.showInformationMessage(a,...t)}static async showErrorWithSettings(e,t){if("Open Settings"===await this.showError(e,"Open Settings")){const e=t||"pythonHover";i.commands.executeCommand("workbench.action.openSettings",e)}}static async showWarningWithRetry(e,t,a){const p=await this.showWarning(e,"Retry","Open Settings");if("Retry"===p&&t)t();else if("Open Settings"===p){const e=a||"pythonHover";i.commands.executeCommand("workbench.action.openSettings",e)}}static async showNetworkError(e,t){const a=`Failed to ${e}. Please check your internet connection.`;t&&this.getLogger().error(`Network error during ${e}`,t),await this.showError(a)}static async showConfigError(e,t,a){const i=`Invalid ${e} configuration: ${t}`;await this.showErrorWithSettings(i,a)}static formatMessage(e){return e.startsWith(this.MESSAGE_PREFIX)?e:`${this.MESSAGE_PREFIX}: ${e}`}static shouldThrottle(e){const t=this.lastNotificationTime.get(e);return!!t&&Date.now()-t<this.MIN_NOTIFICATION_INTERVAL}static recordNotification(e){this.lastNotificationTime.set(e,Date.now())}static clearThrottleHistory(){this.lastNotificationTime.clear()}static setMinNotificationInterval(e){}}t.ErrorNotifier=r,r.MESSAGE_PREFIX="Python Hover",r.lastNotificationTime=new Map,r.MIN_NOTIFICATION_INTERVAL=5e3},3211:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigurationManager=void 0;const i=a(1398);t.ConfigurationManager=class{constructor(){this.config=this.loadConfig()}loadConfig(){const e=i.workspace.getConfiguration("pythonHover");return{docsVersion:e.get("docsVersion","auto"),maxSnippetLines:e.get("maxSnippetLines",20),cacheTTL:{inventoryDays:e.get("cacheTTL.inventoryDays",7),snippetHours:e.get("cacheTTL.snippetHours",48)},enableKeywordDocs:e.get("enableKeywordDocs",!0),telemetry:e.get("telemetry",!1),customLibraries:e.get("customLibraries",[]),experimental:{autoDetectLibraries:e.get("experimental.autoDetectLibraries",!1)},ui:{showParameterTables:e.get("ui.showParameterTables",!0),showSignatures:e.get("ui.showSignatures",!0),showDeprecationWarnings:e.get("ui.showDeprecationWarnings",!0),showReturnTypes:e.get("ui.showReturnTypes",!0),showQuickActions:e.get("ui.showQuickActions",!0),showSeeAlso:e.get("ui.showSeeAlso",!0),showPerformanceHints:e.get("ui.showPerformanceHints",!1),showKeyboardHints:e.get("ui.showKeyboardHints",!0),maxContentLength:e.get("ui.maxContentLength",800)}}}getConfig(){return this.config}refresh(){this.config=this.loadConfig()}get docsVersion(){return this.config.docsVersion}get maxSnippetLines(){return this.config.maxSnippetLines}get inventoryCacheDays(){return this.config.cacheTTL.inventoryDays}get snippetCacheHours(){return this.config.cacheTTL.snippetHours}get enableKeywordDocs(){return this.config.enableKeywordDocs}get telemetryEnabled(){return this.config.telemetry}get customLibraries(){return this.config.customLibraries}get autoDetectLibrariesEnabled(){return this.config.experimental.autoDetectLibraries}getValue(e,t){return i.workspace.getConfiguration("pythonHover").get(e,t)}}},3269:e=>{e.exports=(e,t,a,i)=>{let p=65535&e,r=e>>>16&65535,n=0;for(;0!==a;){n=a>2e3?2e3:a,a-=n;do{p=p+t[i++]|0,r=r+p|0}while(--n);p%=65521,r%=65521}return p|r<<16}},3303:(e,t,a)=>{const i=a(8411),p=a(9805),r=a(1996),n=a(4674),s=a(4442),d=Object.prototype.toString,{Z_NO_FLUSH:o,Z_SYNC_FLUSH:l,Z_FULL_FLUSH:m,Z_FINISH:c,Z_OK:h,Z_STREAM_END:u,Z_DEFAULT_COMPRESSION:f,Z_DEFAULT_STRATEGY:g,Z_DEFLATED:v}=a(9681);function y(e){this.options=p.assign({level:f,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:g},e||{});let t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;let a=i.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(a!==h)throw new Error(n[a]);if(t.header&&i.deflateSetHeader(this.strm,t.header),t.dictionary){let e;if(e="string"==typeof t.dictionary?r.string2buf(t.dictionary):"[object ArrayBuffer]"===d.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,a=i.deflateSetDictionary(this.strm,e),a!==h)throw new Error(n[a]);this._dict_set=!0}}function _(e,t){const a=new y(t);if(a.push(e,!0),a.err)throw a.msg||n[a.err];return a.result}y.prototype.push=function(e,t){const a=this.strm,p=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=t===~~t?t:!0===t?c:o,"string"==typeof e?a.input=r.string2buf(e):"[object ArrayBuffer]"===d.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;;)if(0===a.avail_out&&(a.output=new Uint8Array(p),a.next_out=0,a.avail_out=p),(s===l||s===m)&&a.avail_out<=6)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else{if(n=i.deflate(a,s),n===u)return a.next_out>0&&this.onData(a.output.subarray(0,a.next_out)),n=i.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===h;if(0!==a.avail_out){if(s>0&&a.next_out>0)this.onData(a.output.subarray(0,a.next_out)),a.avail_out=0;else if(0===a.avail_in)break}else this.onData(a.output)}return!0},y.prototype.onData=function(e){this.chunks.push(e)},y.prototype.onEnd=function(e){e===h&&(this.result=p.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},e.exports.Deflate=y,e.exports.deflate=_,e.exports.deflateRaw=function(e,t){return(t=t||{}).raw=!0,_(e,t)},e.exports.gzip=function(e,t){return(t=t||{}).gzip=!0,_(e,t)},e.exports.constants=a(9681)},3417:(e,t,a)=>{t.URL=a(6648).interface,a(5484).serializeURL,a(5484).serializeURLOrigin,a(5484).basicURLParse,a(5484).setTheUsername,a(5484).setThePassword,a(5484).serializeHost,a(5484).serializeInteger,a(5484).parseURL},3665:e=>{function t(e){let t=e.length;for(;--t>=0;)e[t]=0}const a=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),i=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),p=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),r=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),n=new Array(576);t(n);const s=new Array(60);t(s);const d=new Array(512);t(d);const o=new Array(256);t(o);const l=new Array(29);t(l);const m=new Array(30);function c(e,t,a,i,p){this.static_tree=e,this.extra_bits=t,this.extra_base=a,this.elems=i,this.max_length=p,this.has_stree=e&&e.length}let h,u,f;function g(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}t(m);const v=e=>e<256?d[e]:d[256+(e>>>7)],y=(e,t)=>{e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255},_=(e,t,a)=>{e.bi_valid>16-a?(e.bi_buf|=t<<e.bi_valid&65535,y(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=a-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=a)},w=(e,t,a)=>{_(e,a[2*t],a[2*t+1])},b=(e,t)=>{let a=0;do{a|=1&e,e>>>=1,a<<=1}while(--t>0);return a>>>1},x=(e,t,a)=>{const i=new Array(16);let p,r,n=0;for(p=1;p<=15;p++)n=n+a[p-1]<<1,i[p]=n;for(r=0;r<=t;r++){let t=e[2*r+1];0!==t&&(e[2*r]=b(i[t]++,t))}},S=e=>{let t;for(t=0;t<286;t++)e.dyn_ltree[2*t]=0;for(t=0;t<30;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.sym_next=e.matches=0},T=e=>{e.bi_valid>8?y(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0},D=(e,t,a,i)=>{const p=2*t,r=2*a;return e[p]<e[r]||e[p]===e[r]&&i[t]<=i[a]},E=(e,t,a)=>{const i=e.heap[a];let p=a<<1;for(;p<=e.heap_len&&(p<e.heap_len&&D(t,e.heap[p+1],e.heap[p],e.depth)&&p++,!D(t,i,e.heap[p],e.depth));)e.heap[a]=e.heap[p],a=p,p<<=1;e.heap[a]=i},k=(e,t,p)=>{let r,n,s,d,c=0;if(0!==e.sym_next)do{r=255&e.pending_buf[e.sym_buf+c++],r+=(255&e.pending_buf[e.sym_buf+c++])<<8,n=e.pending_buf[e.sym_buf+c++],0===r?w(e,n,t):(s=o[n],w(e,s+256+1,t),d=a[s],0!==d&&(n-=l[s],_(e,n,d)),r--,s=v(r),w(e,s,p),d=i[s],0!==d&&(r-=m[s],_(e,r,d)))}while(c<e.sym_next);w(e,256,t)},C=(e,t)=>{const a=t.dyn_tree,i=t.stat_desc.static_tree,p=t.stat_desc.has_stree,r=t.stat_desc.elems;let n,s,d,o=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<r;n++)0!==a[2*n]?(e.heap[++e.heap_len]=o=n,e.depth[n]=0):a[2*n+1]=0;for(;e.heap_len<2;)d=e.heap[++e.heap_len]=o<2?++o:0,a[2*d]=1,e.depth[d]=0,e.opt_len--,p&&(e.static_len-=i[2*d+1]);for(t.max_code=o,n=e.heap_len>>1;n>=1;n--)E(e,a,n);d=r;do{n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],E(e,a,1),s=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=s,a[2*d]=a[2*n]+a[2*s],e.depth[d]=(e.depth[n]>=e.depth[s]?e.depth[n]:e.depth[s])+1,a[2*n+1]=a[2*s+1]=d,e.heap[1]=d++,E(e,a,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],((e,t)=>{const a=t.dyn_tree,i=t.max_code,p=t.stat_desc.static_tree,r=t.stat_desc.has_stree,n=t.stat_desc.extra_bits,s=t.stat_desc.extra_base,d=t.stat_desc.max_length;let o,l,m,c,h,u,f=0;for(c=0;c<=15;c++)e.bl_count[c]=0;for(a[2*e.heap[e.heap_max]+1]=0,o=e.heap_max+1;o<573;o++)l=e.heap[o],c=a[2*a[2*l+1]+1]+1,c>d&&(c=d,f++),a[2*l+1]=c,l>i||(e.bl_count[c]++,h=0,l>=s&&(h=n[l-s]),u=a[2*l],e.opt_len+=u*(c+h),r&&(e.static_len+=u*(p[2*l+1]+h)));if(0!==f){do{for(c=d-1;0===e.bl_count[c];)c--;e.bl_count[c]--,e.bl_count[c+1]+=2,e.bl_count[d]--,f-=2}while(f>0);for(c=d;0!==c;c--)for(l=e.bl_count[c];0!==l;)m=e.heap[--o],m>i||(a[2*m+1]!==c&&(e.opt_len+=(c-a[2*m+1])*a[2*m],a[2*m+1]=c),l--)}})(e,t),x(a,o,e.bl_count)},N=(e,t,a)=>{let i,p,r=-1,n=t[1],s=0,d=7,o=4;for(0===n&&(d=138,o=3),t[2*(a+1)+1]=65535,i=0;i<=a;i++)p=n,n=t[2*(i+1)+1],++s<d&&p===n||(s<o?e.bl_tree[2*p]+=s:0!==p?(p!==r&&e.bl_tree[2*p]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,s=0,r=p,0===n?(d=138,o=3):p===n?(d=6,o=3):(d=7,o=4))},A=(e,t,a)=>{let i,p,r=-1,n=t[1],s=0,d=7,o=4;for(0===n&&(d=138,o=3),i=0;i<=a;i++)if(p=n,n=t[2*(i+1)+1],!(++s<d&&p===n)){if(s<o)do{w(e,p,e.bl_tree)}while(0!==--s);else 0!==p?(p!==r&&(w(e,p,e.bl_tree),s--),w(e,16,e.bl_tree),_(e,s-3,2)):s<=10?(w(e,17,e.bl_tree),_(e,s-3,3)):(w(e,18,e.bl_tree),_(e,s-11,7));s=0,r=p,0===n?(d=138,o=3):p===n?(d=6,o=3):(d=7,o=4)}};let $=!1;const R=(e,t,a,i)=>{_(e,0+(i?1:0),3),T(e),y(e,a),y(e,~a),a&&e.pending_buf.set(e.window.subarray(t,t+a),e.pending),e.pending+=a};e.exports._tr_init=e=>{$||((()=>{let e,t,r,g,v;const y=new Array(16);for(r=0,g=0;g<28;g++)for(l[g]=r,e=0;e<1<<a[g];e++)o[r++]=g;for(o[r-1]=g,v=0,g=0;g<16;g++)for(m[g]=v,e=0;e<1<<i[g];e++)d[v++]=g;for(v>>=7;g<30;g++)for(m[g]=v<<7,e=0;e<1<<i[g]-7;e++)d[256+v++]=g;for(t=0;t<=15;t++)y[t]=0;for(e=0;e<=143;)n[2*e+1]=8,e++,y[8]++;for(;e<=255;)n[2*e+1]=9,e++,y[9]++;for(;e<=279;)n[2*e+1]=7,e++,y[7]++;for(;e<=287;)n[2*e+1]=8,e++,y[8]++;for(x(n,287,y),e=0;e<30;e++)s[2*e+1]=5,s[2*e]=b(e,5);h=new c(n,a,257,286,15),u=new c(s,i,0,30,15),f=new c(new Array(0),p,0,19,7)})(),$=!0),e.l_desc=new g(e.dyn_ltree,h),e.d_desc=new g(e.dyn_dtree,u),e.bl_desc=new g(e.bl_tree,f),e.bi_buf=0,e.bi_valid=0,S(e)},e.exports._tr_stored_block=R,e.exports._tr_flush_block=(e,t,a,i)=>{let p,d,o=0;e.level>0?(2===e.strm.data_type&&(e.strm.data_type=(e=>{let t,a=4093624447;for(t=0;t<=31;t++,a>>>=1)if(1&a&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<256;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0})(e)),C(e,e.l_desc),C(e,e.d_desc),o=(e=>{let t;for(N(e,e.dyn_ltree,e.l_desc.max_code),N(e,e.dyn_dtree,e.d_desc.max_code),C(e,e.bl_desc),t=18;t>=3&&0===e.bl_tree[2*r[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t})(e),p=e.opt_len+3+7>>>3,d=e.static_len+3+7>>>3,d<=p&&(p=d)):p=d=a+5,a+4<=p&&-1!==t?R(e,t,a,i):4===e.strategy||d===p?(_(e,2+(i?1:0),3),k(e,n,s)):(_(e,4+(i?1:0),3),((e,t,a,i)=>{let p;for(_(e,t-257,5),_(e,a-1,5),_(e,i-4,4),p=0;p<i;p++)_(e,e.bl_tree[2*r[p]+1],3);A(e,e.dyn_ltree,t-1),A(e,e.dyn_dtree,a-1)})(e,e.l_desc.max_code+1,e.d_desc.max_code+1,o+1),k(e,e.dyn_ltree,e.dyn_dtree)),S(e),i&&T(e)},e.exports._tr_tally=(e,t,a)=>(e.pending_buf[e.sym_buf+e.sym_next++]=t,e.pending_buf[e.sym_buf+e.sym_next++]=t>>8,e.pending_buf[e.sym_buf+e.sym_next++]=a,0===t?e.dyn_ltree[2*a]++:(e.matches++,t--,e.dyn_ltree[2*(o[a]+256+1)]++,e.dyn_dtree[2*v(t)]++),e.sym_next===e.sym_end),e.exports._tr_align=e=>{_(e,2,3),w(e,256,n),(e=>{16===e.bi_valid?(y(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)})(e)}},3681:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InventoryManager=void 0;const i=a(7540),p=i.default||i,r=a(1668),n=a(1398),s=a(8629),d=a(8087),o=a(3029),l=a(5334);class m{constructor(e,t,a,i){this.cacheManager=e,this.logger=t,this.configManager=a,this.packageDetector=i,this.packageDetector&&(this.libraryDiscovery=new l.LibraryDiscovery(this.packageDetector))}getAllLibraryConfigs(){const e=this.configManager?this.configManager.customLibraries:[],t=[...m.THIRD_PARTY_LIBRARIES],a=[];for(const i of e){const e=this.validateCustomLibrary(i);if(e.length>0){const t=`Invalid custom library config for "${i.name||"unknown"}": ${e.join(", ")}`;this.logger.error(t),a.push(t),void 0!==n&&n.window&&o.ErrorNotifier.showConfigError(`custom library "${i.name||"unknown"}"`,e[0],"pythonHover.customLibraries");continue}const p=t.findIndex(e=>e.name===i.name);-1!==p?(this.logger.info(`Overriding built-in config for library: ${i.name}`),t[p]=i):(this.logger.info(`Adding custom library: ${i.name}`),t.push(i))}return a.length>0&&this.logger.warn(`${a.length} custom library config(s) had validation errors and were skipped`),t}validateCustomLibrary(e){const t=[],a=s.URLValidator.validateName(e.name);if(a.isValid||t.push(...a.errors),a.warnings.forEach(e=>{this.logger.warn(e)}),e.inventoryUrl&&"string"==typeof e.inventoryUrl&&""!==e.inventoryUrl.trim()){const a=s.URLValidator.validateInventoryURL(e.inventoryUrl);a.isValid||t.push(...a.errors),a.warnings.forEach(t=>{this.logger.warn(`inventoryUrl "${e.inventoryUrl}" - ${t}`)})}else t.push('Missing or invalid "inventoryUrl" field');if(e.baseUrl&&"string"==typeof e.baseUrl&&""!==e.baseUrl.trim()){const a=s.URLValidator.validateBaseURL(e.baseUrl);a.isValid||t.push(...a.errors),a.warnings.forEach(t=>{this.logger.warn(`baseUrl "${e.baseUrl}" - ${t}`)})}else t.push('Missing or invalid "baseUrl" field');return t}async getInventory(e){const t=`inventory-${e}-v8`,a=d.CacheManager.hoursToMs(24);this.logger.debug(`Getting inventory for version ${e}, cache key: ${t}`);try{const i=await this.cacheManager.get(t);if(this.logger.debug("Cache lookup result: "+(i?"found":"not found")),i){const p=await this.cacheManager.isExpired(t,a);if(this.logger.debug("Cache expired check: "+(p?"expired":"not expired")),this.logger.debug(`Cache timestamp: ${new Date(i.timestamp)}`),this.logger.debug(`Max age: ${a}ms (${a/36e5}h)`),!p)return this.logger.debug(`Using cached inventory for version ${e}`),new Map(Object.entries(i.data))}this.logger.debug(`Fetching fresh inventory for version ${e}`);const p=await this.fetchInventory(e),r={};return p.forEach((e,t)=>{r[t]=e}),await this.cacheManager.set(t,r),p}catch(a){this.logger.error(`Failed to get inventory for ${e}`,a);const i=await this.cacheManager.get(t);if(i)return this.logger.debug("Using stale cached inventory due to fetch error"),new Map(Object.entries(i.data));throw a}}async invalidateCache(){this.logger.info("Invalidating inventory cache by incrementing version"),this.logger.info("Inventory cache will use new version: v8")}async getThirdPartyInventory(e,t){if(this.packageDetector&&t){const a=await this.getVersionedLibraryConfig(e,t);if(a)return this.logger.debug(`Using ${a.isExactMatch?"exact":"fallback"} version ${a.version} for ${e}`),await this.fetchVersionedInventory(a)}const a=this.getAllLibraryConfigs().find(t=>t.name===e);if(!a){if(this.logger.debug(`❌ No hardcoded config for "${e}", trying auto-discovery...`),this.libraryDiscovery){this.logger.debug(`🔎 Starting auto-discovery for "${e}"...`);try{const a=await this.libraryDiscovery.discoverLibrary(e,t);if(a){this.logger.debug(`✅ Auto-discovered ${e}: ${a.inventoryUrl}`);const t={name:a.name,inventoryUrl:a.inventoryUrl,baseUrl:a.docBaseUrl,version:a.version};return await this.fetchThirdPartyInventory(t)}this.logger.debug(`❌ Auto-discovery failed for "${e}"`)}catch(t){this.logger.warn(`⚠️ Auto-discovery error for "${e}": ${t instanceof Error?t.message:String(t)}`)}}else this.logger.warn("⚠️ LibraryDiscovery not initialized!");return this.logger.debug(`No inventory configuration or auto-discovery for library: ${e}`),null}const i=`inventory-${e}-v1`,p=d.CacheManager.hoursToMs(168);this.logger.debug(`Getting third-party inventory for ${e}`);try{const t=await this.cacheManager.get(i);if(t&&!await this.cacheManager.isExpired(i,p))return this.logger.debug(`Using cached inventory for ${e}`),new Map(Object.entries(t.data));this.logger.debug(`Fetching fresh inventory for ${e}`);const r=await this.fetchThirdPartyInventory(a),n={};return r.forEach((e,t)=>{n[t]=e}),await this.cacheManager.set(i,n),r}catch(t){this.logger.error(`Failed to get inventory for ${e}:`,t);const a=await this.cacheManager.get(i);return a?(this.logger.debug("Using stale cached inventory due to fetch error"),new Map(Object.entries(a.data))):null}}async fetchThirdPartyInventory(e){const t=new AbortController,a=setTimeout(()=>t.abort(),1e4);try{const i=await p(e.inventoryUrl,{signal:t.signal,headers:{"User-Agent":"VSCode-Python-Hover-Extension"}});if(clearTimeout(a),!i.ok)throw new Error(`Failed to fetch inventory: ${i.status} ${i.statusText}`);const r=await i.arrayBuffer();return this.parseThirdPartyInventory(new Uint8Array(r),e)}catch(t){if(clearTimeout(a),"AbortError"===t.name)throw new Error(`Inventory fetch timed out after 10 seconds: ${e.inventoryUrl}`);throw t}}async fetchInventory(e){const t=`${m.DOCS_BASE_URL}/${e}/objects.inv`,a=new AbortController,i=setTimeout(()=>a.abort(),1e4);try{const r=await p(t,{signal:a.signal,headers:{"User-Agent":"VSCode-Python-Hover-Extension"}});if(clearTimeout(i),!r.ok)throw new Error(`Failed to fetch inventory: ${r.status} ${r.statusText}`);const n=await r.arrayBuffer();return this.parseInventory(new Uint8Array(n),e)}catch(e){if(clearTimeout(i),"AbortError"===e.name)throw new Error(`Inventory fetch timed out after 10 seconds: ${t}`);throw e}}parseInventory(e,t){const a=new Map;try{let i=0,p=0;for(;p<4&&i<e.length;)10===e[i]&&p++,i++;const n=e.slice(i),s=r.inflate(n,{to:"string"}).split("\n");for(const e of s){if(""===e.trim())continue;const i=this.parseInventoryLine(e,t);if(i){"len"!==i.name&&"class"!==i.name&&"min"!==i.name||this.logger.debug(`Storing entry: ${i.name} -> ${i.uri}#${i.anchor}`);const e=`${i.name}:${i.domain}:${i.role}`;a.set(e,i);const t=a.get(i.name);t&&!this.shouldReplaceEntry(t,i)||a.set(i.name,i)}}}catch(e){throw new Error(`Failed to parse inventory: ${e}`)}return a}parseThirdPartyInventory(e,t){const a=new Map;try{let i=0,p=0;for(;p<4&&i<e.length;)10===e[i]&&p++,i++;const n=e.slice(i),s=r.inflate(n,{to:"string"}).split("\n");let d=0;for(const e of s){if(""===e.trim())continue;const i=this.parseThirdPartyInventoryLine(e,t);if(i){a.set(i.name,i);const e=`${i.name}:${i.domain}:${i.role}`;a.set(e,i),d++}}this.logger.debug(`Loaded ${d} entries from ${t.name} inventory`)}catch(e){throw new Error(`Failed to parse third-party inventory for ${t.name}: ${e}`)}return a}parseThirdPartyInventoryLine(e,t){const a=e.split(/\s+/);if(a.length<5)return null;const i=a[0],[p,r]=a[1].split(":"),n=parseInt(a[2],10);let s=a[3],d=a[4];if(s.includes("#")){const e=s.split("#");s=e[0],e.length>1&&e[1]&&(d=e[1]),"-"===a[4]&&e[1]&&(d=e[1])}return i&&p&&r&&!isNaN(n)?(d.includes("$")&&(d=d.replace(/\$/g,i)),s.startsWith("http")||(s=t.baseUrl+s),{name:i,domain:p,role:r,priority:n,uri:s,anchor:d}):null}shouldReplaceEntry(e,t){const a=["py:keyword","py:function","py:class","py:exception","std:label","std:term"],i=`${e.domain}:${e.role}`,p=`${t.domain}:${t.role}`,r=a.indexOf(i),n=a.indexOf(p);return-1!==n&&-1!==r?n<r:-1!==n}parseInventoryLine(e,t){const a=e.split(/\s+/);if(a.length<5)return null;const i=a[0],[p,r]=a[1].split(":"),n=parseInt(a[2],10);let s=a[3],d=a[4];if(s.includes("#")){const e=s.split("#");s=e[0],e.length>1&&e[1]&&(d=e[1]),"-"===a[4]&&e[1]&&(d=e[1])}if("for"!==i&&"class"!==i&&"len"!==i||(this.logger.debug(`Raw line: "${e}"`),this.logger.debug(`Parsed - name: "${i}", uri: "${s}", anchor: "${d}"`)),!i||!p||!r||isNaN(n))return null;if("for"!==i&&"class"!==i&&"len"!==i||this.logger.debug(`Processing anchor for ${i}: "${d}"`),d.includes("$")){"for"!==i&&"class"!==i&&"len"!==i||this.logger.debug("Anchor contains $, replacing...");let e=i;if(d.includes("term-$"))e=i,d=d.replace(/\$/g,e);else if("py"===p&&"class"===r)e=i,d=d.replace(/\$/g,e);else if("py"===p&&"function"===r)e=i,d=d.replace(/\$/g,e);else if("std"===p&&"label"===r)if(d.startsWith("$#")||d.startsWith("$")){if(d=d.replace("$",e),d.includes("#")&&d!==e){const e=d.split("#");d=e[0]}"for"!==i&&"class"!==i&&"len"!==i||this.logger.debug(`Special std:label processing: ${d}`)}else d=d.replace(/\$/g,e);else d=d.replace(/\$/g,e);"for"!==i&&"class"!==i&&"len"!==i||this.logger.debug(`Final processed anchor: "${d}"`)}const o=`${m.DOCS_BASE_URL}/${t}`;return{name:i,domain:p,role:r,priority:n,uri:s.startsWith("http")?s:`${o}/${s}`,anchor:"-"===d?"":d}}async resolveSymbol(e,t,a,i){if(this.logger.debug(`🔎 resolveSymbol: symbol="${e}", context="${a}", version="${t}"`),a){const t=a.split(".")[0];this.logger.debug(`📚 Checking third-party library: ${t} for symbol: ${e}`);const p=await this.getThirdPartyInventory(t,i);if(p){const a=e.includes(".")?e.split(".").pop():e,i=[e,`${t}.${a}`,`${t}.pyplot.${a}`,a];"matplotlib"===t&&i.push(`matplotlib.pyplot.${a}`);for(const e of i){const t=p.get(e);if(t)return this.logger.debug(`Found third-party entry: ${e} -> ${t.uri}#${t.anchor}`),t}for(const[e,t]of p)if(!e.includes(":")&&(t.name.endsWith(`.${a}`)||t.name===a))return this.logger.debug(`Found third-party entry via partial match: ${t.name} -> ${t.uri}#${t.anchor}`),t;this.logger.debug(`Symbol '${e}' not found in ${t} inventory, falling back to stdlib`)}}const p=await this.getInventory(t),r=[];for(const[t,a]of p)(t===e||t.includes(":")&&t.startsWith(`${e}:`))&&(r.push(a),this.logger.debug(`Found entry: ${a.name} (${a.domain}:${a.role})`));const n=p.get(`builtins.${e}`);n&&r.push(n);const s=["str","list","dict","set","tuple","int","float"];for(const t of s){const a=p.get(`${t}.${e}`);a&&r.push(a)}if(e.startsWith("__")&&e.endsWith("__")){this.logger.debug(`Looking for special method: ${e}`);const t=p.get(`object.${e}`);t&&(r.push(t),this.logger.debug(`Found ${e} on object`));const a=e.slice(2,-2),i=p.get(a);i&&(r.push(i),this.logger.debug(`Found base method: ${a}`));const n=[`datamodel.${e}`,`object.${e}`,`type.${e}`,e];for(const t of n){const a=p.get(t);a&&(r.push(a),this.logger.debug(`Found ${e} via ${t}`))}for(const[t,a]of p)t.endsWith(`.${e}`)&&!r.includes(a)&&(r.push(a),this.logger.debug(`Found ${e} on ${t.split(".")[0]}`))}const d=p.get(`exceptions.${e}`);if(d&&r.push(d),r.length>0){this.logger.debug(`Found ${r.length} candidates for "${e}": ${r.map(e=>`${e.name} (${e.domain}:${e.role}) -> ${e.uri}#${e.anchor}`).join(", ")}`);const t=this.selectBestCandidate(r,e);return this.logger.debug(`Selected: ${t.name} (${t.domain}:${t.role})`),t}return this.isPythonKeyword(e)?(this.logger.debug(`Creating fallback entry for keyword: ${e}`),this.createKeywordFallback(e,t)):e.startsWith("__")&&e.endsWith("__")?(this.logger.debug(`Creating fallback entry for special method: ${e}`),this.createSpecialMethodFallback(e,t)):null}createKeywordFallback(e,t){const a={class:{uri:"reference/compound_stmts.html",anchor:"class"},def:{uri:"reference/compound_stmts.html",anchor:"function"},if:{uri:"reference/compound_stmts.html",anchor:"if"},for:{uri:"reference/compound_stmts.html",anchor:"for"},while:{uri:"reference/compound_stmts.html",anchor:"while"},try:{uri:"reference/compound_stmts.html",anchor:"try"},with:{uri:"reference/compound_stmts.html",anchor:"with"},import:{uri:"reference/simple_stmts.html",anchor:"import"},from:{uri:"reference/simple_stmts.html",anchor:"from"},return:{uri:"reference/simple_stmts.html",anchor:"return"},yield:{uri:"reference/simple_stmts.html",anchor:"yield"},pass:{uri:"reference/simple_stmts.html",anchor:"pass"},break:{uri:"reference/simple_stmts.html",anchor:"break"},continue:{uri:"reference/simple_stmts.html",anchor:"continue"},lambda:{uri:"reference/expressions.html",anchor:"lambda"},and:{uri:"reference/expressions.html",anchor:"and"},or:{uri:"reference/expressions.html",anchor:"or"},not:{uri:"reference/expressions.html",anchor:"not"},in:{uri:"reference/expressions.html",anchor:"in"},is:{uri:"reference/expressions.html",anchor:"is"}}[e];return a?{name:e,domain:"py",role:"keyword",priority:1,uri:`${m.DOCS_BASE_URL}/${t}/${a.uri}`,anchor:a.anchor}:null}createSpecialMethodFallback(e,t){const a={__init__:{uri:"reference/datamodel.html",anchor:"__init__",description:"Object initialization"},__str__:{uri:"reference/datamodel.html",anchor:"__str__",description:"String representation"},__repr__:{uri:"reference/datamodel.html",anchor:"__repr__",description:"Official string representation"},__len__:{uri:"reference/datamodel.html",anchor:"__len__",description:"Length of object"},__getitem__:{uri:"reference/datamodel.html",anchor:"__getitem__",description:"Get item by key/index"},__setitem__:{uri:"reference/datamodel.html",anchor:"__setitem__",description:"Set item by key/index"},__delitem__:{uri:"reference/datamodel.html",anchor:"__delitem__",description:"Delete item by key/index"},__iter__:{uri:"reference/datamodel.html",anchor:"__iter__",description:"Return iterator"},__next__:{uri:"reference/datamodel.html",anchor:"__next__",description:"Return next item from iterator"},__contains__:{uri:"reference/datamodel.html",anchor:"__contains__",description:"Membership test operator"},__call__:{uri:"reference/datamodel.html",anchor:"__call__",description:"Make object callable"},__enter__:{uri:"reference/datamodel.html",anchor:"__enter__",description:"Context manager entry"},__exit__:{uri:"reference/datamodel.html",anchor:"__exit__",description:"Context manager exit"},__new__:{uri:"reference/datamodel.html",anchor:"__new__",description:"Object creation"},__del__:{uri:"reference/datamodel.html",anchor:"__del__",description:"Object deletion"},__eq__:{uri:"reference/datamodel.html",anchor:"__eq__",description:"Equality comparison"},__ne__:{uri:"reference/datamodel.html",anchor:"__ne__",description:"Inequality comparison"},__lt__:{uri:"reference/datamodel.html",anchor:"__lt__",description:"Less than comparison"},__le__:{uri:"reference/datamodel.html",anchor:"__le__",description:"Less than or equal comparison"},__gt__:{uri:"reference/datamodel.html",anchor:"__gt__",description:"Greater than comparison"},__ge__:{uri:"reference/datamodel.html",anchor:"__ge__",description:"Greater than or equal comparison"},__hash__:{uri:"reference/datamodel.html",anchor:"__hash__",description:"Hash value"},__bool__:{uri:"reference/datamodel.html",anchor:"__bool__",description:"Truth value testing"},__add__:{uri:"reference/datamodel.html",anchor:"__add__",description:"Addition operator"},__sub__:{uri:"reference/datamodel.html",anchor:"__sub__",description:"Subtraction operator"},__mul__:{uri:"reference/datamodel.html",anchor:"__mul__",description:"Multiplication operator"},__truediv__:{uri:"reference/datamodel.html",anchor:"__truediv__",description:"Division operator"},__floordiv__:{uri:"reference/datamodel.html",anchor:"__floordiv__",description:"Floor division operator"},__mod__:{uri:"reference/datamodel.html",anchor:"__mod__",description:"Modulo operator"},__pow__:{uri:"reference/datamodel.html",anchor:"__pow__",description:"Power operator"},__getattr__:{uri:"reference/datamodel.html",anchor:"__getattr__",description:"Attribute access"},__setattr__:{uri:"reference/datamodel.html",anchor:"__setattr__",description:"Attribute assignment"},__delattr__:{uri:"reference/datamodel.html",anchor:"__delattr__",description:"Attribute deletion"}}[e];return a?{name:e,domain:"py",role:"method",priority:1,uri:`${m.DOCS_BASE_URL}/${t}/${a.uri}`,anchor:a.anchor}:null}isPythonKeyword(e){return["False","None","True","and","as","assert","async","await","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield"].includes(e)}selectBestCandidate(e,t){const a=["py:keyword","py:stmt","py:function","py:method","py:class","py:exception","py:attribute","py:module","py:data","std:doc","std:label","std:term"];if(this.isPythonKeyword(t)){const t=e.filter(e=>"py"===e.domain),a=e.filter(e=>"std"===e.domain&&"label"===e.role);t.length>0?e=t:a.length>0&&(e=a)}return e.sort((e,t)=>{const i=`${e.domain}:${e.role}`,p=`${t.domain}:${t.role}`,r=a.indexOf(i),n=a.indexOf(p);return-1!==r&&-1!==n?r-n:-1!==r?-1:-1!==n?1:e.priority-t.priority}),e[0]}async searchSymbols(e,t,a=10){const i=await this.getInventory(t),p=[],r=e.toLowerCase();for(const[e,t]of i)if(e.toLowerCase().includes(r)&&(p.push(t),p.length>=a))break;return p.sort((e,t)=>{const a=e.name.toLowerCase()===r?0:1,i=t.name.toLowerCase()===r?0:1;return a!==i?a-i:e.name.length-t.name.length}),p}async getVersionedLibraryConfig(e,t){if(!this.packageDetector)return null;try{const a=await this.packageDetector.getPackageVersion(t,e);if(!a)return this.logger.debug(`Package ${e} not installed in environment`),null;this.logger.debug(`Found ${e} version ${a} in environment`);const i=this.buildVersionedConfig(e,a);if(i){if(await this.testInventoryUrl(i.inventoryUrl))return{name:i.name,inventoryUrl:i.inventoryUrl,baseUrl:i.baseUrl,version:a,isExactMatch:!0};const t=await this.findClosestVersion(e,a);if(t&&t.version)return{name:t.name,inventoryUrl:t.inventoryUrl,baseUrl:t.baseUrl,version:t.version,isExactMatch:!1}}}catch(t){this.logger.error(`Error getting versioned config for ${e}:`,t)}return null}buildVersionedConfig(e,t){const a={numpy:e=>({name:"numpy",inventoryUrl:`https://numpy.org/doc/${e}/objects.inv`,baseUrl:`https://numpy.org/doc/${e}/`,version:e}),pandas:e=>({name:"pandas",inventoryUrl:`https://pandas.pydata.org/pandas-docs/version/${e}/objects.inv`,baseUrl:`https://pandas.pydata.org/pandas-docs/version/${e}/`,version:e}),scipy:e=>({name:"scipy",inventoryUrl:`https://docs.scipy.org/doc/scipy-${e}/objects.inv`,baseUrl:`https://docs.scipy.org/doc/scipy-${e}/`,version:e}),matplotlib:e=>({name:"matplotlib",inventoryUrl:`https://matplotlib.org/${e}/objects.inv`,baseUrl:`https://matplotlib.org/${e}/`,version:e}),requests:e=>({name:"requests",inventoryUrl:`https://docs.python-requests.org/en/v${e}/objects.inv`,baseUrl:`https://docs.python-requests.org/en/v${e}/`,version:e}),sklearn:e=>({name:"sklearn",inventoryUrl:`https://scikit-learn.org/${e}/objects.inv`,baseUrl:`https://scikit-learn.org/${e}/`,version:e}),torch:e=>({name:"torch",inventoryUrl:`https://pytorch.org/docs/${e}/objects.inv`,baseUrl:`https://pytorch.org/docs/${e}/`,version:e})}[e];return a?a(t):null}async testInventoryUrl(e){try{const t=new AbortController,a=setTimeout(()=>t.abort(),5e3),i=await p(e,{method:"HEAD",signal:t.signal,headers:{"User-Agent":"VSCode-Python-Hover-Extension"}});return clearTimeout(a),i.ok}catch{return!1}}async findClosestVersion(e,t){const[a,i]=t.split(".").map(Number),p=[`${a}.${i}.0`,`${a}.${i}`,t.split(".").slice(0,2).join(".")];for(const t of p){const a=this.buildVersionedConfig(e,t);if(a&&await this.testInventoryUrl(a.inventoryUrl))return this.logger.debug(`Found fallback version ${t} for ${e}`),a}const r={numpy:{name:"numpy",inventoryUrl:"https://numpy.org/doc/stable/objects.inv",baseUrl:"https://numpy.org/doc/stable/",version:"stable"},pandas:{name:"pandas",inventoryUrl:"https://pandas.pydata.org/docs/objects.inv",baseUrl:"https://pandas.pydata.org/docs/",version:"latest"},scipy:{name:"scipy",inventoryUrl:"https://docs.scipy.org/doc/scipy/objects.inv",baseUrl:"https://docs.scipy.org/doc/scipy/",version:"stable"},torch:{name:"torch",inventoryUrl:"https://pytorch.org/docs/stable/objects.inv",baseUrl:"https://pytorch.org/docs/stable/",version:"stable"}}[e];return r&&await this.testInventoryUrl(r.inventoryUrl)?(this.logger.debug(`Using fallback '${r.version}' docs for ${e}`),r):null}async fetchVersionedInventory(e){const t=`inventory-${e.name}-${e.version}-v1`,a=d.CacheManager.hoursToMs(168);try{const i=await this.cacheManager.get(t);if(i&&!await this.cacheManager.isExpired(t,a))return this.logger.debug(`Using cached versioned inventory for ${e.name} ${e.version}`),new Map(Object.entries(i.data));this.logger.debug(`Fetching versioned inventory for ${e.name} ${e.version}`);const p=await this.fetchThirdPartyInventory(e),r={};return p.forEach((e,t)=>{r[t]=e}),await this.cacheManager.set(t,r),p}catch(a){this.logger.error(`Failed to fetch versioned inventory for ${e.name}:`,a);const i=await this.cacheManager.get(t);return i?(this.logger.debug("Using stale cached inventory"),new Map(Object.entries(i.data))):null}}getAllSupportedLibraries(){const e=m.THIRD_PARTY_LIBRARIES,t=(this.configManager?.customLibraries??[]).map(e=>({name:e.name,inventoryUrl:e.inventoryUrl,baseUrl:e.baseUrl})),a=[...e],i=new Set(e.map(e=>e.name));for(const e of t)i.has(e.name)||a.push(e);return a.sort((e,t)=>e.name.localeCompare(t.name))}getSupportedLibrariesCount(){const e=m.THIRD_PARTY_LIBRARIES.length,t=this.configManager?.customLibraries??[],a=new Set(m.THIRD_PARTY_LIBRARIES.map(e=>e.name)),i=t.filter(e=>!a.has(e.name)).length;return{builtIn:e,custom:t.length,total:e+i}}}t.InventoryManager=m,m.DOCS_BASE_URL="https://docs.python.org",m.THIRD_PARTY_LIBRARIES=[{name:"numpy",inventoryUrl:"https://numpy.org/doc/stable/objects.inv",baseUrl:"https://numpy.org/doc/stable/"},{name:"pandas",inventoryUrl:"https://pandas.pydata.org/docs/objects.inv",baseUrl:"https://pandas.pydata.org/docs/"},{name:"requests",inventoryUrl:"https://docs.python-requests.org/en/latest/objects.inv",baseUrl:"https://docs.python-requests.org/en/latest/"},{name:"scipy",inventoryUrl:"https://docs.scipy.org/doc/scipy/objects.inv",baseUrl:"https://docs.scipy.org/doc/scipy/"},{name:"matplotlib",inventoryUrl:"https://matplotlib.org/stable/objects.inv",baseUrl:"https://matplotlib.org/stable/"},{name:"flask",inventoryUrl:"https://flask.palletsprojects.com/en/stable/objects.inv",baseUrl:"https://flask.palletsprojects.com/en/stable/"},{name:"django",inventoryUrl:"https://docs.djangoproject.com/en/stable/_objects/",baseUrl:"https://docs.djangoproject.com/en/stable/"},{name:"sklearn",inventoryUrl:"https://scikit-learn.org/stable/objects.inv",baseUrl:"https://scikit-learn.org/stable/"},{name:"pytest",inventoryUrl:"https://docs.pytest.org/en/stable/objects.inv",baseUrl:"https://docs.pytest.org/en/stable/"},{name:"sphinx",inventoryUrl:"https://www.sphinx-doc.org/en/master/objects.inv",baseUrl:"https://www.sphinx-doc.org/en/master/"},{name:"fastapi",inventoryUrl:"https://fastapi.tiangolo.com/objects.inv",baseUrl:"https://fastapi.tiangolo.com/"},{name:"pydantic",inventoryUrl:"https://docs.pydantic.dev/latest/objects.inv",baseUrl:"https://docs.pydantic.dev/latest/"},{name:"sqlalchemy",inventoryUrl:"https://docs.sqlalchemy.org/en/20/objects.inv",baseUrl:"https://docs.sqlalchemy.org/en/20/"},{name:"beautifulsoup4",inventoryUrl:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/objects.inv",baseUrl:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/"},{name:"bs4",inventoryUrl:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/objects.inv",baseUrl:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/"},{name:"selenium",inventoryUrl:"https://www.selenium.dev/selenium/docs/api/py/objects.inv",baseUrl:"https://www.selenium.dev/selenium/docs/api/py/"},{name:"pillow",inventoryUrl:"https://pillow.readthedocs.io/en/stable/objects.inv",baseUrl:"https://pillow.readthedocs.io/en/stable/"},{name:"pil",inventoryUrl:"https://pillow.readthedocs.io/en/stable/objects.inv",baseUrl:"https://pillow.readthedocs.io/en/stable/"},{name:"torch",inventoryUrl:"https://pytorch.org/docs/stable/objects.inv",baseUrl:"https://pytorch.org/docs/stable/"},{name:"pytorch",inventoryUrl:"https://pytorch.org/docs/stable/objects.inv",baseUrl:"https://pytorch.org/docs/stable/"},{name:"aiohttp",inventoryUrl:"https://docs.aiohttp.org/en/stable/objects.inv",baseUrl:"https://docs.aiohttp.org/en/stable/"},{name:"click",inventoryUrl:"https://click.palletsprojects.com/en/stable/objects.inv",baseUrl:"https://click.palletsprojects.com/en/stable/"}]},4188:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SymbolResolver=void 0;const i=a(2145),p=a(1932),r=a(4417);class n{resolveSymbolAtPosition(e,t){const a=e.lineAt(t).text,s=e.getWordRangeAtPosition(t),d=s?e.getText(s):"",o=[],l=a.trim();if(!d)return[];if(!/^[A-Za-z_][A-Za-z0-9_]*$/.test(d))return[];if(/^[0-9]+(?:\.[0-9]+)?$/.test(d))return[];r.Logger.getInstance().debug(`Raw line: ${a}`),r.Logger.getInstance().debug(`Cursor position: ${t.character}`);const m=a.indexOf("#");if(-1!==m&&t.character>m)return r.Logger.getInstance().debug("Inside comment, skipping"),[];if(n.PYTHON_KEYWORDS.has(d))return r.Logger.getInstance().debug(`Detected Python keyword: ${d}`),o.push({symbol:d,type:"keyword"}),o;if(n.PYTHON_BUILTINS.has(d)&&(r.Logger.getInstance().debug(`Detected Python builtin: ${d}`),o.push({symbol:d,type:"builtin"})),n.PYTHON_EXCEPTIONS.has(d)&&(r.Logger.getInstance().debug(`Detected Python exception: ${d}`),o.push({symbol:d,type:"exception"})),0===o.length&&d.length<2)return[];const c=new Set(["the","a","an","and","or","but","if","else","for","to","of","in","on","with","by","as","is","it","this","that","these","those"]);if(0===o.length&&c.has(d.toLowerCase()))return[];const h=t.character,u=a,f=u.lastIndexOf("'",h-1),g=u.lastIndexOf('"',h-1),v=Math.max(f,g);if(-1!==v){const e=u[v],t=Math.max(0,v-2),a=-1!==u.slice(t,v).toLowerCase().indexOf("f"),i=u.indexOf(e,h);if(a&&-1!==i)return r.Logger.getInstance().debug(`Detected f-string at position: ${v}`),o.push({symbol:"f-string",type:"f-string"}),o}const y=u.lastIndexOf("'",t.character-1),_=u.lastIndexOf('"',t.character-1),w=Math.max(y,_);if(-1!==w){const e=u[w];if(-1!==u.indexOf(e,t.character))return[]}const b=Math.max(...i.OPERATORS.map(e=>e.length)),x=Math.max(0,t.character-b),S=Math.min(a.length,t.character+b),T=a.slice(x,S),D=[...i.OPERATORS].sort((e,t)=>t.length-e.length);for(const e of D){let a=T.indexOf(e);for(;-1!==a;){const i=x+a;if(t.character>=i&&t.character<i+e.length)return r.Logger.getInstance().debug(`Detected operator: ${e} at position: ${i}`),o.push({symbol:e,type:"operator"}),o;a=T.indexOf(e,a+1)}}l.startsWith("@")&&l.includes(d)&&o.push({symbol:d,type:"decorator"}),d in p.TYPING_CONSTRUCTS&&o.push({symbol:d,type:"typing",documentation:p.TYPING_CONSTRUCTS[d]}),d.startsWith("__")&&d.endsWith("__")&&(r.Logger.getInstance().debug(`Detected potential dunder method: ${d}`),o.push({symbol:d,type:"method"}));const E=s?this.findDottedAccess(a,s):null;E&&(r.Logger.getInstance().debug(`Detected dotted access: ${E.fullPath}`),o.push({symbol:E.fullPath,type:"method",context:E.baseType}));const k=this.findModuleContext(e,t,d);if(r.Logger.getInstance().debug(`findModuleContext for "${d}" returned: ${k||"null"}`),k&&(r.Logger.getInstance().debug(`Adding as module: ${k}`),o.push({symbol:k,type:"module"})),"std:label"===d&&o.push({symbol:"std:label",type:"class",documentation:"A class definition defines a class object (see section The standard type hierarchy):\n\nSource: docs.python.org/3.12/reference/compound_stmts.html"}),0===o.length){const e=/\b(import|from)\b/.test(l),t=/^[A-Z]/.test(d),i=s&&("("===a.charAt(s.end.character)||"."===a.charAt(s.end.character)),p=s&&"."===a.charAt(s.end.character);if(!(e||t&&i||p))return r.Logger.getInstance().debug(`Word "${d}" doesn't look like an imported symbol, skipping`),[];r.Logger.getInstance().debug(`Word "${d}" might be an imported symbol (import: ${e}, class+call: ${t&&i}, leftOfDot: ${p})`),o.push({symbol:d,type:"class"})}return o}findDottedAccess(e,t){let a=t.start.character-1;for(;a>=0&&" "===e[a];)a--;if(a>=0&&"."===e[a]){let i=a-1;for(;i>=0&&/[a-zA-Z0-9_]/.test(e[i]);)i--;i++;const p=e.substring(i,a),r=e.substring(t.start.character,t.end.character);if(p&&r)return{fullPath:`${p}.${r}`,baseType:this.inferBaseType(p)}}return null}inferBaseType(e){if(["os","sys","math","random","datetime","json","re","pathlib","typing","collections","itertools","functools","csv","sqlite3","threading","multiprocessing","subprocess","argparse","logging","unittest","pickle","copy","time","calendar","decimal","fractions","statistics","heapq","bisect","array","enum","dataclasses","abc","contextlib","tempfile","shutil","glob","fnmatch","zipfile","tarfile","gzip","bz2","hashlib","hmac","secrets","uuid","urllib","http","email","base64","struct","codecs","io","socket","ssl","asyncio"].includes(e))return e;const t={np:"numpy",pd:"pandas",plt:"matplotlib",tf:"tensorflow",torch:"torch",sk:"sklearn"};return e in t?t[e]:["str","list","dict","set","tuple","int","float","bytes","bool"].includes(e)?e:e.endsWith("_list")||e.includes("list")||e.endsWith("List")||e.endsWith("s")&&!e.endsWith("ss")&&!e.endsWith("us")&&!e.endsWith("is")?"list":e.endsWith("_dict")||e.includes("dict")||e.endsWith("Dict")||e.endsWith("Map")||e.includes("mapping")||e.includes("config")?"dict":e.endsWith("_str")||e.includes("string")||e.endsWith("String")||e.endsWith("name")||e.endsWith("text")||e.endsWith("message")?"str":e.endsWith("_set")||e.includes("set")||e.endsWith("Set")?"set":e.endsWith("_int")||e.includes("int")||e.endsWith("Int")||e.includes("count")||e.includes("index")||e.endsWith("_id")||e.endsWith("Id")?"int":e.endsWith("_float")||e.includes("float")||e.endsWith("Float")||e.includes("price")||e.includes("rate")||e.includes("value")||e.includes("amount")?"float":"object"}findModuleContext(e,t,a){const i=e.getText().split("\n");for(const e of i){const t=e.match(/^from\s+(\S+)\s+import\s+(.+)$/);if(t){const e=t[1];if(a===e||e.endsWith("."+a))return r.Logger.getInstance().debug(`Detected module name in from statement: ${e}`),e;continue}const i=e.match(/^import\s+(\S+)(?:\s+as\s+(\S+))?$/);if(i){const e=i[1],t=i[2];if(t&&t===a||!t&&e.split(".").pop()===a)return e}}return null}}t.SymbolResolver=n,n.PYTHON_KEYWORDS=new Set(["False","None","True","and","as","assert","async","await","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield"]),n.PYTHON_BUILTINS=new Set(["abs","all","any","ascii","bin","bool","bytearray","bytes","callable","chr","classmethod","compile","complex","delattr","dict","dir","divmod","enumerate","eval","exec","filter","float","format","frozenset","getattr","globals","hasattr","hash","help","hex","id","input","int","isinstance","issubclass","iter","len","list","locals","map","max","memoryview","min","next","object","oct","open","ord","pow","print","property","range","repr","reversed","round","set","setattr","slice","sorted","staticmethod","str","sum","super","tuple","type","vars","zip"]),n.PYTHON_EXCEPTIONS=new Set(["ArithmeticError","AssertionError","AttributeError","BaseException","BlockingIOError","BrokenPipeError","BufferError","BytesWarning","ChildProcessError","ConnectionAbortedError","ConnectionError","ConnectionRefusedError","ConnectionResetError","DeprecationWarning","EOFError","Ellipsis","EnvironmentError","Exception","FileExistsError","FileNotFoundError","FloatingPointError","FutureWarning","GeneratorExit","IOError","ImportError","ImportWarning","IndentationError","IndexError","InterruptedError","IsADirectoryError","KeyError","KeyboardInterrupt","LookupError","MemoryError","ModuleNotFoundError","NameError","NotADirectoryError","NotImplemented","NotImplementedError","OSError","OverflowError","PendingDeprecationWarning","PermissionError","ProcessLookupError","RecursionError","ReferenceError","ResourceWarning","RuntimeError","RuntimeWarning","StopAsyncIteration","StopIteration","SyntaxError","SyntaxWarning","SystemError","SystemExit","TabError","TimeoutError","TypeError","UnboundLocalError","UnicodeDecodeError","UnicodeEncodeError","UnicodeError","UnicodeTranslateError","UnicodeWarning","UserWarning","ValueError","Warning","ZeroDivisionError"])},4417:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Logger=void 0;const i=a(1398);class p{constructor(e){this.prefix="[PythonHover]",this.author="KiidxAtlas",this.config=e,this.outputChannel=i.window.createOutputChannel("Python Hover")}static getInstance(e){return!p.instance&&e&&(p.instance=new p(e)),p.instance}debug(e,...t){if(this.config.getValue("enableDebugLogging",!1)){const a=`${this.prefix} [DEBUG] ${e}`;this.outputChannel.appendLine(a+(t.length>0?" "+JSON.stringify(t):"")),console.log(a,...t)}}info(e,...t){const a=`${this.prefix} [INFO] ${e}`;this.outputChannel.appendLine(a+(t.length>0?" "+JSON.stringify(t):"")),console.log(a,...t)}warn(e,...t){const a=`${this.prefix} [WARN] ${e}`;this.outputChannel.appendLine(a+(t.length>0?" "+JSON.stringify(t):"")),console.warn(a,...t)}error(e,t){const a=`${this.prefix} [ERROR] ${e}`;t?(this.outputChannel.appendLine(a+" "+(t.stack||t.toString())),console.error(a,t)):(this.outputChannel.appendLine(a),console.error(a))}updateConfig(e){this.config=e}getOutputChannel(){return this.outputChannel}show(){this.outputChannel.show()}dispose(){this.outputChannel.dispose()}}t.Logger=p},4442:e=>{e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},4674:e=>{e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},4789:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.VersionDetector=void 0;const i=a(1943),p=a(6928),r=a(1398),n=a(4417);t.VersionDetector=class{constructor(e){this.configManager=e,this.logger=n.Logger.getInstance()}async detectPythonVersion(){return(await this.detectPythonVersionInfo()).version}async detectPythonVersionInfo(){const e=this.configManager.docsVersion;if("auto"!==e)return{version:e,pythonPath:await this.getPythonPath()||void 0};const t=await this.getPythonPath(),a=await this.getFromPythonExtension()||await this.getFromProjectFiles()||this.getDefaultVersion();return{version:this.normalizePythonVersion(a),pythonPath:t||void 0}}async getPythonPath(){try{const e=r.extensions.getExtension("ms-python.python");if(e){e.isActive||await e.activate();const t=r.workspace.getConfiguration("python").get("defaultInterpreterPath");if(t)return t}}catch(e){this.logger.error("Error getting Python path",e)}return null}async getFromPythonExtension(){try{const e=r.extensions.getExtension("ms-python.python");if(e){e.isActive||await e.activate();const t=r.workspace.getConfiguration("python").get("defaultInterpreterPath");if(t){this.logger.debug(`Found Python interpreter path: ${t}`);const e=t.match(/python(\d+)\.(\d+)/i);if(e)return`${e[1]}.${e[2]}`}const a=e.exports;if(a&&a.settings){const e=await(a.settings.getExecutionDetails?.());if(e?.execCommand){const t=(Array.isArray(e.execCommand)?e.execCommand[0]:e.execCommand).match(/python(\d+)\.(\d+)/i);if(t)return`${t[1]}.${t[2]}`}}}}catch(e){this.logger.debug("Could not get version from Python extension",e)}return null}async getFromProjectFiles(){const e=r.workspace.workspaceFolders;if(!e)return null;for(const t of e){const e=await this.checkPyprojectToml(t.uri.fsPath)||await this.checkPipfile(t.uri.fsPath)||await this.checkRuntimeTxt(t.uri.fsPath);if(e)return e}return null}async checkPyprojectToml(e){try{const t=p.join(e,"pyproject.toml"),a=await i.readFile(t,"utf-8"),r=a.match(/python\s*=\s*"([^"]+)"/);if(r)return this.extractVersionFromRange(r[1]);const n=a.match(/requires-python\s*=\s*"([^"]+)"/);if(n)return this.extractVersionFromRange(n[1])}catch(e){}return null}async checkPipfile(e){try{const t=p.join(e,"Pipfile"),a=(await i.readFile(t,"utf-8")).match(/python_version\s*=\s*"([^"]+)"/);if(a)return a[1]}catch(e){}return null}async checkRuntimeTxt(e){try{const t=p.join(e,"runtime.txt"),a=(await i.readFile(t,"utf-8")).match(/python-(\d+\.\d+)/);if(a)return a[1]}catch(e){}return null}extractVersionFromRange(e){const t=e.match(/(\d+\.\d+)/);return t?t[1]:"3.12"}normalizePythonVersion(e){const t=e.match(/^(\d+)\.(\d+)/);return t?`${t[1]}.${t[2]}`:"3.12"}getDefaultVersion(){return"3.12"}getSupportedVersions(){return["3.8","3.9","3.10","3.11","3.12","3.13"]}isVersionSupported(e){return this.getSupportedVersions().includes(e)}}},4820:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PythonHoverProvider=void 0;const i=a(1398),p=a(9310),r=a(1844),n=a(8058),s=a(8704),d=a(1098),o=a(9332),l=a(6699),m=a(9221),c=a(2441),h=a(4188),u=a(8446),f=a(4417),g=a(5097),v=a(9324),y=a(5585),_=a(2218);t.PythonHoverProvider=class{constructor(e,t,a,i,r){this.configManager=e,this.inventoryManager=t,this.versionDetector=a,this.logger=f.Logger.getInstance(),this.symbolResolver=new h.SymbolResolver,this.documentationFetcher=new o.DocumentationFetcher(i),this.contextDetector=new m.ContextDetector,this.methodResolver=new c.MethodResolver,this.customDocsLoader=new d.CustomDocumentationLoader,this.pendingHoverRequests=new g.BoundedCache({maxSize:p.LIMITS.MAX_PENDING_REQUESTS,ttl:3e4}),this.theme=new v.HoverTheme,this.debounceTimers=new Map,this.versionCache=new g.BoundedCache({maxSize:p.LIMITS.MAX_VERSION_CACHE_SIZE,ttl:p.PERFORMANCE.VERSION_CACHE_TTL}),this.dataLoader=r||new u.DataLoader,setTimeout(()=>{this.dataLoader.preloadAll().catch(e=>{this.logger.error("Error preloading data:",e)})},5e3),this.loadCustomDocs()}buildDocUrl(e){return`${e.uri}#${e.anchor}`}createStandardHover(e){const t=this.theme.createMarkdown();if(t.appendMarkdown(this.theme.formatHeader(e.symbol,e.type)),e.badges&&t.appendMarkdown(this.theme.formatBadgeGroup(e.badges)),e.content&&t.appendMarkdown(this.theme.formatContent(e.content)),e.example&&(t.appendMarkdown(this.theme.formatDivider()),t.appendMarkdown(this.theme.formatCodeBlock(e.example,"python"))),e.docUrl){t.appendMarkdown(this.theme.formatDivider());const a=[{text:"View Documentation",url:e.docUrl,icon:"book"}];t.appendMarkdown(this.theme.formatActionLinks(a))}return this.appendVersionFooter(t,e.versionInfo),new i.Hover(t)}getDebounceDelay(){return this.configManager.getValue("debounceDelay",p.PERFORMANCE.DEBOUNCE_DELAY)}getVersionCacheTTL(){return 1e3*this.configManager.getValue("versionCacheTTL",p.PERFORMANCE.VERSION_CACHE_TTL/1e3)}refreshTheme(){this.theme.refresh()}async loadCustomDocs(){try{const e=i.workspace.workspaceFolders;e&&e.length>0&&await this.customDocsLoader.loadCustomDocs(e[0])}catch(e){this.logger.error("Error loading custom docs",e)}}async reloadCustomDocs(){await this.loadCustomDocs()}async getCachedPythonVersion(e){const t=i.workspace.getWorkspaceFolder(e.uri),a=t?.uri.toString()||"default",p=this.versionCache.get(a),r=Date.now();if(p&&r-p.timestamp<this.getVersionCacheTTL())return{version:p.version,pythonPath:p.pythonPath};const n=await this.versionDetector.detectPythonVersionInfo();return this.versionCache.set(a,{version:n.version,timestamp:r,pythonPath:n.pythonPath}),n}clearVersionCache(){this.versionCache.clear(),this.logger.info("Version cache cleared")}async provideHover(e,t,a){if(a.isCancellationRequested)return null;const i=`${e.uri.toString()}:${t.line}:${t.character}`;if(this.pendingHoverRequests.has(i))return this.pendingHoverRequests.get(i);const p=this.debounceTimers.get(i);p&&clearTimeout(p);const r=new Promise(p=>{const r=setTimeout(async()=>{this.debounceTimers.delete(i);try{const i=await this.provideHoverImpl(e,t,a);p(i)}catch(e){this.logger.error("Error in hover provider",e),p(null)}},this.getDebounceDelay());this.debounceTimers.set(i,r)});this.pendingHoverRequests.set(i,r);try{return await r}finally{this.pendingHoverRequests.delete(i)}}async provideHoverImpl(e,t,a){try{const a=await this.getCachedPythonVersion(e),{version:i,pythonPath:p}=a,s=this.symbolResolver.resolveSymbolAtPosition(e,t);if(0===s.length)return null;const d=s[0],o=this.customDocsLoader.getCustomDoc(d.symbol);if(o)return this.createCustomDocHover(o,d,a);const m=e.getText(),c=(0,l.getImportedLibraries)(m,this.configManager),h=new Set(c.values());if(this.configManager.autoDetectLibrariesEnabled){if(h.has(d.symbol))return await this.createModuleHover(d.symbol,i,p);const e=c.get(d.symbol);if(e&&e!==d.symbol){const t=await this.inventoryManager.resolveSymbol(d.symbol,i,e,p);if(t){const i=await this.documentationFetcher.fetchDocumentationForSymbol(d.symbol,t,this.configManager.maxSnippetLines,e);return await this.createRichHover(i,t,d,a)}}}let u=d.symbol;if(u.includes(".")){const e=u.split("."),t=e[0];u=e[e.length-1],(h.has(t)||d.context===t)&&(d.context=t,d.symbol=u)}if("method"===d.type&&d.context){const e=(0,l.getThirdPartyDoc)(d.context,u);if(e)return await this.createThirdPartyHoverAsync(e,d,a)}for(const e of h){const t=(0,l.getThirdPartyDoc)(e,u);if(t)return await this.createThirdPartyHoverAsync(t,d,a)}if("method"===d.type){let r=d.context;if(u.includes(".")){const e=u.split("."),t=e[0];if(u=e[e.length-1],c.has(t)){const e=c.get(t);r=e,d.context=e,d.symbol=u}}const n=h.has(r||"");if(f.Logger.getInstance().info(`[HoverProvider] ReceiverType before detection: ${r}`),f.Logger.getInstance().info(`[HoverProvider] AlreadySetFromDottedExpression: ${n}`),f.Logger.getInstance().info(`[HoverProvider] Condition check: !receiverType=${!r}, receiverType==='object'=${"object"===r}`),!r||"object"===r||!n&&!c.has(u.split(".")[0])){f.Logger.getInstance().info(`[HoverProvider] Calling detectMethodContext for method: ${u}`);const a=this.contextDetector.detectMethodContext(e,t,u);a?(f.Logger.getInstance().info(`[HoverProvider] Detected type: ${a}`),r=a):f.Logger.getInstance().info("[HoverProvider] No type detected")}if(f.Logger.getInstance().info(`[HoverProvider] Final receiverType: ${r}`),r){if(f.Logger.getInstance().info(`[HoverProvider] ReceiverType includes dot: ${r.includes(".")}`),!r.includes(".")&&h.size>0){f.Logger.getInstance().info(`[HoverProvider] Attempting to qualify simple type: ${r}`);const e=r;for(const t of h)try{const a=`${t}.${e}`;if(f.Logger.getInstance().info(`[HoverProvider] Trying to resolve: ${a}`),await this.inventoryManager.resolveSymbol(e,i,t,p)){f.Logger.getInstance().info(`[HoverProvider] Found ${e} in library ${t}`),r=a;break}}catch(e){f.Logger.getInstance().debug(`[HoverProvider] Failed to check library ${t}: ${e instanceof Error?e.message:String(e)}`);continue}}if(r.includes(".")){f.Logger.getInstance().info(`[HoverProvider] Handling qualified type name: ${r}`);const e=r.split("."),t=e[0],n=e[e.length-1];if(f.Logger.getInstance().info(`[HoverProvider] Library: ${t}, ClassName: ${n}`),f.Logger.getInstance().info(`[HoverProvider] Is library imported: ${h.has(t)}`),h.has(t)){const e=(0,l.getThirdPartyDoc)(t,u);if(e)return d.context=n,d.symbol=u,await this.createThirdPartyHoverAsync(e,d,a);const r=`${n}.${u}`,s=await this.inventoryManager.resolveSymbol(r,i,t,p);if(s){const e=await this.documentationFetcher.fetchDocumentationForSymbol(u,s,this.configManager.maxSnippetLines,t);if(s.uri){const e=`${s.uri}#${s.anchor}`,t=await this.documentationFetcher.fetchRichDocumentation(e,u);if(t&&(t.parameters?.length||t.examples?.length||t.seeAlso?.length))return this.createDynamicRichHover(t,d.type,a)}return d.context=n,d.symbol=u,await this.createRichHover(e,s,d,a)}d.context=n,d.symbol=u}}else d.context&&"object"!==d.context||(this.methodResolver.resolveMethodInfo(e,t,u,r)?(d.context=r,d.symbol=u):d.symbol=u)}else d.context||(d.symbol=u)}if("method"===d.type&&u!==d.symbol&&u.length>0&&(d.symbol=u),d.symbol.startsWith("__")&&d.symbol.endsWith("__")){let e=d.symbol;e.includes(".")&&(e=e.split(".").pop()||e);const t=n.SPECIAL_METHOD_DESCRIPTIONS[e];if(t){const i={description:t};return this.createDunderMethodHover(e,i,a)}}let g=d.symbol;"method"===d.type&&d.context&&(d.symbol.startsWith(d.context+".")||(g=`${d.context}.${d.symbol}`));const v=await this.inventoryManager.resolveSymbol(g,i,d.context,p);if("f-string"===d.type)return this.createFStringHover(a);if("operator"===d.type)return this.createOperatorHover(d.symbol,a);if("keyword"===d.type&&r.ENHANCED_EXAMPLES[d.symbol]){const e=await this.inventoryManager.resolveSymbol(d.symbol,i,d.context,p);if(e){const t=await this.documentationFetcher.fetchDocumentationForSymbol(d.symbol,e,this.configManager.maxSnippetLines,d.context);return this.createEnhancedExampleHoverWithDocs(d.symbol,t,e,a)}return this.createEnhancedExampleHover(d.symbol,a)}let y=this.configManager.maxSnippetLines;["else","elif","finally","except","with"].includes(d.symbol)&&(y=Math.max(40,y));const _=await this.documentationFetcher.fetchDocumentationForSymbol(d.symbol,v||void 0,y,d.context);return!v&&this.configManager.autoDetectLibrariesEnabled&&!_.content&&/^[a-z_][a-z0-9_]*$/i.test(d.symbol)&&!d.symbol.includes(".")&&await this.inventoryManager.resolveSymbol(d.symbol,i,d.symbol,p)?await this.createModuleHover(d.symbol,i,p):await this.createRichHover(_,v,d,a)}catch(e){return this.logger.error("Error in hover provider",e),"ENOTFOUND"===e.code||"ETIMEDOUT"===e.code||"ECONNREFUSED"===e.code?this.createNetworkErrorHover():null}}createNetworkErrorHover(){const e=this.theme.createMarkdown();return e.appendMarkdown("## $(error) Network Error\n\n"),e.appendMarkdown(this.theme.formatWarning("Could not fetch documentation. Please check your internet connection.")),e.appendMarkdown(this.theme.formatTip("You can clear the cache and retry, or check your network settings.")),e.appendMarkdown(this.theme.formatDivider()),e.appendMarkdown(this.theme.formatActionLinks([{text:"Clear Cache",command:"command:pythonHover.clearCache",icon:"trash"},{text:"Check Settings",command:'command:workbench.action.openSettings?["pythonHover"]',icon:"gear"}])),new i.Hover(e)}dispose(){this.theme.dispose();for(const e of this.debounceTimers.values())clearTimeout(e);this.debounceTimers.clear(),this.pendingHoverRequests.clear(),this.versionCache.clear(),this.logger.info("Hover provider disposed")}createCustomDocHover(e,t,a){const p=this.theme.createMarkdown();return p.appendMarkdown((0,d.formatCustomDoc)(e)),this.appendVersionFooter(p,a),new i.Hover(p)}async createModuleHover(e,t,a){const p=this.theme.createMarkdown(),r=this.configManager.getConfig().ui;p.appendMarkdown(this.theme.formatHeader(`${e}`,"module"));const n=await this.inventoryManager.resolveSymbol(e,t,e,a),s=await this.documentationFetcher.fetchPyPIInfo(e);if(n||s){const d=[{text:"module",type:"info"}];s?.version&&d.push({text:`v${s.version}`,type:"success"});const o=this.categorizeModule(e);if(o&&d.push({text:o,type:"info"}),p.appendMarkdown(this.theme.formatBadgeGroup(d)),r.showQuickActions){const t=s?.docUrl||(n?this.buildDocUrl(n):`https://pypi.org/project/${e}/`),a=encodeURIComponent(JSON.stringify([t])),i=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${a}`},{text:"PyPI",icon:"package",command:`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([`https://pypi.org/project/${e}/`]))}`},{text:"Copy URL",icon:"link",command:`command:pythonHover.copyUrl?${a}`}];p.appendMarkdown(this.theme.formatQuickActions(i))}p.appendMarkdown(this.theme.formatDivider());let l="";if(n){const t=await this.documentationFetcher.fetchDocumentationForSymbol(e,n,this.configManager.maxSnippetLines,e);l=t?.content||""}if(!l&&s?.summary&&(l=s.summary),l){const e=r.maxContentLength||800,t=s?.docUrl||(n?this.buildDocUrl(n):void 0);if(l.length>e&&t){const a=`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([t]))}`;p.appendMarkdown(this.theme.formatContentWithTruncation(l,e,a))}else p.appendMarkdown(this.theme.formatContent(l));p.appendMarkdown("\n\n")}if(s){const e=[];s.author&&e.push(`**Author:** ${s.author}`),s.license&&e.push(`**License:** ${s.license}`),s.requires_python&&e.push(`**Python:** ${s.requires_python}`),e.length>0&&(p.appendMarkdown(this.theme.formatSectionHeader("Package Info")),p.appendMarkdown(e.join(" • ")+"\n\n"))}const m=await this.getModuleExports(e,t,a);if(m.length>0){p.appendMarkdown(this.theme.formatSectionHeader("Key Exports"));const e=m.slice(0,10).map(e=>`- \`${e}\``).join("\n");p.appendMarkdown(e+"\n\n"),m.length>10&&p.appendMarkdown(`*...and ${m.length-10} more*\n\n`)}if(p.appendMarkdown(this.theme.formatTip(`Hover over functions from \`${e}\` for detailed documentation`)),p.appendMarkdown(this.theme.formatDivider()),!r.showQuickActions){const t=s?.docUrl||(n?this.buildDocUrl(n):void 0),a=[];t&&a.push({text:"View Documentation",url:t,icon:"book"}),a.push({text:"View on PyPI",url:`https://pypi.org/project/${e}/`,icon:"package"}),p.appendMarkdown(this.theme.formatActionLinks(a))}if(r.showKeyboardHints){const e=[{keys:"F12",description:"Go to definition"},{keys:"Ctrl+Space",description:"IntelliSense"}];p.appendMarkdown(this.theme.formatKeyboardHint(e))}return this.appendVersionFooter(p,{version:t,pythonPath:a}),new i.Hover(p)}const d={numpy:{description:"Fundamental package for scientific computing with Python. NumPy provides powerful N-dimensional array objects, broadcasting functions, linear algebra, Fourier transforms, and random number capabilities.",docs:"https://numpy.org/doc/",badge:"Scientific Computing",exports:["array","ndarray","zeros","ones","arange","linspace","dot","matmul","random","linalg"]},pandas:{description:"Powerful data analysis and manipulation library built on top of NumPy. Provides DataFrame and Series data structures for working with structured data.",docs:"https://pandas.pydata.org/docs/",badge:"Data Analysis",exports:["DataFrame","Series","read_csv","read_excel","read_json","to_datetime","merge","concat"]},flask:{description:"Lightweight WSGI web application framework designed with simplicity and flexibility in mind.",docs:"https://flask.palletsprojects.com/",badge:"Web Framework",exports:["Flask","request","Response","render_template","jsonify","redirect","url_for","session"]},django:{description:"High-level Python web framework that encourages rapid development and clean, pragmatic design.",docs:"https://docs.djangoproject.com/",badge:"Web Framework"},requests:{description:"Elegant and simple HTTP library for Python. Makes sending HTTP requests extremely simple.",docs:"https://requests.readthedocs.io/",badge:"HTTP Client",exports:["get","post","put","delete","patch","head","options","Session","Response"]}}[e.toLowerCase()];if(d){const t=[{text:"module",type:"info"}];if(d.badge&&t.push({text:d.badge,type:"success"}),p.appendMarkdown(this.theme.formatBadgeGroup(t)),r.showQuickActions){const t=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([d.docs]))}`},{text:"PyPI",icon:"package",command:`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([`https://pypi.org/project/${e}/`]))}`}];p.appendMarkdown(this.theme.formatQuickActions(t))}if(p.appendMarkdown(this.theme.formatDivider()),p.appendMarkdown(this.theme.formatContent(d.description)),p.appendMarkdown("\n\n"),d.exports&&d.exports.length>0){p.appendMarkdown(this.theme.formatSectionHeader("Key Exports"));const e=d.exports.map(e=>`- \`${e}\``).join("\n");p.appendMarkdown(e+"\n\n")}if(p.appendMarkdown(this.theme.formatTip(`Hover over functions like \`${e}.function()\` for detailed documentation`)),p.appendMarkdown(this.theme.formatDivider()),!r.showQuickActions){const t=[{text:"Official Documentation",url:d.docs,icon:"book"},{text:"View on PyPI",url:`https://pypi.org/project/${e}/`,icon:"package"}];p.appendMarkdown(this.theme.formatActionLinks(t))}}else{const t=[{text:"module",type:"info"},{text:"third-party",type:"success"}];p.appendMarkdown(this.theme.formatBadgeGroup(t)),p.appendMarkdown(this.theme.formatDivider()),p.appendMarkdown(this.theme.formatContent(`Third-party Python module: **${e}**`)),p.appendMarkdown("\n\n"),p.appendMarkdown(this.theme.formatTip(`Hover over functions from \`${e}\` for detailed documentation`)),p.appendMarkdown(this.theme.formatDivider());const a=[{text:"View on PyPI",url:`https://pypi.org/project/${e}/`,icon:"package"}];p.appendMarkdown(this.theme.formatActionLinks(a))}return this.appendVersionFooter(p,{version:t,pythonPath:a}),new i.Hover(p)}categorizeModule(e){const t={"Web Framework":/^(flask|django|fastapi|tornado|bottle|pyramid|web2py)/i,"Data Science":/^(pandas|numpy|scipy|scikit-learn|sklearn|matplotlib|seaborn)/i,"Machine Learning":/^(tensorflow|keras|torch|pytorch|transformers|ml|ai)/i,Database:/^(sqlalchemy|pymongo|redis|psycopg|mysql|sqlite)/i,"HTTP Client":/^(requests|httpx|aiohttp|urllib)/i,Testing:/^(pytest|unittest|nose|mock)/i,CLI:/^(click|argparse|typer|rich)/i};for(const[a,i]of Object.entries(t))if(i.test(e))return a}async getModuleExports(e,t,a){try{return[]}catch(t){return this.logger.debug(`Could not fetch exports for ${e}:`,t),[]}}async createThirdPartyHoverAsync(e,t,a){let i=null;return e.url&&(this.logger.debug(`🔍 Attempting to fetch rich documentation for ${e.name} from ${e.url}`),i=await this.documentationFetcher.fetchRichDocumentation(e.url,e.name)),i&&(i.parameters?.length||i.examples?.length||i.seeAlso?.length)?(this.logger.debug(`✅ Using rich documentation for ${e.name}`),this.createDynamicRichHover(i,t.type,a)):(this.logger.debug(`ℹ️ Using basic hover for ${e.name}`),this.createBasicThirdPartyHover(e,t,a))}createBasicThirdPartyHover(e,t,a){const p=this.theme.createMarkdown(),r=this.configManager.getConfig().ui;p.appendMarkdown(this.theme.formatHeader(e.name,"method"===t.type?"function":t.type));const n=[{text:"method"===t.type?"function":t.type,type:"info"}];if(e.url&&e.url.includes("pandas")?n.push({text:"pandas",type:"success"}):e.url&&e.url.includes("numpy")?n.push({text:"numpy",type:"success"}):e.url&&n.push({text:"third-party",type:"success"}),p.appendMarkdown(this.theme.formatBadgeGroup(n)),r.showQuickActions&&e.url){const t=encodeURIComponent(JSON.stringify([e.url])),a=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${t}`},{text:"Copy URL",icon:"link",command:`command:pythonHover.copyUrl?${t}`}];p.appendMarkdown(this.theme.formatQuickActions(a))}if(p.appendMarkdown(this.theme.formatDivider()),e.description){const t=r.maxContentLength||800;if(e.description.length>t&&e.url){const a=`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([e.url]))}`;p.appendMarkdown(this.theme.formatContentWithTruncation(e.description,t,a))}else p.appendMarkdown(this.theme.formatContent(e.description));p.appendMarkdown("\n\n")}if(e.example&&(p.appendMarkdown(this.theme.formatSectionHeader("Example")),p.appendMarkdown(this.theme.formatCodeBlock(e.example,"python"))),!r.showQuickActions&&e.url){p.appendMarkdown(this.theme.formatDivider());const t=[{text:"View Documentation",url:e.url,icon:"book"}];p.appendMarkdown(this.theme.formatActionLinks(t))}if(r.showKeyboardHints){const e=[{keys:"F12",description:"Go to definition"},{keys:"Ctrl+Space",description:"IntelliSense"}];p.appendMarkdown(this.theme.formatKeyboardHint(e))}return this.appendVersionFooter(p,a),new i.Hover(p)}createDynamicRichHover(e,t,a){const p=this.theme.createMarkdown(),r=this.configManager.getConfig().ui;p.appendMarkdown(this.theme.formatHeader(e.name,"method"===t?"function":t));const n=[{text:"method"===t?"function":t,type:"info"}];if(e.url&&e.url.includes("pandas")?n.push({text:"pandas",type:"success"}):e.url&&e.url.includes("numpy")?n.push({text:"numpy",type:"success"}):e.url&&n.push({text:"third-party",type:"success"}),p.appendMarkdown(this.theme.formatBadgeGroup(n)),r.showDeprecationWarnings&&e.deprecated&&p.appendMarkdown(this.theme.formatDeprecation(e.versionAdded||"",e.deprecated,void 0)),r.showQuickActions&&e.url){const t=encodeURIComponent(JSON.stringify([e.url])),a=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${t}`},{text:"Copy URL",icon:"link",command:`command:pythonHover.copyUrl?${t}`}];p.appendMarkdown(this.theme.formatQuickActions(a))}if(p.appendMarkdown(this.theme.formatDivider()),e.summary&&e.summary!==e.description&&p.appendMarkdown(this.theme.formatSummaryBox(e.summary)),e.description){const t=r.maxContentLength||800;if(e.description.length>t&&e.url){const a=`command:pythonHover.openDocs?${encodeURIComponent(JSON.stringify([e.url]))}`;p.appendMarkdown(this.theme.formatContentWithTruncation(e.description,t,a))}else p.appendMarkdown(this.theme.formatContent(e.description));p.appendMarkdown("\n\n")}if(r.showParameterTables&&e.parameters&&e.parameters.length>0){p.appendMarkdown(this.theme.formatSectionHeader("Parameters"));for(const t of e.parameters)p.appendMarkdown(this.theme.formatParameterDetailed({name:t.name,type:t.type,description:t.description,default:t.default,required:t.required,constraints:t.constraints}))}if(r.showReturnTypes)if(e.returnType&&e.returns)p.appendMarkdown(this.theme.formatReturnType(e.returnType,e.returns));else if(e.returns){const t=e.returns.match(/^([^\n:]+)(?:\s*:\s*|\s+—\s+|\s+-\s+|\n)(.+)/s);if(t){const[,e,a]=t;p.appendMarkdown(this.theme.formatReturnType(e.trim(),a.trim()))}else p.appendMarkdown(this.theme.formatSectionHeader("Returns")),p.appendMarkdown(e.returns+"\n\n")}if(e.yields&&p.appendMarkdown(this.theme.formatYields(e.yields)),e.raises&&e.raises.length>0&&p.appendMarkdown(this.theme.formatRaises(e.raises)),e.attributes&&e.attributes.length>0&&p.appendMarkdown(this.theme.formatAttributes(e.attributes)),e.notes&&(p.appendMarkdown(this.theme.formatSectionHeader("Notes")),p.appendMarkdown(e.notes+"\n\n")),e.warnings&&(p.appendMarkdown(this.theme.formatSectionHeader("⚠️ Warning")),p.appendMarkdown(e.warnings+"\n\n")),r.showSeeAlso&&e.seeAlso&&e.seeAlso.length>0){const t=e.seeAlso.map(e=>({name:e,description:""}));p.appendMarkdown(this.theme.formatSeeAlso(t))}if(e.examples&&e.examples.length>0){p.appendMarkdown(this.theme.formatSectionHeader("Examples"));for(const t of e.examples)p.appendMarkdown(this.theme.formatExampleEnhanced({title:t.title,code:t.code,output:t.output,description:t.description}))}if((e.versionAdded||e.versionChanged)&&p.appendMarkdown(this.theme.formatVersionMetadata({added:e.versionAdded,changed:e.versionChanged,deprecated:e.deprecated})),!r.showQuickActions&&e.url){p.appendMarkdown(this.theme.formatDivider());const t=[{text:"View Documentation",url:e.url,icon:"book"}];p.appendMarkdown(this.theme.formatActionLinks(t))}if(r.showKeyboardHints){const e=[{keys:"F12",description:"Go to definition"},{keys:"Ctrl+Space",description:"IntelliSense"}];p.appendMarkdown(this.theme.formatKeyboardHint(e))}return this.appendVersionFooter(p,a),new i.Hover(p)}createDunderMethodHover(e,t,a){const p=this.theme.createMarkdown(),n=this.configManager.getConfig().ui;if(p.appendMarkdown(this.theme.formatHeader(`${e} — Special Method`,"method")),p.appendMarkdown(this.theme.formatBadgeGroup([{text:"Special Method",type:"info"},{text:"Dunder",type:"success"}])),n.showQuickActions){const e="https://docs.python.org/3/reference/datamodel.html#special-method-names",t=encodeURIComponent(JSON.stringify([e])),a=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${t}`},{text:"Copy URL",icon:"link",command:`command:pythonHover.copyUrl?${t}`}];p.appendMarkdown(this.theme.formatQuickActions(a))}if(p.appendMarkdown(this.theme.formatDivider()),p.appendMarkdown(this.theme.formatContent(t.description)),r.ENHANCED_EXAMPLES[e]?(p.appendMarkdown(this.theme.formatSectionHeader("Example")),p.appendMarkdown(r.ENHANCED_EXAMPLES[e].content),p.appendMarkdown("\n\n")):t.example&&(p.appendMarkdown(this.theme.formatSectionHeader("Example")),p.appendMarkdown(this.theme.formatCodeBlock(t.example))),p.appendMarkdown(this.theme.formatNote("Special methods are invoked implicitly by Python syntax and built-in operations.")),n.showSeeAlso){const t=this.getRelatedDunderMethods(e);t.length>0&&p.appendMarkdown(this.theme.formatSeeAlso(t))}if(p.appendMarkdown(this.theme.formatDivider()),!n.showQuickActions){const e="https://docs.python.org/3/reference/datamodel.html#special-method-names",t=encodeURIComponent(JSON.stringify([e])),a=[{text:"Open Documentation",command:`command:pythonHover.openDocs?${t}`,icon:"book"},{text:"Copy URL",command:`command:pythonHover.copyUrl?${t}`,icon:"copy"}];p.appendMarkdown(this.theme.formatActionLinks(a))}if(n.showKeyboardHints){const e=[{keys:"F12",description:"Go to definition"},{keys:"Ctrl+Space",description:"IntelliSense"}];p.appendMarkdown(this.theme.formatKeyboardHint(e))}return this.appendVersionFooter(p,a),new i.Hover(p)}getRelatedDunderMethods(e){const t={__init__:{methods:["__new__","__del__","__repr__","__str__"],description:"Object lifecycle methods"},__str__:{methods:["__repr__","__format__","__bytes__"],description:"String representation methods"},__repr__:{methods:["__str__","__format__","__bytes__"],description:"String representation methods"},__add__:{methods:["__radd__","__iadd__","__sub__","__mul__"],description:"Arithmetic operators"},__eq__:{methods:["__ne__","__lt__","__le__","__gt__","__ge__","__hash__"],description:"Comparison operators"},__getitem__:{methods:["__setitem__","__delitem__","__len__","__contains__"],description:"Container methods"},__enter__:{methods:["__exit__"],description:"Context manager protocol"},__call__:{methods:["__init__","__new__"],description:"Callable protocol"},__iter__:{methods:["__next__","__reversed__","__contains__"],description:"Iterator protocol"},__get__:{methods:["__set__","__delete__","__set_name__"],description:"Descriptor protocol"}}[e];return t?t.methods.filter(t=>t!==e).map(e=>({name:e,description:n.SPECIAL_METHOD_DESCRIPTIONS[e]||""})):[]}createEnhancedExampleHover(e,t){this.logger.debug(`📖 Creating enhanced example hover for: ${e}`);const a=this.theme.createMarkdown(),p="class"===e?"Class Definition":"Keyword";a.appendMarkdown(this.theme.formatHeader(`${e}`,"keyword"));const n=[{text:p,type:"info"}];a.appendMarkdown(this.theme.formatBadgeGroup(n)),a.appendMarkdown(this.theme.formatDivider()),r.ENHANCED_EXAMPLES[e].description&&a.appendMarkdown(this.theme.formatContent(r.ENHANCED_EXAMPLES[e].description)),a.appendMarkdown(r.ENHANCED_EXAMPLES[e].content),a.appendMarkdown("\n\n"),a.appendMarkdown(this.theme.formatDivider());const s=this.getDocUrlForSymbol(e);this.logger.debug(`🔗 Doc URL from MAP: ${s||"(not found)"}`);const d=s||`https://docs.python.org/3/reference/compound_stmts.html#${e}`;this.logger.debug(`🔗 Final doc URL: ${d}`);const o=[{text:"View in Python documentation",url:d,icon:"book"}];return a.appendMarkdown(this.theme.formatActionLinks(o)),this.appendVersionFooter(a,t),new i.Hover(a)}createEnhancedExampleHoverWithDocs(e,t,a,p){this.logger.debug(`📖 Creating enhanced example hover WITH docs for: ${e}`);const r=this.theme.createMarkdown();r.appendMarkdown(this.theme.formatHeader(`${e}`,"keyword"));const n=[{text:"class"===e?"Class Definition":"Keyword",type:"info"}];r.appendMarkdown(this.theme.formatBadgeGroup(n)),r.appendMarkdown(this.theme.formatDivider()),t?.content&&(this.logger.debug(`📄 Adding documentation content (${t.content.length} chars)`),r.appendMarkdown(this.theme.formatContent(t.content)),r.appendMarkdown("\n\n")),r.appendMarkdown(this.theme.formatDivider());const s=[{text:"View in Python documentation",url:`${a.uri}#${a.anchor}`,icon:"book"}];return r.appendMarkdown(this.theme.formatActionLinks(s)),this.appendVersionFooter(r,p),new i.Hover(r)}async createRichHover(e,t,a,p){if(t){const e=`${t.uri}#${t.anchor}`;this.logger.debug(`🔍 Attempting to fetch rich stdlib documentation for ${a.symbol} from ${e}`);try{const t=await this.documentationFetcher.fetchRichDocumentation(e,a.symbol);if(t&&(t.parameters?.length||t.examples?.length||t.seeAlso?.length||t.raises?.length||t.summary))return this.logger.debug(`✅ Using rich SphinxParser documentation for stdlib symbol ${a.symbol}`),this.createDynamicRichHover(t,a.type,p)}catch(e){this.logger.debug(`ℹ️ SphinxParser failed for ${a.symbol}, falling back to manual extraction:`,e)}}this.logger.debug(`ℹ️ Using manual extraction for ${a.symbol}`);const r=this.theme.createMarkdown(),n=this.configManager.getConfig().ui;let s;s="method"===a.type&&a.context?`${a.context}.${a.symbol}`:t?.name||a.symbol;const d=a.symbol.split(".").pop()||a.symbol;r.appendMarkdown(this.theme.formatHeader(s,a.type));const o=[];if(t?o.push({text:`${t.domain}:${t.role}`,type:"info"}):o.push({text:a.type,type:"info"}),r.appendMarkdown(this.theme.formatBadgeGroup(o)),n.showDeprecationWarnings&&e&&e.content){const t=this.isDeprecated(e.content);t&&r.appendMarkdown(this.theme.formatDeprecation(t.version||"",t.message,t.alternative))}if(n.showQuickActions&&(e||t)){const a=t?`${t.uri}#${t.anchor}`:e?.url?.startsWith("http")?e.url:`https://docs.python.org/3/${e?.url||""}`;if(a){const e=encodeURIComponent(JSON.stringify([a])),t=[{text:"Docs",icon:"book",command:`command:pythonHover.openDocs?${e}`},{text:"Copy URL",icon:"link",command:`command:pythonHover.copyUrl?${e}`}];r.appendMarkdown(this.theme.formatQuickActions(t))}}if(r.appendMarkdown(this.theme.formatDivider()),n.showSignatures&&e&&e.content){const t=this.extractSignature(e.content,d);t&&r.appendMarkdown(this.theme.formatSignatureBox(t,d))}if(n.showParameterTables&&e&&e.content){const t=this.extractParameters(e.content);t.length>0&&(r.appendMarkdown(this.theme.formatSectionHeader("Parameters")),r.appendMarkdown(this.theme.formatParameterTable(t)))}if(n.showReturnTypes&&e&&e.content){const t=this.extractReturnInfo(e.content);t&&r.appendMarkdown(this.theme.formatReturnType(t.type,t.description))}if(e&&e.content&&e.content.trim()){const a=e.content.trim();if(a.includes("Built-in Functions¶")||a.includes("are listed here in alphabetical order")||a.length>100&&!a.toLowerCase().includes(d.toLowerCase()))r.appendMarkdown(this.theme.formatWarning("Specific documentation not found. See full documentation for details.")),e.url&&r.appendMarkdown(this.theme.formatContent(`\n\nDocumentation available at [docs.python.org](${e.url}).`));else{const i=n.maxContentLength||800,p=this.extractBestParagraph(a);if(p)if(p.length>i){const a=t?`${t.uri}#${t.anchor}`:e.url,n=a?encodeURIComponent(JSON.stringify([a])):void 0,s=n?`command:pythonHover.openDocs?${n}`:void 0;r.appendMarkdown(this.theme.formatContentWithTruncation(p,i,s))}else r.appendMarkdown(this.theme.formatContent(p));else if(a.length>i){const p=t?`${t.uri}#${t.anchor}`:e.url,n=p?encodeURIComponent(JSON.stringify([p])):void 0,s=n?`command:pythonHover.openDocs?${n}`:void 0;r.appendMarkdown(this.theme.formatContentWithTruncation(a,i,s))}else r.appendMarkdown(this.theme.formatContent(a))}}else e&&e.url&&r.appendMarkdown(this.theme.formatContent(`Documentation available at [docs.python.org](${e.url}). Click **Open Documentation** below for full details.`));if(this.appendVersionInfo(r,d),this.appendMethodComparison(r,d),n.showSeeAlso){const e=this.findRelatedSymbols(d,a.context);e.length>0&&r.appendMarkdown(this.theme.formatSeeAlso(e))}if("method"===a.type&&a.context&&!n.showSeeAlso&&this.appendRelatedMethodsSection(r,a.context,d),n.showQuickActions||this.appendActionLinks(r,e,t),n.showKeyboardHints){const e=[{keys:"F12",description:"Go to definition"},{keys:"Ctrl+Space",description:"IntelliSense"}];r.appendMarkdown(this.theme.formatKeyboardHint(e))}return this.appendVersionFooter(r,p),new i.Hover(r)}async createFStringHover(e){const t=this.theme.createMarkdown();t.appendMarkdown(this.theme.formatHeader("f-string — Formatted String Literal","keyword")),t.appendMarkdown(this.theme.formatBadgeGroup([{text:"String Formatting",type:"info"}])),t.appendMarkdown(this.theme.formatDivider());const a=await this.documentationFetcher.fetchDocumentationForSymbol("f-string",void 0,this.configManager.maxSnippetLines);a&&a.content&&t.appendMarkdown(this.theme.formatContent(a.content)),t.appendMarkdown(this.theme.formatDivider());const p=a?.url||"https://docs.python.org/3/reference/lexical_analysis.html#f-strings",r=p.startsWith("http")?p:`https://docs.python.org/3/${p}`,n=encodeURIComponent(JSON.stringify([r])),s=[{text:"View Documentation",command:`command:pythonHover.openDocs?${n}`,icon:"book"},{text:"Copy URL",command:`command:pythonHover.copyUrl?${n}`,icon:"copy"}];return t.appendMarkdown(this.theme.formatActionLinks(s)),this.appendVersionFooter(t,e),new i.Hover(t)}async createOperatorHover(e,t){const a=this.theme.createMarkdown();a.appendMarkdown(this.theme.formatHeader(`\`${e}\` — Python Operator`,"operator")),a.appendMarkdown(this.theme.formatBadgeGroup([{text:"Operator",type:"info"}])),a.appendMarkdown(this.theme.formatDivider());const p=await this.documentationFetcher.fetchOperatorDocumentation(e);if(p&&p.content&&a.appendMarkdown(this.theme.formatContent(p.content)),s.STATIC_EXAMPLES[e]){a.appendMarkdown(this.theme.formatSectionHeader("Examples"));const t=s.STATIC_EXAMPLES[e].examples.join("\n");a.appendMarkdown(this.theme.formatCodeBlock(t))}a.appendMarkdown(this.theme.formatDivider());const r=p?.url||"https://docs.python.org/3/reference/expressions.html#operators",n=r.startsWith("http")?r:`https://docs.python.org/3/${r}`,d=encodeURIComponent(JSON.stringify([n])),o=[{text:"View Documentation",command:`command:pythonHover.openDocs?${d}`,icon:"book"},{text:"Copy URL",command:`command:pythonHover.copyUrl?${d}`,icon:"copy"}];return a.appendMarkdown(this.theme.formatActionLinks(o)),this.appendVersionFooter(a,t),new i.Hover(a)}extractBestParagraph(e){const t=e.split(/\n\s*\n/).map(e=>e.trim()).filter(e=>e.length>0),a=[];for(const e of t)if(!(/^#{1,6}\s+/.test(e)&&a.length>0)&&!/^\[.*\]\(.*\)$/.test(e)&&/[A-Za-z]/.test(e)&&e.length>10){a.push(e);const t=a.join("\n\n").length;if(a.length>=3||t>=400)break}return a.length>0?a.join("\n\n"):t[0]||""}appendRelatedMethodsSection(e,t,a){if(!i.workspace.getConfiguration("pythonHover").get("showRelatedMethods",!0))return;const p=(0,y.getRelatedMethodsForMethod)(t,a);if(p.length>0){e.appendMarkdown(this.theme.formatSectionHeader("Related Methods"));const a=p.slice(0,5);for(const i of a)e.appendMarkdown(this.theme.formatListItem(`\`${t}.${i.name}()\` — ${i.description}`));e.appendMarkdown("\n")}}appendActionLinks(e,t,a){let i=null;if(a?i=a.anchor?`${a.uri}#${a.anchor}`:a.uri:t&&t.url&&(i=t.url.startsWith("http")?t.url:`https://docs.python.org/3/${t.url}`),i){const t=encodeURIComponent(JSON.stringify([i])),a=i.replace(/^https?:\/\//,"");e.appendMarkdown(this.theme.formatDivider()),e.appendMarkdown(`**Source:** ${this.theme.formatLink(a,i)}\n\n`);const p=[{text:"Open Documentation",command:`command:pythonHover.openDocs?${t}`,icon:"book"},{text:"Copy URL",command:`command:pythonHover.copyUrl?${t}`,icon:"copy"}];e.appendMarkdown(this.theme.formatActionLinks(p))}}appendVersionInfo(e,t){if(!i.workspace.getConfiguration("pythonHover").get("showVersionInfo",!0))return;const a=(0,_.getVersionInfo)(t);a&&(e.appendMarkdown(this.theme.formatSectionHeader("Version Info")),e.appendMarkdown((0,_.formatVersionInfo)(a)))}appendMethodComparison(e,t){if(!i.workspace.getConfiguration("pythonHover").get("showVersionInfo",!0))return;const a=(0,_.getMethodComparison)(t);a&&(e.appendMarkdown(this.theme.formatSectionHeader("Version Comparison")),e.appendMarkdown((0,_.formatComparison)(a)))}appendVersionFooter(e,t){t&&(e.appendMarkdown(this.theme.formatDivider()),e.appendMarkdown(`<div style="text-align: right; font-size: 0.85em; color: #888;">Python ${t.version}</div>`))}extractParameters(e){const t=[],a=/:(?:param|parameter)(?:\s+(\w+))?\s+(\w+):\s*(.+?)(?=\n:|$)/gs;let i;for(;null!==(i=a.exec(e));){const e=i[1],a=i[2],p=i[3].trim();t.push({name:a,type:e,description:p,required:!0})}if(0===t.length){const a=e.match(/Args?:\s*\n((?:\s+.+\n?)+)/i);if(a){const e=a[1].split("\n").filter(e=>e.trim());for(const a of e){const e=a.match(/^\s*(\w+)\s*(?:\(([^)]+)\))?\s*:\s*(.+)/);e&&t.push({name:e[1],type:e[2],description:e[3].trim(),required:!e[3].includes("optional")})}}}return t}extractSignature(e,t){const a=e.match(/```(?:python)?\s*\n([^\n]+\([\s\S]*?\)(?:\s*->\s*\w+)?)\n```/);if(a)return a[1].trim();const i=e.match(new RegExp(`\`${t}\\([^)]*\\)(?:\\s*->\\s*\\w+)?\``));if(i)return i[0].replace(/`/g,"").trim();const p=e.match(new RegExp(`${t}\\s*\\([^)]*\\)(?:\\s*->\\s*[^\\n]+)?`));return p?p[0].trim():null}isDeprecated(e){const t=e.match(/\.\.\s+deprecated::\s*([0-9.]+)?\s*\n\s+(.+)/);if(t)return{version:t[1],message:t[2].trim()};const a=e.match(/(?:^|\n)(?:\*\*)?Deprecated(?:\*\*)?(?:\s+(?:since|in)\s+(?:version\s+)?([0-9.]+))?[:\s]+(.+?)(?:\n|$)/im);if(a){const e=a[1];let t=a[2].trim();const i=t.match(/(?:use|try|replaced by|instead use)\s+[`']?(\w+(?:\.\w+)?(?:\(\))?)[`']?/i),p=i?i[1]:void 0;return t=t.replace(/\.$/,""),{version:e,message:t,alternative:p}}const i=e.match(/(?:^|\n)(?:⚠️|WARNING|Note)?\s*(?:\*\*)?This (?:function|method|class|feature) is deprecated(?:\*\*)?(?:\s+(?:since|in)\s+(?:version\s+)?([0-9.]+))?[:\s.]+(.+?)(?:\n|$)/im);return i?{version:i[1],message:i[2].trim()}:null}extractReturnInfo(e){const t=e.match(/:returns?:\s*(.+?)(?=\n:|$)/is);if(t){const e=t[1].trim(),a=e.match(/^([^-–]+?)\s*[-–]\s*(.+)/);return a?{type:a[1].trim(),description:a[2].trim()}:{type:e}}const a=e.match(/:rtype:\s*(.+?)(?=\n:|$)/i);if(a)return{type:a[1].trim()};const i=e.match(/Returns:\s*\n\s+([^\n]+?):\s*(.+)/i);if(i)return{type:i[1].trim(),description:i[2].trim()};const p=e.match(/->\s*([^:\n]+)(?::|$)/);return p?{type:p[1].trim()}:null}findRelatedSymbols(e,t){const a=[];if(t){const i=(0,y.getRelatedMethodsForMethod)(t,e);for(const e of i.slice(0,5))a.push({name:`${t}.${e.name}`,description:e.description,type:"method"})}return a}getDocUrlForSymbol(e){const{MAP:t}=a(2145);if(e in t){const a=t[e],i="https://docs.python.org/3/"+a.url;return a.anchor?`${i}#${a.anchor}`:i}return null}}},4823:e=>{const t=new Uint32Array((()=>{let e,t=[];for(var a=0;a<256;a++){e=a;for(var i=0;i<8;i++)e=1&e?3988292384^e>>>1:e>>>1;t[a]=e}return t})());e.exports=(e,a,i,p)=>{const r=t,n=p+i;e^=-1;for(let t=p;t<n;t++)e=e>>>8^r[255&(e^a[t])];return-1^e}},4876:e=>{e.exports=require("punycode")},5097:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BoundedCache=void 0;const i=a(4417);t.BoundedCache=class{constructor(e){this.options=e,this.cache=new Map,this.accessOrder=[],this.logger=i.Logger.getInstance(),this.logger.debug(`BoundedCache created with maxSize=${e.maxSize}, ttl=${e.ttl||"none"}`)}get(e){const t=this.cache.get(e);if(t)return this.options.ttl&&Date.now()-t.timestamp>this.options.ttl?(this.logger.debug("Cache entry expired, removing"),void this.delete(e)):(t.accessCount++,t.lastAccessed=Date.now(),this.updateAccessOrder(e),t.value)}set(e,t){const a=Date.now();if(this.cache.has(e)){const i=this.cache.get(e);return i.value=t,i.timestamp=a,i.lastAccessed=a,this.updateAccessOrder(e),this}this.cache.size>=this.options.maxSize&&this.evictLRU();const i={value:t,timestamp:a,accessCount:0,lastAccessed:a};return this.cache.set(e,i),this.accessOrder.push(e),this}has(e){if(!this.cache.has(e))return!1;if(this.options.ttl){const t=this.cache.get(e);if(Date.now()-t.timestamp>this.options.ttl)return this.delete(e),!1}return!0}delete(e){const t=this.cache.delete(e);return t&&(this.accessOrder=this.accessOrder.filter(t=>t!==e)),t}clear(){this.cache.clear(),this.accessOrder=[],this.logger.debug("Cache cleared")}get size(){return this.cache.size}keys(){return this.cache.keys()}values(){return Array.from(this.cache.values()).map(e=>e.value)[Symbol.iterator]()}getStats(){let e=0,t=Date.now(),a=0;for(const i of this.cache.values())e+=i.accessCount,t=Math.min(t,i.timestamp),a=Math.max(a,i.timestamp);return{size:this.cache.size,maxSize:this.options.maxSize,hitRate:this.cache.size>0?e/this.cache.size:0,oldestEntry:t,newestEntry:a}}cleanup(){if(!this.options.ttl)return 0;const e=Date.now();let t=0;for(const[a,i]of this.cache.entries())e-i.timestamp>this.options.ttl&&(this.delete(a),t++);return t>0&&this.logger.debug(`Cleaned up ${t} expired cache entries`),t}evictLRU(){if(0===this.accessOrder.length)return;const e=this.accessOrder[0];this.logger.debug(`Evicting LRU entry: ${String(e)}`),this.delete(e)}updateAccessOrder(e){this.accessOrder=this.accessOrder.filter(t=>t!==e),this.accessOrder.push(e)}startPeriodicCleanup(e=6e4){if(!this.options.ttl)throw new Error("TTL must be configured to use periodic cleanup");return this.logger.debug(`Starting periodic cleanup every ${e}ms`),setInterval(()=>{this.cleanup()},e)}}},5259:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PackageDetector=void 0;const i=a(5317),p=a(1943),r=a(6928),n=a(9023),s=a(1398),d=a(3029),o=a(4417),l=(0,n.promisify)(i.exec);t.PackageDetector=class{constructor(){this.CACHE_TTL=6e4,this.hasShownErrorNotification=!1,this.logger=o.Logger.getInstance(),this.packageCache=new Map}async detectPythonEnvironment(){try{const e=s.extensions.getExtension("ms-python.python");if(e){e.isActive||await e.activate();const t=s.workspace.getConfiguration("python").get("defaultInterpreterPath");if(t){const e=this.detectEnvironmentType(t),a=await this.getPythonVersion(t);return this.logger.debug(`Detected environment: ${t} (${e}) - Python ${a}`),{path:t,type:e,version:a}}}return await this.detectFromWorkspace()}catch(e){return this.logger.error("Error detecting Python environment",e),null}}detectEnvironmentType(e){const t=e.toLowerCase();return t.includes("conda")||t.includes("anaconda")||t.includes("miniconda")?"conda":t.includes("venv")||t.includes(".venv")||t.includes("virtualenv")?"venv":t.includes(".pyenv")||t.includes("pyenv")?"pyenv":t.includes("/usr/")||t.includes("/System/")||t.startsWith("C:\\Python")?"system":"unknown"}async getPythonVersion(e){try{const{stdout:t}=await l(`"${e}" --version`),a=t.match(/Python (\d+\.\d+)/);if(a)return a[1]}catch(e){this.logger.error("Error getting Python version",e)}return"3.12"}async detectFromWorkspace(){const e=s.workspace.workspaceFolders;if(!e)return null;for(const t of e){const e=[r.join(t.uri.fsPath,"venv","bin","python"),r.join(t.uri.fsPath,".venv","bin","python"),r.join(t.uri.fsPath,"env","bin","python"),r.join(t.uri.fsPath,"venv","Scripts","python.exe"),r.join(t.uri.fsPath,".venv","Scripts","python.exe")];for(const t of e)try{return await p.access(t),{path:t,type:"venv",version:await this.getPythonVersion(t)}}catch{}}return null}async getInstalledPackages(e){const t=e,a=this.packageCache.get(t);if(a&&Date.now()-a.timestamp<this.CACHE_TTL)return this.logger.debug(`Using cached package list (${a.packages.length} packages)`),a.packages;this.logger.debug(`Fetching installed packages from: ${e}`);try{const{stdout:a}=await l(`"${e}" -m pip list --format json`,{timeout:1e4}),i=JSON.parse(a).map(e=>({name:e.name.toLowerCase(),version:e.version,location:e.location}));return this.logger.debug(`Found ${i.length} installed packages`),this.packageCache.set(t,{packages:i,timestamp:Date.now()}),i}catch(t){if(this.logger.error("Error fetching installed packages",t),!this.hasShownErrorNotification){this.hasShownErrorNotification=!0;let e="Python Hover: Package detection failed. ",a="";t.message&&t.message.includes("pip")?(e+="pip may not be available in this Python environment.",a="Install pip or use a Python environment with pip installed."):t.message&&t.message.includes("timeout")?(e+="Package detection timed out.",a="Try again later or check your Python environment."):(e+="Unable to detect installed packages.",a="Check Python extension settings and ensure Python is configured correctly."),d.ErrorNotifier.showWarningWithRetry(`${e} ${a}`,()=>{this.hasShownErrorNotification=!1,this.clearCache()},"python.defaultInterpreterPath")}return await this.getPackagesFromSitePackages(e)}}async getPackagesFromSitePackages(e){try{const{stdout:t}=await l(`"${e}" -c "import site; print(site.getsitepackages()[0])"`),a=t.trim(),i=[],n=await p.readdir(a);for(const e of n)if(e.endsWith(".dist-info")){const t=e.split("-")[0].toLowerCase(),n=r.join(a,e,"METADATA");try{const e=(await p.readFile(n,"utf-8")).match(/^Version:\s*(.+)$/m);e&&i.push({name:t,version:e[1].trim(),location:a})}catch{}}return this.logger.debug(`Found ${i.length} packages from site-packages`),i}catch(e){return this.logger.error("Error reading site-packages",e),[]}}async isPackageInstalled(e,t){return(await this.getInstalledPackages(e)).find(e=>e.name===t.toLowerCase())||null}async getPackageVersion(e,t){const a=await this.isPackageInstalled(e,t);return a?a.version:null}clearCache(){this.packageCache.clear(),this.logger.info("Package cache cleared")}getCacheStats(){return{size:this.packageCache.size,entries:Array.from(this.packageCache.keys())}}}},5317:e=>{e.exports=require("child_process")},5334:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.LibraryDiscovery=void 0;const i=a(4417),p=a(5766);t.LibraryDiscovery=class{constructor(e,t){this.cache=new Map,this.CACHE_TTL=864e5,this.MIN_INVENTORY_SIZE=1024,this.logger=i.Logger.getInstance(),this.packageDetector=e,this.pypiService=t||new p.PyPIService}async discoverLibrary(e,t){if(["object","str","int","float","list","dict","tuple","set","frozenset","bool","bytes","bytearray","type","None","Exception","BaseException"].includes(e))return this.logger.debug(`Skipping built-in type: ${e}`),null;const a=this.cache.get(e);if(void 0!==a&&Date.now()-(a?.discoveredAt||0)<this.CACHE_TTL)return this.logger.debug(`Using cached discovery for ${e}`),a;this.logger.info(`Discovering documentation for ${e}`);try{const t=await this.tryPyPI(e);if(t)return this.cache.set(e,t),t;const a=await this.tryReadTheDocs(e);return a?(this.cache.set(e,a),a):(this.logger.info(`Could not discover documentation for ${e}`),this.cache.set(e,null),null)}catch(t){return this.logger.debug(`Discovery error for ${e}:`,t),this.cache.set(e,null),null}}async tryPyPI(e){try{this.logger.debug(`  📦 Trying PyPI for ${e}...`);const t=await this.pypiService.fetchPackageInfo(e);if(!t)return this.logger.debug(`  ❌ No PyPI info found for ${e}`),null;const a=[];t.docUrl&&a.push(t.docUrl),t.homeUrl&&a.push(t.homeUrl),t.projectUrls&&Object.values(t.projectUrls).forEach(e=>{e&&!a.includes(e)&&a.push(e)}),this.logger.debug(`  📄 Found ${a.length} doc URL(s) in PyPI metadata`),a.length>0&&this.logger.debug(`  🔗 URLs: ${a.join(", ")}`);for(const i of a){this.logger.debug(`  🔍 Checking ${i}...`);const a=await this.findInventory(i);if(a)return this.logger.debug(`  ✅ Found ${e} from PyPI: ${a}`),{name:e,version:t.version,inventoryUrl:a,docBaseUrl:this.extractBaseUrl(a),discoveredAt:Date.now(),source:"pypi"}}}catch(t){this.logger.debug(`  ❌ PyPI lookup failed for ${e}: ${t}`)}return null}async tryReadTheDocs(e){this.logger.debug(`  📚 Trying ReadTheDocs patterns for ${e}...`);const t=e.toLowerCase().replace(/_/g,"-"),a=[`https://${t}.readthedocs.io/en/stable/objects.inv`,`https://${t}.readthedocs.io/en/latest/objects.inv`,`https://docs.${t}.org/en/stable/objects.inv`,`https://docs.${t}.io/en/stable/objects.inv`,`https://${t}.org/en/stable/objects.inv`,`https://${t}.org/objects.inv`];for(const t of a)if(this.logger.debug(`  🔍 Trying: ${t}`),await this.validateInventory(t))return this.logger.debug(`  ✅ Found ${e} at: ${t}`),{name:e,version:"latest",inventoryUrl:t,docBaseUrl:this.extractBaseUrl(t),discoveredAt:Date.now(),source:"readthedocs"};return this.logger.debug(`  ❌ No ReadTheDocs patterns worked for ${e}`),null}async findInventory(e){const t=["/objects.inv","/en/stable/objects.inv","/en/latest/objects.inv","/docs/objects.inv"];for(const a of t){const t=e.replace(/\/$/,"")+a;if(await this.validateInventory(t))return t}return null}async validateInventory(e){try{const t=await fetch(e,{method:"HEAD",headers:{"User-Agent":"VSCode-Python-Hover-Extension"},signal:AbortSignal.timeout(3e3)});if(!t.ok)return this.logger.debug(`    ❌ ${e} returned ${t.status}`),!1;const a=t.headers.get("content-length");if(a){const t=parseInt(a,10);if(t<this.MIN_INVENTORY_SIZE)return this.logger.debug(`    ❌ ${e}: too small (${t} bytes, need >${this.MIN_INVENTORY_SIZE})`),!1;this.logger.debug(`    ✅ ${e}: valid (${t} bytes)`)}if(!a){this.logger.debug("    🔍 No Content-Length, fetching first 2KB...");const t=await fetch(e,{headers:{"User-Agent":"VSCode-Python-Hover-Extension",Range:"bytes=0-2047"},signal:AbortSignal.timeout(3e3)});if(!t.ok)return this.logger.debug(`    ❌ GET request failed: ${t.status}`),!1;const a=await t.arrayBuffer();if(a.byteLength<this.MIN_INVENTORY_SIZE)return this.logger.debug(`    ❌ Too small (${a.byteLength} bytes, need >${this.MIN_INVENTORY_SIZE})`),!1;this.logger.debug(`    ✅ Valid (${a.byteLength} bytes fetched)`)}return!0}catch(e){return this.logger.debug(`    ❌ Error: ${e}`),!1}}extractBaseUrl(e){try{const t=new URL(e),a=t.pathname.split("/");return a.pop(),`${t.origin}${a.join("/")}/`}catch{return e}}clearCache(){this.cache.clear(),this.logger.info("Discovery cache cleared")}getCacheStats(){let e=0,t=0;for(const a of this.cache.values())null===a?t++:e++;return{total:this.cache.size,successful:e,failed:t}}}},5484:(e,t,a)=>{const i=a(4876),p=a(6673),r={ftp:21,file:null,gopher:70,http:80,https:443,ws:80,wss:443},n=Symbol("failure");function s(e){return i.ucs2.decode(e).length}function d(e,t){const a=e[t];return isNaN(a)?void 0:String.fromCodePoint(a)}function o(e){return e>=48&&e<=57}function l(e){return e>=65&&e<=90||e>=97&&e<=122}function m(e){return o(e)||e>=65&&e<=70||e>=97&&e<=102}function c(e){return"."===e||"%2e"===e.toLowerCase()}function h(e){return 2===e.length&&l(e.codePointAt(0))&&(":"===e[1]||"|"===e[1])}function u(e){return void 0!==r[e]}function f(e){return u(e.scheme)}function g(e){let t=e.toString(16).toUpperCase();return 1===t.length&&(t="0"+t),"%"+t}function v(e){return e<=31||e>126}const y=new Set([32,34,35,60,62,63,96,123,125]);function _(e){return v(e)||y.has(e)}const w=new Set([47,58,59,61,64,91,92,93,94,124]);function b(e){return _(e)||w.has(e)}function x(e,t){const a=String.fromCodePoint(e);return t(e)?function(e){const t=new Buffer(e);let a="";for(let e=0;e<t.length;++e)a+=g(t[e]);return a}(a):a}function S(e){let t=10;return e.length>=2&&"0"===e.charAt(0)&&"x"===e.charAt(1).toLowerCase()?(e=e.substring(2),t=16):e.length>=2&&"0"===e.charAt(0)&&(e=e.substring(1),t=8),""===e?0:(10===t?/[^0-9]/:16===t?/[^0-9A-Fa-f]/:/[^0-7]/).test(e)?n:parseInt(e,t)}function T(e,t){if("["===e[0])return"]"!==e[e.length-1]?n:function(e){const t=[0,0,0,0,0,0,0,0];let a=0,p=null,r=0;if(58===(e=i.ucs2.decode(e))[r]){if(58!==e[r+1])return n;r+=2,++a,p=a}for(;r<e.length;){if(8===a)return n;if(58===e[r]){if(null!==p)return n;++r,++a,p=a;continue}let i=0,s=0;for(;s<4&&m(e[r]);)i=16*i+parseInt(d(e,r),16),++r,++s;if(46===e[r]){if(0===s)return n;if(r-=s,a>6)return n;let i=0;for(;void 0!==e[r];){let p=null;if(i>0){if(!(46===e[r]&&i<4))return n;++r}if(!o(e[r]))return n;for(;o(e[r]);){const t=parseInt(d(e,r));if(null===p)p=t;else{if(0===p)return n;p=10*p+t}if(p>255)return n;++r}t[a]=256*t[a]+p,++i,2!==i&&4!==i||++a}if(4!==i)return n;break}if(58===e[r]){if(++r,void 0===e[r])return n}else if(void 0!==e[r])return n;t[a]=i,++a}if(null!==p){let e=a-p;for(a=7;0!==a&&e>0;){const i=t[p+e-1];t[p+e-1]=t[a],t[a]=i,--a,--e}}else if(null===p&&8!==a)return n;return t}(e.substring(1,e.length-1));if(!t)return function(e){if(-1!==e.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/))return n;let t="";const a=i.ucs2.decode(e);for(let e=0;e<a.length;++e)t+=x(a[e],v);return t}(e);const a=function(e){const t=new Buffer(e),a=[];for(let e=0;e<t.length;++e)37!==t[e]?a.push(t[e]):37===t[e]&&m(t[e+1])&&m(t[e+2])?(a.push(parseInt(t.slice(e+1,e+3).toString(),16)),e+=2):a.push(t[e]);return new Buffer(a).toString()}(e),r=p.toASCII(a,!1,p.PROCESSING_OPTIONS.NONTRANSITIONAL,!1);if(null===r)return n;if(-1!==r.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/))return n;const s=function(e){const t=e.split(".");if(""===t[t.length-1]&&t.length>1&&t.pop(),t.length>4)return e;const a=[];for(const i of t){if(""===i)return e;const t=S(i);if(t===n)return e;a.push(t)}for(let e=0;e<a.length-1;++e)if(a[e]>255)return n;if(a[a.length-1]>=Math.pow(256,5-a.length))return n;let i=a.pop(),p=0;for(const e of a)i+=e*Math.pow(256,3-p),++p;return i}(r);return"number"==typeof s||s===n?s:r}function D(e){return"number"==typeof e?function(e){let t="",a=e;for(let e=1;e<=4;++e)t=String(a%256)+t,4!==e&&(t="."+t),a=Math.floor(a/256);return t}(e):e instanceof Array?"["+function(e){let t="";const a=function(e){let t=null,a=1,i=null,p=0;for(let r=0;r<e.length;++r)0!==e[r]?(p>a&&(t=i,a=p),i=null,p=0):(null===i&&(i=r),++p);return p>a&&(t=i,a=p),{idx:t,len:a}}(e).idx;let i=!1;for(let p=0;p<=7;++p)if(!i||0!==e[p]){if(i&&(i=!1),a===p){t+=0===p?"::":":",i=!0;continue}t+=e[p].toString(16),7!==p&&(t+=":")}return t}(e)+"]":e}function E(e){const t=e.path;var a;0!==t.length&&("file"===e.scheme&&1===t.length&&(a=t[0],/^[A-Za-z]:$/.test(a))||t.pop())}function k(e){return""!==e.username||""!==e.password}function C(e,t,a,p,r){if(this.pointer=0,this.input=e,this.base=t||null,this.encodingOverride=a||"utf-8",this.stateOverride=r,this.url=p,this.failure=!1,this.parseError=!1,!this.url){this.url={scheme:"",username:"",password:"",host:null,port:null,path:[],query:null,fragment:null,cannotBeABaseURL:!1};const e=function(e){return e.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g,"")}(this.input);e!==this.input&&(this.parseError=!0),this.input=e}const s=function(e){return e.replace(/\u0009|\u000A|\u000D/g,"")}(this.input);for(s!==this.input&&(this.parseError=!0),this.input=s,this.state=r||"scheme start",this.buffer="",this.atFlag=!1,this.arrFlag=!1,this.passwordTokenSeenFlag=!1,this.input=i.ucs2.decode(this.input);this.pointer<=this.input.length;++this.pointer){const e=this.input[this.pointer],t=isNaN(e)?void 0:String.fromCodePoint(e),a=this["parse "+this.state](e,t);if(!a)break;if(a===n){this.failure=!0;break}}}C.prototype["parse scheme start"]=function(e,t){if(l(e))this.buffer+=t.toLowerCase(),this.state="scheme";else{if(this.stateOverride)return this.parseError=!0,n;this.state="no scheme",--this.pointer}return!0},C.prototype["parse scheme"]=function(e,t){if(function(e){return l(e)||o(e)}(e)||43===e||45===e||46===e)this.buffer+=t.toLowerCase();else if(58===e){if(this.stateOverride){if(f(this.url)&&!u(this.buffer))return!1;if(!f(this.url)&&u(this.buffer))return!1;if((k(this.url)||null!==this.url.port)&&"file"===this.buffer)return!1;if("file"===this.url.scheme&&(""===this.url.host||null===this.url.host))return!1}if(this.url.scheme=this.buffer,this.buffer="",this.stateOverride)return!1;"file"===this.url.scheme?(47===this.input[this.pointer+1]&&47===this.input[this.pointer+2]||(this.parseError=!0),this.state="file"):f(this.url)&&null!==this.base&&this.base.scheme===this.url.scheme?this.state="special relative or authority":f(this.url)?this.state="special authority slashes":47===this.input[this.pointer+1]?(this.state="path or authority",++this.pointer):(this.url.cannotBeABaseURL=!0,this.url.path.push(""),this.state="cannot-be-a-base-URL path")}else{if(this.stateOverride)return this.parseError=!0,n;this.buffer="",this.state="no scheme",this.pointer=-1}return!0},C.prototype["parse no scheme"]=function(e){return null===this.base||this.base.cannotBeABaseURL&&35!==e?n:(this.base.cannotBeABaseURL&&35===e?(this.url.scheme=this.base.scheme,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.url.cannotBeABaseURL=!0,this.state="fragment"):"file"===this.base.scheme?(this.state="file",--this.pointer):(this.state="relative",--this.pointer),!0)},C.prototype["parse special relative or authority"]=function(e){return 47===e&&47===this.input[this.pointer+1]?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="relative",--this.pointer),!0},C.prototype["parse path or authority"]=function(e){return 47===e?this.state="authority":(this.state="path",--this.pointer),!0},C.prototype["parse relative"]=function(e){return this.url.scheme=this.base.scheme,isNaN(e)?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query):47===e?this.state="relative slash":63===e?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):35===e?(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):f(this.url)&&92===e?(this.parseError=!0,this.state="relative slash"):(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.url.path=this.base.path.slice(0,this.base.path.length-1),this.state="path",--this.pointer),!0},C.prototype["parse relative slash"]=function(e){return!f(this.url)||47!==e&&92!==e?47===e?this.state="authority":(this.url.username=this.base.username,this.url.password=this.base.password,this.url.host=this.base.host,this.url.port=this.base.port,this.state="path",--this.pointer):(92===e&&(this.parseError=!0),this.state="special authority ignore slashes"),!0},C.prototype["parse special authority slashes"]=function(e){return 47===e&&47===this.input[this.pointer+1]?(this.state="special authority ignore slashes",++this.pointer):(this.parseError=!0,this.state="special authority ignore slashes",--this.pointer),!0},C.prototype["parse special authority ignore slashes"]=function(e){return 47!==e&&92!==e?(this.state="authority",--this.pointer):this.parseError=!0,!0},C.prototype["parse authority"]=function(e,t){if(64===e){this.parseError=!0,this.atFlag&&(this.buffer="%40"+this.buffer),this.atFlag=!0;const e=s(this.buffer);for(let t=0;t<e;++t){const e=this.buffer.codePointAt(t);if(58===e&&!this.passwordTokenSeenFlag){this.passwordTokenSeenFlag=!0;continue}const a=x(e,b);this.passwordTokenSeenFlag?this.url.password+=a:this.url.username+=a}this.buffer=""}else if(isNaN(e)||47===e||63===e||35===e||f(this.url)&&92===e){if(this.atFlag&&""===this.buffer)return this.parseError=!0,n;this.pointer-=s(this.buffer)+1,this.buffer="",this.state="host"}else this.buffer+=t;return!0},C.prototype["parse hostname"]=C.prototype["parse host"]=function(e,t){if(this.stateOverride&&"file"===this.url.scheme)--this.pointer,this.state="file host";else if(58!==e||this.arrFlag)if(isNaN(e)||47===e||63===e||35===e||f(this.url)&&92===e){if(--this.pointer,f(this.url)&&""===this.buffer)return this.parseError=!0,n;if(this.stateOverride&&""===this.buffer&&(k(this.url)||null!==this.url.port))return this.parseError=!0,!1;const e=T(this.buffer,f(this.url));if(e===n)return n;if(this.url.host=e,this.buffer="",this.state="path start",this.stateOverride)return!1}else 91===e?this.arrFlag=!0:93===e&&(this.arrFlag=!1),this.buffer+=t;else{if(""===this.buffer)return this.parseError=!0,n;const e=T(this.buffer,f(this.url));if(e===n)return n;if(this.url.host=e,this.buffer="",this.state="port","hostname"===this.stateOverride)return!1}return!0},C.prototype["parse port"]=function(e,t){if(o(e))this.buffer+=t;else{if(!(isNaN(e)||47===e||63===e||35===e||f(this.url)&&92===e||this.stateOverride))return this.parseError=!0,n;if(""!==this.buffer){const e=parseInt(this.buffer);if(e>Math.pow(2,16)-1)return this.parseError=!0,n;this.url.port=e===(a=this.url.scheme,r[a])?null:e,this.buffer=""}if(this.stateOverride)return!1;this.state="path start",--this.pointer}var a;return!0};const N=new Set([47,92,63,35]);C.prototype["parse file"]=function(e){var t,a;return this.url.scheme="file",47===e||92===e?(92===e&&(this.parseError=!0),this.state="file slash"):null!==this.base&&"file"===this.base.scheme?isNaN(e)?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query):63===e?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query="",this.state="query"):35===e?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),this.url.query=this.base.query,this.url.fragment="",this.state="fragment"):(this.input.length-this.pointer-1==0||(t=e,a=this.input[this.pointer+1],!l(t)||58!==a&&124!==a)||this.input.length-this.pointer-1>=2&&!N.has(this.input[this.pointer+2])?(this.url.host=this.base.host,this.url.path=this.base.path.slice(),E(this.url)):this.parseError=!0,this.state="path",--this.pointer):(this.state="path",--this.pointer),!0},C.prototype["parse file slash"]=function(e){var t;return 47===e||92===e?(92===e&&(this.parseError=!0),this.state="file host"):(null!==this.base&&"file"===this.base.scheme&&(2===(t=this.base.path[0]).length&&l(t.codePointAt(0))&&":"===t[1]?this.url.path.push(this.base.path[0]):this.url.host=this.base.host),this.state="path",--this.pointer),!0},C.prototype["parse file host"]=function(e,t){if(isNaN(e)||47===e||92===e||63===e||35===e)if(--this.pointer,!this.stateOverride&&h(this.buffer))this.parseError=!0,this.state="path";else if(""===this.buffer){if(this.url.host="",this.stateOverride)return!1;this.state="path start"}else{let e=T(this.buffer,f(this.url));if(e===n)return n;if("localhost"===e&&(e=""),this.url.host=e,this.stateOverride)return!1;this.buffer="",this.state="path start"}else this.buffer+=t;return!0},C.prototype["parse path start"]=function(e){return f(this.url)?(92===e&&(this.parseError=!0),this.state="path",47!==e&&92!==e&&--this.pointer):this.stateOverride||63!==e?this.stateOverride||35!==e?void 0!==e&&(this.state="path",47!==e&&--this.pointer):(this.url.fragment="",this.state="fragment"):(this.url.query="",this.state="query"),!0},C.prototype["parse path"]=function(e){if(isNaN(e)||47===e||f(this.url)&&92===e||!this.stateOverride&&(63===e||35===e)){if(f(this.url)&&92===e&&(this.parseError=!0),".."===(t=(t=this.buffer).toLowerCase())||"%2e."===t||".%2e"===t||"%2e%2e"===t?(E(this.url),47===e||f(this.url)&&92===e||this.url.path.push("")):!c(this.buffer)||47===e||f(this.url)&&92===e?c(this.buffer)||("file"===this.url.scheme&&0===this.url.path.length&&h(this.buffer)&&(""!==this.url.host&&null!==this.url.host&&(this.parseError=!0,this.url.host=""),this.buffer=this.buffer[0]+":"),this.url.path.push(this.buffer)):this.url.path.push(""),this.buffer="","file"===this.url.scheme&&(void 0===e||63===e||35===e))for(;this.url.path.length>1&&""===this.url.path[0];)this.parseError=!0,this.url.path.shift();63===e&&(this.url.query="",this.state="query"),35===e&&(this.url.fragment="",this.state="fragment")}else 37!==e||m(this.input[this.pointer+1])&&m(this.input[this.pointer+2])||(this.parseError=!0),this.buffer+=x(e,_);var t;return!0},C.prototype["parse cannot-be-a-base-URL path"]=function(e){return 63===e?(this.url.query="",this.state="query"):35===e?(this.url.fragment="",this.state="fragment"):(isNaN(e)||37===e||(this.parseError=!0),37!==e||m(this.input[this.pointer+1])&&m(this.input[this.pointer+2])||(this.parseError=!0),isNaN(e)||(this.url.path[0]=this.url.path[0]+x(e,v))),!0},C.prototype["parse query"]=function(e,t){if(isNaN(e)||!this.stateOverride&&35===e){f(this.url)&&"ws"!==this.url.scheme&&"wss"!==this.url.scheme||(this.encodingOverride="utf-8");const t=new Buffer(this.buffer);for(let e=0;e<t.length;++e)t[e]<33||t[e]>126||34===t[e]||35===t[e]||60===t[e]||62===t[e]?this.url.query+=g(t[e]):this.url.query+=String.fromCodePoint(t[e]);this.buffer="",35===e&&(this.url.fragment="",this.state="fragment")}else 37!==e||m(this.input[this.pointer+1])&&m(this.input[this.pointer+2])||(this.parseError=!0),this.buffer+=t;return!0},C.prototype["parse fragment"]=function(e){return isNaN(e)||(0===e?this.parseError=!0:(37!==e||m(this.input[this.pointer+1])&&m(this.input[this.pointer+2])||(this.parseError=!0),this.url.fragment+=x(e,v))),!0},e.exports.serializeURL=function(e,t){let a=e.scheme+":";if(null!==e.host?(a+="//",""===e.username&&""===e.password||(a+=e.username,""!==e.password&&(a+=":"+e.password),a+="@"),a+=D(e.host),null!==e.port&&(a+=":"+e.port)):null===e.host&&"file"===e.scheme&&(a+="//"),e.cannotBeABaseURL)a+=e.path[0];else for(const t of e.path)a+="/"+t;return null!==e.query&&(a+="?"+e.query),t||null===e.fragment||(a+="#"+e.fragment),a},e.exports.serializeURLOrigin=function(t){switch(t.scheme){case"blob":try{return e.exports.serializeURLOrigin(e.exports.parseURL(t.path[0]))}catch(e){return"null"}case"ftp":case"gopher":case"http":case"https":case"ws":case"wss":return function(e){let t=e.scheme+"://";return t+=D(e.host),null!==e.port&&(t+=":"+e.port),t}({scheme:t.scheme,host:t.host,port:t.port});case"file":return"file://";default:return"null"}},e.exports.basicURLParse=function(e,t){void 0===t&&(t={});const a=new C(e,t.baseURL,t.encodingOverride,t.url,t.stateOverride);return a.failure?"failure":a.url},e.exports.setTheUsername=function(e,t){e.username="";const a=i.ucs2.decode(t);for(let t=0;t<a.length;++t)e.username+=x(a[t],b)},e.exports.setThePassword=function(e,t){e.password="";const a=i.ucs2.decode(t);for(let t=0;t<a.length;++t)e.password+=x(a[t],b)},e.exports.serializeHost=D,e.exports.cannotHaveAUsernamePasswordPort=function(e){return null===e.host||""===e.host||e.cannotBeABaseURL||"file"===e.scheme},e.exports.serializeInteger=function(e){return String(e)},e.exports.parseURL=function(t,a){return void 0===a&&(a={}),e.exports.basicURLParse(t,{baseURL:a.baseURL,encodingOverride:a.encodingOverride})}},5585:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TYPE_METHOD_MAP=void 0,t.getRelatedMethods=function(e){return t.TYPE_METHOD_MAP[e]||[]},t.getRelatedMethodsForMethod=function(e,a){return e&&a&&e in t.TYPE_METHOD_MAP?t.TYPE_METHOD_MAP[e].filter(e=>e.name!==a):[]},t.TYPE_METHOD_MAP={str:[{name:"upper",description:"Convert to uppercase"},{name:"lower",description:"Convert to lowercase"},{name:"strip",description:"Remove leading/trailing whitespace"},{name:"split",description:"Split into list by delimiter"},{name:"join",description:"Join iterable with string as delimiter"},{name:"replace",description:"Replace substring"},{name:"startswith",description:"Check if string starts with prefix"},{name:"endswith",description:"Check if string ends with suffix"}],list:[{name:"append",description:"Add item to end"},{name:"extend",description:"Add items from iterable to end"},{name:"insert",description:"Insert item at position"},{name:"remove",description:"Remove first occurrence of value"},{name:"pop",description:"Remove and return item at index"},{name:"sort",description:"Sort in place"},{name:"reverse",description:"Reverse in place"}],dict:[{name:"get",description:"Get value for key with optional default"},{name:"items",description:"View of (key, value) pairs"},{name:"keys",description:"View of dictionary keys"},{name:"values",description:"View of dictionary values"},{name:"update",description:"Update with key/value pairs from another mapping"},{name:"pop",description:"Remove and return value for key"}],set:[{name:"add",description:"Add element to set"},{name:"remove",description:"Remove element; raises KeyError if not found"},{name:"discard",description:"Remove element if present"},{name:"union",description:"Return union of sets"},{name:"intersection",description:"Return intersection of sets"},{name:"difference",description:"Return set difference"}]}},5616:e=>{var t={};function a(e){return e<0?-1:1}function i(e,t){t.unsigned||--e;const i=t.unsigned?0:-Math.pow(2,e),p=Math.pow(2,e)-1,r=t.moduloBitLength?Math.pow(2,t.moduloBitLength):Math.pow(2,e),n=t.moduloBitLength?Math.pow(2,t.moduloBitLength-1):Math.pow(2,e-1);return function(e,s){s||(s={});let d=+e;if(s.enforceRange){if(!Number.isFinite(d))throw new TypeError("Argument is not a finite number");if(d=a(d)*Math.floor(Math.abs(d)),d<i||d>p)throw new TypeError("Argument is not in byte range");return d}if(!isNaN(d)&&s.clamp)return d=function(e){return e%1!=.5||1&e?Math.round(e):Math.floor(e)}(d),d<i&&(d=i),d>p&&(d=p),d;if(!Number.isFinite(d)||0===d)return 0;if(d=a(d)*Math.floor(Math.abs(d)),d%=r,!t.unsigned&&d>=n)return d-r;if(t.unsigned)if(d<0)d+=r;else if(-0===d)return 0;return d}}e.exports=t,t.void=function(){},t.boolean=function(e){return!!e},t.byte=i(8,{unsigned:!1}),t.octet=i(8,{unsigned:!0}),t.short=i(16,{unsigned:!1}),t["unsigned short"]=i(16,{unsigned:!0}),t.long=i(32,{unsigned:!1}),t["unsigned long"]=i(32,{unsigned:!0}),t["long long"]=i(32,{unsigned:!1,moduloBitLength:64}),t["unsigned long long"]=i(32,{unsigned:!0,moduloBitLength:64}),t.double=function(e){const t=+e;if(!Number.isFinite(t))throw new TypeError("Argument is not a finite floating-point value");return t},t["unrestricted double"]=function(e){const t=+e;if(isNaN(t))throw new TypeError("Argument is NaN");return t},t.float=t.double,t["unrestricted float"]=t["unrestricted double"],t.DOMString=function(e,t){return t||(t={}),t.treatNullAsEmptyString&&null===e?"":String(e)},t.ByteString=function(e,t){const a=String(e);let i;for(let e=0;void 0!==(i=a.codePointAt(e));++e)if(i>255)throw new TypeError("Argument is not a valid bytestring");return a},t.USVString=function(e){const t=String(e),a=t.length,i=[];for(let e=0;e<a;++e){const p=t.charCodeAt(e);if(p<55296||p>57343)i.push(String.fromCodePoint(p));else if(56320<=p&&p<=57343)i.push(String.fromCodePoint(65533));else if(e===a-1)i.push(String.fromCodePoint(65533));else{const a=t.charCodeAt(e+1);if(56320<=a&&a<=57343){const t=1023&p,r=1023&a;i.push(String.fromCodePoint(65536+1024*t+r)),++e}else i.push(String.fromCodePoint(65533))}}return i.join("")},t.Date=function(e,t){if(!(e instanceof Date))throw new TypeError("Argument is not a Date object");if(!isNaN(e))return e},t.RegExp=function(e,t){return e instanceof RegExp||(e=new RegExp(e)),e}},5766:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PyPIService=void 0;const i=a(4417);t.PyPIService=class{constructor(){this.CACHE_TTL=864e5,this.REQUEST_TIMEOUT=5e3,this.logger=i.Logger.getInstance(),this.cache=new Map}async fetchPackageInfo(e){const t=this.cache.get(e);if(t){const a=Date.now()-t.timestamp;if(a<this.CACHE_TTL)return this.logger.debug(`📦 Using cached PyPI data for ${e} (age: ${Math.round(a/1e3)}s)`),t.data}try{this.logger.debug(`📦 Fetching PyPI info for ${e}...`);const t=await fetch(`https://pypi.org/pypi/${e}/json`,{headers:{"User-Agent":"VSCode-Python-Hover-Extension"},signal:AbortSignal.timeout(this.REQUEST_TIMEOUT)});if(!t.ok)return this.logger.debug(`❌ PyPI returned ${t.status} for ${e}`),this.cache.set(e,{data:null,timestamp:Date.now()}),null;const a=await t.json(),i=this.parsePackageInfo(e,a);return this.cache.set(e,{data:i,timestamp:Date.now()}),i&&this.logger.debug(`✅ Got PyPI info for ${e}: "${i.summary?.substring(0,50)}..."${i.docUrl?` (${i.docUrl})`:""}`),i}catch(t){return this.logger.debug(`Failed to fetch PyPI info for ${e}:`,t),this.cache.set(e,{data:null,timestamp:Date.now()}),null}}async fetchSummary(e){const t=await this.fetchPackageInfo(e);return t?.summary||null}async fetchDocUrl(e){const t=await this.fetchPackageInfo(e);return t?.docUrl||null}parsePackageInfo(e,t){try{const a=t.info;if(!a)return null;const i=a.summary||"",p=a.version||"unknown",r=a.author||a.author_email?.split("<")[0].trim(),n=a.license,s=a.requires_python,d=a.project_urls||{},o=this.extractDocumentationUrl(d,a),l=a.home_page||d.Homepage||d.homepage||d["Home Page"]||a.project_url;return i&&i.length>10?{name:e,version:p,summary:i,author:r,license:n,requires_python:s,docUrl:o,homeUrl:l,projectUrls:d}:null}catch(t){return this.logger.debug(`Error parsing PyPI data for ${e}:`,t),null}}extractDocumentationUrl(e,t){const a=["Documentation","Docs","documentation","docs","Read the Docs","ReadTheDocs","readthedocs"];for(const t of a)if(e[t])return e[t];for(const[t,a]of Object.entries(e)){const e=t.toLowerCase();if(e.includes("doc")||e.includes("manual")||e.includes("guide"))return a}return t.docs_url||t.project_url}clearCache(){this.cache.clear(),this.logger.debug("PyPI cache cleared")}getCacheStats(){return{size:this.cache.size,keys:Array.from(this.cache.keys())}}}},6648:(e,t,a)=>{const i=a(5616),p=a(6892),r=a(7079),n=p.implSymbol;function s(t){if(!this||this[n]||!(this instanceof s))throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");if(arguments.length<1)throw new TypeError("Failed to construct 'URL': 1 argument required, but only "+arguments.length+" present.");const a=[];for(let e=0;e<arguments.length&&e<2;++e)a[e]=arguments[e];a[0]=i.USVString(a[0]),void 0!==a[1]&&(a[1]=i.USVString(a[1])),e.exports.setup(this,a)}s.prototype.toJSON=function(){if(!this||!e.exports.is(this))throw new TypeError("Illegal invocation");const t=[];for(let e=0;e<arguments.length&&e<0;++e)t[e]=arguments[e];return this[n].toJSON.apply(this[n],t)},Object.defineProperty(s.prototype,"href",{get(){return this[n].href},set(e){e=i.USVString(e),this[n].href=e},enumerable:!0,configurable:!0}),s.prototype.toString=function(){if(!this||!e.exports.is(this))throw new TypeError("Illegal invocation");return this.href},Object.defineProperty(s.prototype,"origin",{get(){return this[n].origin},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"protocol",{get(){return this[n].protocol},set(e){e=i.USVString(e),this[n].protocol=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"username",{get(){return this[n].username},set(e){e=i.USVString(e),this[n].username=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"password",{get(){return this[n].password},set(e){e=i.USVString(e),this[n].password=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"host",{get(){return this[n].host},set(e){e=i.USVString(e),this[n].host=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"hostname",{get(){return this[n].hostname},set(e){e=i.USVString(e),this[n].hostname=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"port",{get(){return this[n].port},set(e){e=i.USVString(e),this[n].port=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"pathname",{get(){return this[n].pathname},set(e){e=i.USVString(e),this[n].pathname=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"search",{get(){return this[n].search},set(e){e=i.USVString(e),this[n].search=e},enumerable:!0,configurable:!0}),Object.defineProperty(s.prototype,"hash",{get(){return this[n].hash},set(e){e=i.USVString(e),this[n].hash=e},enumerable:!0,configurable:!0}),e.exports={is:e=>!!e&&e[n]instanceof r.implementation,create(e,t){let a=Object.create(s.prototype);return this.setup(a,e,t),a},setup(e,t,a){a||(a={}),a.wrapper=e,e[n]=new r.implementation(t,a),e[n][p.wrapperSymbol]=e},interface:s,expose:{Window:{URL:s},Worker:{URL:s}}}},6673:(e,t,a)=>{var i=a(4876),p=a(2472),r={TRANSITIONAL:0,NONTRANSITIONAL:1};function n(e){return e.split("\0").map(function(e){return e.normalize("NFC")}).join("\0")}function s(e){for(var t=0,a=p.length-1;t<=a;){var i=Math.floor((t+a)/2),r=p[i];if(r[0][0]<=e&&r[0][1]>=e)return r;r[0][0]>e?a=i-1:t=i+1}return null}var d=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function o(e){return e.replace(d,"_").length}var l=/[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;function m(e,t){"xn--"===e.substr(0,4)&&(e=i.toUnicode(e));var a=!1;(n(e)!==e||"-"===e[3]&&"-"===e[4]||"-"===e[0]||"-"===e[e.length-1]||-1!==e.indexOf(".")||0===e.search(l))&&(a=!0);for(var p=o(e),d=0;d<p;++d){var m=s(e.codePointAt(d));if(c===r.TRANSITIONAL&&"valid"!==m[1]||c===r.NONTRANSITIONAL&&"valid"!==m[1]&&"deviation"!==m[1]){a=!0;break}}return{label:e,error:a}}function c(e,t,a){var i=function(e,t,a){for(var i=!1,p="",n=o(e),d=0;d<n;++d){var l=e.codePointAt(d),m=s(l);switch(m[1]){case"disallowed":i=!0,p+=String.fromCodePoint(l);break;case"ignored":break;case"mapped":p+=String.fromCodePoint.apply(String,m[2]);break;case"deviation":p+=a===r.TRANSITIONAL?String.fromCodePoint.apply(String,m[2]):String.fromCodePoint(l);break;case"valid":p+=String.fromCodePoint(l);break;case"disallowed_STD3_mapped":t?(i=!0,p+=String.fromCodePoint(l)):p+=String.fromCodePoint.apply(String,m[2]);break;case"disallowed_STD3_valid":t&&(i=!0),p+=String.fromCodePoint(l)}}return{string:p,error:i}}(e,t,a);i.string=n(i.string);for(var p=i.string.split("."),d=0;d<p.length;++d)try{var l=m(p[d]);p[d]=l.label,i.error=i.error||l.error}catch(e){i.error=!0}return{string:p.join("."),error:i.error}}e.exports.toASCII=function(e,t,a,p){var r=c(e,t,a),n=r.string.split(".");if(n=n.map(function(e){try{return i.toASCII(e)}catch(t){return r.error=!0,e}}),p){var s=n.slice(0,n.length-1).join(".").length;(s.length>253||0===s.length)&&(r.error=!0);for(var d=0;d<n.length;++d)if(n.length>63||0===n.length){r.error=!0;break}}return r.error?null:n.join(".")},e.exports.toUnicode=function(e,t){var a=c(e,t,r.NONTRANSITIONAL);return{domain:a.string,error:a.error}},e.exports.PROCESSING_OPTIONS=r},6699:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.THIRD_PARTY_LIBRARIES=void 0,t.getImportedLibraries=r,t.getImportedLibrariesSet=function(e,t){const a=r(e,t);return new Set(a.values())},t.getThirdPartyDoc=function(e,a){if(!e||!a||"string"!=typeof e||"string"!=typeof a)return null;const i=t.THIRD_PARTY_LIBRARIES[e];return i&&i[a]||null};const i=a(4417);function p(e,a){return!!t.THIRD_PARTY_LIBRARIES[e]||(!(!a||void 0===a.customLibraries||!(a.customLibraries||[]).some(t=>t.name===e))||!new Set(["os","sys","json","time","datetime","math","random","re","collections","itertools","functools","operator","pathlib","typing","abc","enum","dataclasses","copy","pickle","io","csv","xml","html","urllib","http","email","threading","multiprocessing","subprocess","socket","ssl","logging","unittest","argparse","configparser","tempfile","shutil","glob","fnmatch","zipfile","tarfile","gzip","sqlite3","hashlib","hmac","secrets","uuid","struct"]).has(e))}function r(e,t){const a=new Map,r=e.split("\n");for(const e of r){const r=e.split("#")[0].trim(),n=r.match(/^import\s+(\w+)(?:\s+as\s+(\w+))?$/);if(n){const e=n[1],i=n[2]||e;p(e,t)&&a.set(i,e);continue}const s=r.match(/^from\s+([\w.]+)\s+import\s+(.+)$/);if(s){const e=s[1].split(".")[0],r=s[1],n=s[2];if(p(e,t)){const t=n.split(",").map(e=>e.trim());for(const p of t){const t=p.replace(/[()]/g,"").trim();if(!t||"("===t||")"===t)continue;const n=t.match(/^(\w+)(?:\s+as\s+(\w+))?$/);if(n){const t=n[1],p=n[2]||t;a.set(p,e),i.Logger.getInstance().debug(`Mapped import: ${p} -> ${e} (from ${r})`)}}}continue}const d=r.match(/^import\s+(\w+)$/);if(d){const e=d[1];p(e,t)&&a.set(e,e)}}return a}t.THIRD_PARTY_LIBRARIES={numpy:{array:{name:"numpy.array",description:"Create an array from a Python list or tuple.",example:"import numpy as np\n\n# Create 1D array\narr1d = np.array([1, 2, 3, 4, 5])\nprint(arr1d)  # [1 2 3 4 5]\n\n# Create 2D array\narr2d = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr2d)\n# [[1 2 3]\n#  [4 5 6]]\n\n# Specify dtype\narr_float = np.array([1, 2, 3], dtype=float)\nprint(arr_float)  # [1. 2. 3.]",url:"https://numpy.org/doc/stable/reference/generated/numpy.array.html"},zeros:{name:"numpy.zeros",description:"Return a new array of given shape and type, filled with zeros.",example:"import numpy as np\n\n# 1D array of zeros\nz1 = np.zeros(5)\nprint(z1)  # [0. 0. 0. 0. 0.]\n\n# 2D array of zeros\nz2 = np.zeros((3, 4))\nprint(z2)\n# [[0. 0. 0. 0.]\n#  [0. 0. 0. 0.]\n#  [0. 0. 0. 0.]]\n\n# Integer zeros\nz_int = np.zeros(3, dtype=int)\nprint(z_int)  # [0 0 0]",url:"https://numpy.org/doc/stable/reference/generated/numpy.zeros.html"},ones:{name:"numpy.ones",description:"Return a new array of given shape and type, filled with ones.",example:"import numpy as np\n\n# 1D array of ones\no1 = np.ones(5)\nprint(o1)  # [1. 1. 1. 1. 1.]\n\n# 2D array of ones\no2 = np.ones((3, 4))\nprint(o2)\n# [[1. 1. 1. 1.]\n#  [1. 1. 1. 1.]\n#  [1. 1. 1. 1.]]\n\n# Integer ones\no_int = np.ones(3, dtype=int)\nprint(o_int)  # [1 1 1]",url:"https://numpy.org/doc/stable/reference/generated/numpy.ones.html"},arange:{name:"numpy.arange",description:"Return evenly spaced values within a given interval.",example:"import numpy as np\n\n# Similar to Python's range\narr1 = np.arange(10)\nprint(arr1)  # [0 1 2 3 4 5 6 7 8 9]\n\n# With start and stop\narr2 = np.arange(5, 10)\nprint(arr2)  # [5 6 7 8 9]\n\n# With step\narr3 = np.arange(0, 1, 0.2)\nprint(arr3)  # [0.  0.2 0.4 0.6 0.8]",url:"https://numpy.org/doc/stable/reference/generated/numpy.arange.html"},reshape:{name:"numpy.ndarray.reshape",description:"Gives a new shape to an array without changing its data.",example:"import numpy as np\n\narr = np.arange(12)\nprint(arr)  # [ 0  1  2  3  4  5  6  7  8  9 10 11]\n\n# Reshape to 2D\narr_2d = arr.reshape(3, 4)\nprint(arr_2d)\n# [[ 0  1  2  3]\n#  [ 4  5  6  7]\n#  [ 8  9 10 11]]\n\n# Reshape to 3D\narr_3d = arr.reshape(2, 3, 2)\nprint(arr_3d.shape)  # (2, 3, 2)",url:"https://numpy.org/doc/stable/reference/generated/numpy.reshape.html"}},pandas:{DataFrame:{name:"pandas.DataFrame",description:"Two-dimensional, size-mutable, potentially heterogeneous tabular data. Data structure also contains labeled axes (rows and columns). Arithmetic operations align on both row and column labels. Can be thought of as a dict-like container for Series objects.",parameters:[{name:"data",type:"ndarray, Iterable, dict, or DataFrame",description:"Dict can contain Series, arrays, constants, or list-like objects. If data is a dict, column order follows insertion-order."},{name:"index",type:"Index or array-like",description:"Index to use for resulting frame. Will default to RangeIndex if no indexing information provided.",default:"None"},{name:"columns",type:"Index or array-like",description:"Column labels to use for resulting frame when data does not have them.",default:"None"},{name:"dtype",type:"dtype",description:"Data type to force. Only a single dtype is allowed. If None, infer.",default:"None"},{name:"copy",type:"bool",description:"Copy data from inputs. For dict data, the default of None behaves like copy=True.",default:"None"}],examples:[{title:"Creating DataFrame from Dictionary",code:"import pandas as pd\n\n# Basic dictionary to DataFrame\ndf = pd.DataFrame({\n    'name': ['Alice', 'Bob', 'Charlie'],\n    'age': [25, 30, 35],\n    'city': ['NY', 'LA', 'Chicago']\n})\nprint(df)\n#       name  age     city\n# 0    Alice   25       NY\n# 1      Bob   30       LA\n# 2  Charlie   35  Chicago",description:"Most common way to create a DataFrame from a dictionary of lists."},{title:"DataFrame from List of Dictionaries",code:"import pandas as pd\n\n# List of dictionaries\ndata = [\n    {'name': 'Alice', 'age': 25, 'city': 'NY'},\n    {'name': 'Bob', 'age': 30, 'city': 'LA'},\n    {'name': 'Charlie', 'age': 35}  # Missing 'city'\n]\ndf = pd.DataFrame(data)\nprint(df)\n#       name  age city\n# 0    Alice   25   NY\n# 1      Bob   30   LA\n# 2  Charlie   35  NaN",description:"Each dictionary becomes a row. Missing values are filled with NaN."},{title:"DataFrame with Custom Index",code:"import pandas as pd\n\ndf = pd.DataFrame(\n    {'A': [1, 2, 3], 'B': [4, 5, 6]},\n    index=['row1', 'row2', 'row3']\n)\nprint(df)\n#       A  B\n# row1  1  4\n# row2  2  5\n# row3  3  6",description:"Specify custom row labels with the index parameter."},{title:"DataFrame from NumPy Array",code:"import pandas as pd\nimport numpy as np\n\narr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ndf = pd.DataFrame(arr, columns=['A', 'B', 'C'])\nprint(df)\n#    A  B  C\n# 0  1  2  3\n# 1  4  5  6\n# 2  7  8  9",description:"Convert NumPy arrays to DataFrames with column labels."}],seeAlso:["pandas.Series - One-dimensional labeled array","pandas.read_csv - Read CSV file into DataFrame","pandas.DataFrame.from_dict - Construct from dict","pandas.DataFrame.from_records - Construct from records"],notes:"DataFrame is the primary pandas data structure. Operations between DataFrame and Series are aligned by index. When arithmetic operations are applied, pandas automatically aligns the data.",url:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html"},read_csv:{name:"pandas.read_csv",description:"Read a comma-separated values (csv) file into DataFrame.",example:"import pandas as pd\n\n# Read CSV file\ndf = pd.read_csv('data.csv')\n\n# With custom delimiter\ndf = pd.read_csv('data.tsv', sep='\\t')\n\n# Skip rows and use specific columns\ndf = pd.read_csv('data.csv',\n                 skiprows=1,\n                 usecols=['name', 'age'])\n\n# Parse dates\ndf = pd.read_csv('data.csv',\n                 parse_dates=['date_column'])",url:"https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"},groupby:{name:"pandas.DataFrame.groupby",description:"Group DataFrame using a mapper or by a Series of columns.",example:"import pandas as pd\n\ndf = pd.DataFrame({\n    'category': ['A', 'B', 'A', 'B', 'A'],\n    'values': [10, 20, 30, 40, 50]\n})\n\n# Group by category and sum\ngrouped = df.groupby('category')['values'].sum()\nprint(grouped)\n# category\n# A    90\n# B    60\n\n# Multiple aggregations\nagg = df.groupby('category').agg({\n    'values': ['sum', 'mean', 'count']\n})\nprint(agg)",url:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html"},merge:{name:"pandas.merge",description:"Merge DataFrame or named Series objects with a database-style join.",example:"import pandas as pd\n\ndf1 = pd.DataFrame({\n    'id': [1, 2, 3],\n    'name': ['Alice', 'Bob', 'Charlie']\n})\n\ndf2 = pd.DataFrame({\n    'id': [1, 2, 4],\n    'score': [85, 92, 78]\n})\n\n# Inner join (default)\nmerged = pd.merge(df1, df2, on='id')\nprint(merged)\n#    id   name  score\n# 0   1  Alice     85\n# 1   2    Bob     92\n\n# Left join\nleft = pd.merge(df1, df2, on='id', how='left')",url:"https://pandas.pydata.org/docs/reference/api/pandas.merge.html"}},requests:{get:{name:"requests.get",description:"Sends a GET request to the specified URL.",example:"import requests\n\n# Simple GET request\nresponse = requests.get('https://api.github.com')\nprint(response.status_code)  # 200\nprint(response.json())  # Parse JSON response\n\n# With parameters\nparams = {'q': 'python', 'sort': 'stars'}\nresponse = requests.get('https://api.github.com/search/repositories',\n                       params=params)\n\n# With headers\nheaders = {'Authorization': 'Bearer TOKEN'}\nresponse = requests.get('https://api.example.com/data',\n                       headers=headers)",url:"https://requests.readthedocs.io/en/latest/api/#requests.get"},post:{name:"requests.post",description:"Sends a POST request to the specified URL.",example:"import requests\n\n# POST with JSON data\ndata = {'username': 'user', 'password': 'pass'}\nresponse = requests.post('https://api.example.com/login',\n                        json=data)\n\n# POST with form data\nform_data = {'key1': 'value1', 'key2': 'value2'}\nresponse = requests.post('https://api.example.com/form',\n                        data=form_data)\n\n# Check response\nif response.status_code == 200:\n    print('Success!')\n    print(response.json())",url:"https://requests.readthedocs.io/en/latest/api/#requests.post"}},flask:{Flask:{name:"flask.Flask",description:"The Flask object implements a WSGI application.",example:"from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hello, World!'\n\n@app.route('/user/<username>')\ndef show_user(username):\n    return f'User: {username}'\n\nif __name__ == '__main__':\n    app.run(debug=True)",url:"https://flask.palletsprojects.com/en/latest/api/#flask.Flask"},render_template:{name:"flask.render_template",description:"Renders a template from the template folder with the given context.",example:"from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello/<name>')\ndef hello(name):\n    return render_template('hello.html',\n                          name=name,\n                          title='Greeting')\n\n# hello.html:\n# <!DOCTYPE html>\n# <html>\n# <head><title>{{ title }}</title></head>\n# <body><h1>Hello, {{ name }}!</h1></body>\n# </html>",url:"https://flask.palletsprojects.com/en/latest/api/#flask.render_template"}},django:{Model:{name:"django.db.models.Model",description:"Base class for all Django models.",example:"from django.db import models\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    pub_date = models.DateTimeField(auto_now_add=True)\n    author = models.ForeignKey('auth.User',\n                              on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        ordering = ['-pub_date']\n\n# Usage:\narticle = Article.objects.create(\n    title='My Article',\n    content='Content here...',\n    author=user\n)",url:"https://docs.djangoproject.com/en/stable/ref/models/instances/"}},matplotlib:{pyplot:{name:"matplotlib.pyplot",description:"MATLAB-like plotting framework. Provides functions for creating visualizations.",example:"import matplotlib.pyplot as plt\n\n# Simple line plot\nplt.plot([1, 2, 3, 4], [1, 4, 9, 16])\nplt.ylabel('y-axis')\nplt.xlabel('x-axis')\nplt.title('Simple Plot')\nplt.show()\n\n# Multiple plots\nx = [1, 2, 3, 4, 5]\ny1 = [1, 4, 9, 16, 25]\ny2 = [1, 2, 3, 4, 5]\n\nplt.plot(x, y1, label='squared')\nplt.plot(x, y2, label='linear')\nplt.legend()\nplt.show()",url:"https://matplotlib.org/stable/api/pyplot_summary.html"},figure:{name:"matplotlib.pyplot.figure",description:"Create a new figure or activate an existing figure.",example:"import matplotlib.pyplot as plt\n\n# Create figure with specific size\nfig = plt.figure(figsize=(10, 6))\n\n# Add subplots\nax1 = fig.add_subplot(221)  # 2x2 grid, position 1\nax2 = fig.add_subplot(222)  # 2x2 grid, position 2\n\nax1.plot([1, 2, 3], [1, 4, 9])\nax2.plot([1, 2, 3], [1, 2, 3])\n\nplt.show()",url:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.figure.html"},scatter:{name:"matplotlib.pyplot.scatter",description:"Create a scatter plot of x vs y with varying marker size and/or color.",example:"import matplotlib.pyplot as plt\nimport numpy as np\n\n# Simple scatter\nx = np.random.rand(50)\ny = np.random.rand(50)\nplt.scatter(x, y)\nplt.show()\n\n# With colors and sizes\ncolors = np.random.rand(50)\nsizes = 1000 * np.random.rand(50)\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.5)\nplt.colorbar()\nplt.show()",url:"https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html"}},scipy:{stats:{name:"scipy.stats",description:"Statistical functions and probability distributions.",example:"from scipy import stats\nimport numpy as np\n\n# Normal distribution\ndata = stats.norm.rvs(loc=0, scale=1, size=1000)\n\n# T-test\nt_stat, p_value = stats.ttest_1samp(data, 0)\nprint(f'T-statistic: {t_stat}, P-value: {p_value}')\n\n# Descriptive statistics\nprint(stats.describe(data))",url:"https://docs.scipy.org/doc/scipy/reference/stats.html"},integrate:{name:"scipy.integrate",description:"Integration and ODE solvers.",example:"from scipy import integrate\nimport numpy as np\n\n# Integrate a function\ndef f(x):\n    return x**2\n\nresult, error = integrate.quad(f, 0, 1)\nprint(f'Integral: {result}')  # 0.333...\n\n# Solve ODE\ndef deriv(y, t):\n    return -2 * y\n\nt = np.linspace(0, 4, 100)\ny = integrate.odeint(deriv, 1.0, t)",url:"https://docs.scipy.org/doc/scipy/reference/integrate.html"}},sklearn:{LinearRegression:{name:"sklearn.linear_model.LinearRegression",description:"Ordinary least squares Linear Regression.",example:"from sklearn.linear_model import LinearRegression\nimport numpy as np\n\n# Create sample data\nX = np.array([[1], [2], [3], [4], [5]])\ny = np.array([2, 4, 5, 4, 5])\n\n# Fit model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict([[6]])\nprint(f'Prediction: {predictions[0]}')\n\n# Get coefficients\nprint(f'Slope: {model.coef_[0]}')\nprint(f'Intercept: {model.intercept_}')",url:"https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html"},train_test_split:{name:"sklearn.model_selection.train_test_split",description:"Split arrays or matrices into random train and test subsets.",example:"from sklearn.model_selection import train_test_split\nimport numpy as np\n\n# Sample data\nX = np.arange(100).reshape((20, 5))\ny = np.arange(20)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\nprint(f'Train size: {len(X_train)}')  # 16\nprint(f'Test size: {len(X_test)}')    # 4",url:"https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html"}},bs4:{BeautifulSoup:{name:"bs4.BeautifulSoup",description:"Beautiful Soup parses HTML and XML documents, even with malformed markup.",example:"from bs4 import BeautifulSoup\n\nhtml = \"\"\"\n<html>\n<head><title>Page Title</title></head>\n<body>\n    <p class=\"story\">Once upon a time...</p>\n    <a href=\"http://example.com\">Link</a>\n</body>\n</html>\n\"\"\"\n\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Find elements\ntitle = soup.find('title')\nprint(title.text)  # \"Page Title\"\n\n# Find by class\nstory = soup.find('p', class_='story')\nprint(story.text)\n\n# Find all links\nlinks = soup.find_all('a')\nfor link in links:\n    print(link.get('href'))",url:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/"}},sqlalchemy:{create_engine:{name:"sqlalchemy.create_engine",description:"Create a new Engine instance.",example:"from sqlalchemy import create_engine\n\n# SQLite in-memory\nengine = create_engine('sqlite:///:memory:')\n\n# SQLite file\nengine = create_engine('sqlite:///database.db')\n\n# PostgreSQL\nengine = create_engine(\n    'postgresql://user:password@localhost/dbname'\n)\n\n# MySQL\nengine = create_engine(\n    'mysql+pymysql://user:password@localhost/dbname'\n)\n\n# Execute query\nwith engine.connect() as conn:\n    result = conn.execute(\"SELECT * FROM users\")",url:"https://docs.sqlalchemy.org/en/20/core/engines.html"}},fastapi:{FastAPI:{name:"fastapi.FastAPI",description:"Modern, fast web framework for building APIs with Python.",example:'from fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get("/")\ndef read_root():\n    return {"Hello": "World"}\n\n@app.get("/items/{item_id}")\ndef read_item(item_id: int, q: str = None):\n    return {"item_id": item_id, "q": q}\n\n# POST endpoint with body\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    name: str\n    price: float\n\n@app.post("/items/")\ndef create_item(item: Item):\n    return {"name": item.name, "price": item.price}\n\n# Run with: uvicorn main:app --reload',url:"https://fastapi.tiangolo.com/"}},pytest:{fixture:{name:"pytest.fixture",description:"Decorator to mark a function as a fixture factory.",example:'import pytest\n\n@pytest.fixture\ndef sample_data():\n    return [1, 2, 3, 4, 5]\n\n@pytest.fixture\ndef db_connection():\n    # Setup\n    conn = create_connection()\n    yield conn\n    # Teardown\n    conn.close()\n\ndef test_sum(sample_data):\n    assert sum(sample_data) == 15\n\ndef test_database(db_connection):\n    result = db_connection.query("SELECT 1")\n    assert result == 1',url:"https://docs.pytest.org/en/stable/fixture.html"},mark:{name:"pytest.mark",description:"Mark test functions with metadata.",example:'import pytest\n\n@pytest.mark.slow\ndef test_slow_function():\n    # This test is slow\n    pass\n\n@pytest.mark.parametrize("input,expected", [\n    (1, 2),\n    (2, 4),\n    (3, 6),\n])\ndef test_multiply_by_2(input, expected):\n    assert input * 2 == expected\n\n@pytest.mark.skip(reason="Not implemented yet")\ndef test_future_feature():\n    pass\n\n# Run with: pytest -m slow',url:"https://docs.pytest.org/en/stable/mark.html"}},selenium:{webdriver:{name:"selenium.webdriver",description:"WebDriver implementations for browser automation.",example:'from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Chrome driver\ndriver = webdriver.Chrome()\n\n# Navigate to URL\ndriver.get("https://www.example.com")\n\n# Find element\nelement = driver.find_element(By.ID, "username")\nelement.send_keys("myusername")\n\n# Wait for element\nwait = WebDriverWait(driver, 10)\nelement = wait.until(\n    EC.presence_of_element_located((By.ID, "submit"))\n)\n\n# Click button\nelement.click()\n\ndriver.quit()',url:"https://selenium-python.readthedocs.io/"}},asyncio:{run:{name:"asyncio.run",description:"Execute the coroutine and return the result.",example:"import asyncio\n\nasync def main():\n    print('Hello')\n    await asyncio.sleep(1)\n    print('World')\n\n# Run async function\nasyncio.run(main())\n\n# Multiple tasks\nasync def fetch_data(id):\n    await asyncio.sleep(1)\n    return f'Data {id}'\n\nasync def main():\n    tasks = [fetch_data(i) for i in range(3)]\n    results = await asyncio.gather(*tasks)\n    print(results)\n\nasyncio.run(main())",url:"https://docs.python.org/3/library/asyncio-task.html#asyncio.run"},gather:{name:"asyncio.gather",description:"Run awaitable objects in the sequence concurrently.",example:"import asyncio\n\nasync def task1():\n    await asyncio.sleep(1)\n    return 'Task 1'\n\nasync def task2():\n    await asyncio.sleep(2)\n    return 'Task 2'\n\nasync def main():\n    # Run concurrently\n    results = await asyncio.gather(task1(), task2())\n    print(results)  # ['Task 1', 'Task 2']\n\nasyncio.run(main())",url:"https://docs.python.org/3/library/asyncio-task.html#asyncio.gather"}},pydantic:{BaseModel:{name:"pydantic.BaseModel",description:"Base class for creating data validation models.",example:"from pydantic import BaseModel, validator\nfrom typing import Optional\n\nclass User(BaseModel):\n    id: int\n    name: str\n    email: str\n    age: Optional[int] = None\n\n    @validator('email')\n    def email_must_be_valid(cls, v):\n        if '@' not in v:\n            raise ValueError('Invalid email')\n        return v\n\n# Create instance\nuser = User(id=1, name='John', email='john@example.com')\nprint(user.dict())\n\n# Validation error\ntry:\n    User(id=1, name='John', email='invalid')\nexcept ValueError as e:\n    print(e)",url:"https://docs.pydantic.dev/"}},pillow:{Image:{name:"PIL.Image",description:"The Image module provides a class with the same name for representing a PIL image.",example:"from PIL import Image\n\n# Open image\nimg = Image.open('photo.jpg')\n\n# Get info\nprint(img.size)     # (width, height)\nprint(img.format)   # JPEG\nprint(img.mode)     # RGB\n\n# Resize image\nimg_resized = img.resize((800, 600))\n\n# Crop image\nbox = (100, 100, 400, 400)\nimg_cropped = img.crop(box)\n\n# Save image\nimg.save('output.png')\n\n# Create new image\nnew_img = Image.new('RGB', (100, 100), color='red')",url:"https://pillow.readthedocs.io/en/stable/reference/Image.html"}}}},6892:e=>{e.exports.mixin=function(e,t){const a=Object.getOwnPropertyNames(t);for(let i=0;i<a.length;++i)Object.defineProperty(e,a[i],Object.getOwnPropertyDescriptor(t,a[i]))},e.exports.wrapperSymbol=Symbol("wrapper"),e.exports.implSymbol=Symbol("impl"),e.exports.wrapperForImpl=function(t){return t[e.exports.wrapperSymbol]},e.exports.implForWrapper=function(t){return t[e.exports.implSymbol]}},6928:e=>{e.exports=require("path")},6982:e=>{e.exports=require("crypto")},7079:(e,t,a)=>{const i=a(5484);t.implementation=class{constructor(e){const t=e[0],a=e[1];let p=null;if(void 0!==a&&(p=i.basicURLParse(a),"failure"===p))throw new TypeError("Invalid base URL");const r=i.basicURLParse(t,{baseURL:p});if("failure"===r)throw new TypeError("Invalid URL");this._url=r}get href(){return i.serializeURL(this._url)}set href(e){const t=i.basicURLParse(e);if("failure"===t)throw new TypeError("Invalid URL");this._url=t}get origin(){return i.serializeURLOrigin(this._url)}get protocol(){return this._url.scheme+":"}set protocol(e){i.basicURLParse(e+":",{url:this._url,stateOverride:"scheme start"})}get username(){return this._url.username}set username(e){i.cannotHaveAUsernamePasswordPort(this._url)||i.setTheUsername(this._url,e)}get password(){return this._url.password}set password(e){i.cannotHaveAUsernamePasswordPort(this._url)||i.setThePassword(this._url,e)}get host(){const e=this._url;return null===e.host?"":null===e.port?i.serializeHost(e.host):i.serializeHost(e.host)+":"+i.serializeInteger(e.port)}set host(e){this._url.cannotBeABaseURL||i.basicURLParse(e,{url:this._url,stateOverride:"host"})}get hostname(){return null===this._url.host?"":i.serializeHost(this._url.host)}set hostname(e){this._url.cannotBeABaseURL||i.basicURLParse(e,{url:this._url,stateOverride:"hostname"})}get port(){return null===this._url.port?"":i.serializeInteger(this._url.port)}set port(e){i.cannotHaveAUsernamePasswordPort(this._url)||(""===e?this._url.port=null:i.basicURLParse(e,{url:this._url,stateOverride:"port"}))}get pathname(){return this._url.cannotBeABaseURL?this._url.path[0]:0===this._url.path.length?"":"/"+this._url.path.join("/")}set pathname(e){this._url.cannotBeABaseURL||(this._url.path=[],i.basicURLParse(e,{url:this._url,stateOverride:"path start"}))}get search(){return null===this._url.query||""===this._url.query?"":"?"+this._url.query}set search(e){const t=this._url;if(""===e)return void(t.query=null);const a="?"===e[0]?e.substring(1):e;t.query="",i.basicURLParse(a,{url:t,stateOverride:"query"})}get hash(){return null===this._url.fragment||""===this._url.fragment?"":"#"+this._url.fragment}set hash(e){if(""===e)return void(this._url.fragment=null);const t="#"===e[0]?e.substring(1):e;this._url.fragment="",i.basicURLParse(t,{url:this._url,stateOverride:"fragment"})}toJSON(){return this.href}}},7083:(e,t,a)=>{const i=a(1447),p=a(9805),r=a(1996),n=a(4674),s=a(4442),d=a(7414),o=Object.prototype.toString,{Z_NO_FLUSH:l,Z_FINISH:m,Z_OK:c,Z_STREAM_END:h,Z_NEED_DICT:u,Z_STREAM_ERROR:f,Z_DATA_ERROR:g,Z_MEM_ERROR:v}=a(9681);function y(e){this.options=p.assign({chunkSize:65536,windowBits:15,to:""},e||{});const t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&(15&t.windowBits||(t.windowBits|=15)),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;let a=i.inflateInit2(this.strm,t.windowBits);if(a!==c)throw new Error(n[a]);if(this.header=new d,i.inflateGetHeader(this.strm,this.header),t.dictionary&&("string"==typeof t.dictionary?t.dictionary=r.string2buf(t.dictionary):"[object ArrayBuffer]"===o.call(t.dictionary)&&(t.dictionary=new Uint8Array(t.dictionary)),t.raw&&(a=i.inflateSetDictionary(this.strm,t.dictionary),a!==c)))throw new Error(n[a])}function _(e,t){const a=new y(t);if(a.push(e),a.err)throw a.msg||n[a.err];return a.result}y.prototype.push=function(e,t){const a=this.strm,p=this.options.chunkSize,n=this.options.dictionary;let s,d,y;if(this.ended)return!1;for(d=t===~~t?t:!0===t?m:l,"[object ArrayBuffer]"===o.call(e)?a.input=new Uint8Array(e):a.input=e,a.next_in=0,a.avail_in=a.input.length;;){for(0===a.avail_out&&(a.output=new Uint8Array(p),a.next_out=0,a.avail_out=p),s=i.inflate(a,d),s===u&&n&&(s=i.inflateSetDictionary(a,n),s===c?s=i.inflate(a,d):s===g&&(s=u));a.avail_in>0&&s===h&&a.state.wrap>0&&0!==e[a.next_in];)i.inflateReset(a),s=i.inflate(a,d);switch(s){case f:case g:case u:case v:return this.onEnd(s),this.ended=!0,!1}if(y=a.avail_out,a.next_out&&(0===a.avail_out||s===h))if("string"===this.options.to){let e=r.utf8border(a.output,a.next_out),t=a.next_out-e,i=r.buf2string(a.output,e);a.next_out=t,a.avail_out=p-t,t&&a.output.set(a.output.subarray(e,e+t),0),this.onData(i)}else this.onData(a.output.length===a.next_out?a.output:a.output.subarray(0,a.next_out));if(s!==c||0!==y){if(s===h)return s=i.inflateEnd(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===a.avail_in)break}}return!0},y.prototype.onData=function(e){this.chunks.push(e)},y.prototype.onEnd=function(e){e===c&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=p.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},e.exports.Inflate=y,e.exports.inflate=_,e.exports.inflateRaw=function(e,t){return(t=t||{}).raw=!0,_(e,t)},e.exports.ungzip=_,e.exports.constants=a(9681)},7293:e=>{const t=16209;e.exports=function(e,a){let i,p,r,n,s,d,o,l,m,c,h,u,f,g,v,y,_,w,b,x,S,T,D,E;const k=e.state;i=e.next_in,D=e.input,p=i+(e.avail_in-5),r=e.next_out,E=e.output,n=r-(a-e.avail_out),s=r+(e.avail_out-257),d=k.dmax,o=k.wsize,l=k.whave,m=k.wnext,c=k.window,h=k.hold,u=k.bits,f=k.lencode,g=k.distcode,v=(1<<k.lenbits)-1,y=(1<<k.distbits)-1;e:do{u<15&&(h+=D[i++]<<u,u+=8,h+=D[i++]<<u,u+=8),_=f[h&v];t:for(;;){if(w=_>>>24,h>>>=w,u-=w,w=_>>>16&255,0===w)E[r++]=65535&_;else{if(!(16&w)){if(64&w){if(32&w){k.mode=16191;break e}e.msg="invalid literal/length code",k.mode=t;break e}_=f[(65535&_)+(h&(1<<w)-1)];continue t}for(b=65535&_,w&=15,w&&(u<w&&(h+=D[i++]<<u,u+=8),b+=h&(1<<w)-1,h>>>=w,u-=w),u<15&&(h+=D[i++]<<u,u+=8,h+=D[i++]<<u,u+=8),_=g[h&y];;){if(w=_>>>24,h>>>=w,u-=w,w=_>>>16&255,16&w){if(x=65535&_,w&=15,u<w&&(h+=D[i++]<<u,u+=8,u<w&&(h+=D[i++]<<u,u+=8)),x+=h&(1<<w)-1,x>d){e.msg="invalid distance too far back",k.mode=t;break e}if(h>>>=w,u-=w,w=r-n,x>w){if(w=x-w,w>l&&k.sane){e.msg="invalid distance too far back",k.mode=t;break e}if(S=0,T=c,0===m){if(S+=o-w,w<b){b-=w;do{E[r++]=c[S++]}while(--w);S=r-x,T=E}}else if(m<w){if(S+=o+m-w,w-=m,w<b){b-=w;do{E[r++]=c[S++]}while(--w);if(S=0,m<b){w=m,b-=w;do{E[r++]=c[S++]}while(--w);S=r-x,T=E}}}else if(S+=m-w,w<b){b-=w;do{E[r++]=c[S++]}while(--w);S=r-x,T=E}for(;b>2;)E[r++]=T[S++],E[r++]=T[S++],E[r++]=T[S++],b-=3;b&&(E[r++]=T[S++],b>1&&(E[r++]=T[S++]))}else{S=r-x;do{E[r++]=E[S++],E[r++]=E[S++],E[r++]=E[S++],b-=3}while(b>2);b&&(E[r++]=E[S++],b>1&&(E[r++]=E[S++]))}break}if(64&w){e.msg="invalid distance code",k.mode=t;break e}_=g[(65535&_)+(h&(1<<w)-1)]}}break}}while(i<p&&r<s);b=u>>3,i-=b,u-=b<<3,h&=(1<<u)-1,e.next_in=i,e.next_out=r,e.avail_in=i<p?p-i+5:5-(i-p),e.avail_out=r<s?s-r+257:257-(r-s),k.hold=h,k.bits=u}},7414:e=>{e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},7540:(e,t,a)=>{a.r(t),a.d(t,{FetchError:()=>h,Headers:()=>A,Request:()=>W,Response:()=>F,default:()=>J});const i=require("stream"),p=require("http"),r=require("url");var n=a(3417);const s=require("https"),d=require("zlib"),o=i.Readable,l=Symbol("buffer"),m=Symbol("type");class c{constructor(){this[m]="";const e=arguments[0],t=arguments[1],a=[];let i=0;if(e){const t=e,p=Number(t.length);for(let e=0;e<p;e++){const p=t[e];let r;r=p instanceof Buffer?p:ArrayBuffer.isView(p)?Buffer.from(p.buffer,p.byteOffset,p.byteLength):p instanceof ArrayBuffer?Buffer.from(p):p instanceof c?p[l]:Buffer.from("string"==typeof p?p:String(p)),i+=r.length,a.push(r)}}this[l]=Buffer.concat(a);let p=t&&void 0!==t.type&&String(t.type).toLowerCase();p&&!/[^\u0020-\u007E]/.test(p)&&(this[m]=p)}get size(){return this[l].length}get type(){return this[m]}text(){return Promise.resolve(this[l].toString())}arrayBuffer(){const e=this[l],t=e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength);return Promise.resolve(t)}stream(){const e=new o;return e._read=function(){},e.push(this[l]),e.push(null),e}toString(){return"[object Blob]"}slice(){const e=this.size,t=arguments[0],a=arguments[1];let i,p;i=void 0===t?0:t<0?Math.max(e+t,0):Math.min(t,e),p=void 0===a?e:a<0?Math.max(e+a,0):Math.min(a,e);const r=Math.max(p-i,0),n=this[l].slice(i,i+r),s=new c([],{type:arguments[2]});return s[l]=n,s}}function h(e,t,a){Error.call(this,e),this.message=e,this.type=t,a&&(this.code=this.errno=a.code),Error.captureStackTrace(this,this.constructor)}let u;Object.defineProperties(c.prototype,{size:{enumerable:!0},type:{enumerable:!0},slice:{enumerable:!0}}),Object.defineProperty(c.prototype,Symbol.toStringTag,{value:"Blob",writable:!1,enumerable:!1,configurable:!0}),h.prototype=Object.create(Error.prototype),h.prototype.constructor=h,h.prototype.name="FetchError";try{u=require("encoding").convert}catch(e){}const f=Symbol("Body internals"),g=i.PassThrough;function v(e){var t=this,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},p=a.size;let r=void 0===p?0:p;var n=a.timeout;let s=void 0===n?0:n;null==e?e=null:_(e)?e=Buffer.from(e.toString()):w(e)||Buffer.isBuffer(e)||("[object ArrayBuffer]"===Object.prototype.toString.call(e)?e=Buffer.from(e):ArrayBuffer.isView(e)?e=Buffer.from(e.buffer,e.byteOffset,e.byteLength):e instanceof i||(e=Buffer.from(String(e)))),this[f]={body:e,disturbed:!1,error:null},this.size=r,this.timeout=s,e instanceof i&&e.on("error",function(e){const a="AbortError"===e.name?e:new h(`Invalid response body while trying to fetch ${t.url}: ${e.message}`,"system",e);t[f].error=a})}function y(){var e=this;if(this[f].disturbed)return v.Promise.reject(new TypeError(`body used already for: ${this.url}`));if(this[f].disturbed=!0,this[f].error)return v.Promise.reject(this[f].error);let t=this.body;if(null===t)return v.Promise.resolve(Buffer.alloc(0));if(w(t)&&(t=t.stream()),Buffer.isBuffer(t))return v.Promise.resolve(t);if(!(t instanceof i))return v.Promise.resolve(Buffer.alloc(0));let a=[],p=0,r=!1;return new v.Promise(function(i,n){let s;e.timeout&&(s=setTimeout(function(){r=!0,n(new h(`Response timeout while trying to fetch ${e.url} (over ${e.timeout}ms)`,"body-timeout"))},e.timeout)),t.on("error",function(t){"AbortError"===t.name?(r=!0,n(t)):n(new h(`Invalid response body while trying to fetch ${e.url}: ${t.message}`,"system",t))}),t.on("data",function(t){if(!r&&null!==t){if(e.size&&p+t.length>e.size)return r=!0,void n(new h(`content size at ${e.url} over limit: ${e.size}`,"max-size"));p+=t.length,a.push(t)}}),t.on("end",function(){if(!r){clearTimeout(s);try{i(Buffer.concat(a,p))}catch(t){n(new h(`Could not create Buffer from response body for ${e.url}: ${t.message}`,"system",t))}}})})}function _(e){return"object"==typeof e&&"function"==typeof e.append&&"function"==typeof e.delete&&"function"==typeof e.get&&"function"==typeof e.getAll&&"function"==typeof e.has&&"function"==typeof e.set&&("URLSearchParams"===e.constructor.name||"[object URLSearchParams]"===Object.prototype.toString.call(e)||"function"==typeof e.sort)}function w(e){return"object"==typeof e&&"function"==typeof e.arrayBuffer&&"string"==typeof e.type&&"function"==typeof e.stream&&"function"==typeof e.constructor&&"string"==typeof e.constructor.name&&/^(Blob|File)$/.test(e.constructor.name)&&/^(Blob|File)$/.test(e[Symbol.toStringTag])}function b(e){let t,a,p=e.body;if(e.bodyUsed)throw new Error("cannot clone body after it is used");return p instanceof i&&"function"!=typeof p.getBoundary&&(t=new g,a=new g,p.pipe(t),p.pipe(a),e[f].body=t,p=a),p}function x(e){return null===e?null:"string"==typeof e?"text/plain;charset=UTF-8":_(e)?"application/x-www-form-urlencoded;charset=UTF-8":w(e)?e.type||null:Buffer.isBuffer(e)||"[object ArrayBuffer]"===Object.prototype.toString.call(e)||ArrayBuffer.isView(e)?null:"function"==typeof e.getBoundary?`multipart/form-data;boundary=${e.getBoundary()}`:e instanceof i?null:"text/plain;charset=UTF-8"}function S(e){const t=e.body;return null===t?0:w(t)?t.size:Buffer.isBuffer(t)?t.length:t&&"function"==typeof t.getLengthSync&&(t._lengthRetrievers&&0==t._lengthRetrievers.length||t.hasKnownLength&&t.hasKnownLength())?t.getLengthSync():null}v.prototype={get body(){return this[f].body},get bodyUsed(){return this[f].disturbed},arrayBuffer(){return y.call(this).then(function(e){return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)})},blob(){let e=this.headers&&this.headers.get("content-type")||"";return y.call(this).then(function(t){return Object.assign(new c([],{type:e.toLowerCase()}),{[l]:t})})},json(){var e=this;return y.call(this).then(function(t){try{return JSON.parse(t.toString())}catch(t){return v.Promise.reject(new h(`invalid json response body at ${e.url} reason: ${t.message}`,"invalid-json"))}})},text(){return y.call(this).then(function(e){return e.toString()})},buffer(){return y.call(this)},textConverted(){var e=this;return y.call(this).then(function(t){return function(e,t){if("function"!=typeof u)throw new Error("The package `encoding` must be installed to use the textConverted() function");const a=t.get("content-type");let i,p,r="utf-8";return a&&(i=/charset=([^;]*)/i.exec(a)),p=e.slice(0,1024).toString(),!i&&p&&(i=/<meta.+?charset=(['"])(.+?)\1/i.exec(p)),!i&&p&&(i=/<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(p),i||(i=/<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(p),i&&i.pop()),i&&(i=/charset=(.*)/i.exec(i.pop()))),!i&&p&&(i=/<\?xml.+?encoding=(['"])(.+?)\1/i.exec(p)),i&&(r=i.pop(),"gb2312"!==r&&"gbk"!==r||(r="gb18030")),u(e,"UTF-8",r).toString()}(t,e.headers)})}},Object.defineProperties(v.prototype,{body:{enumerable:!0},bodyUsed:{enumerable:!0},arrayBuffer:{enumerable:!0},blob:{enumerable:!0},json:{enumerable:!0},text:{enumerable:!0}}),v.mixIn=function(e){for(const t of Object.getOwnPropertyNames(v.prototype))if(!(t in e)){const a=Object.getOwnPropertyDescriptor(v.prototype,t);Object.defineProperty(e,t,a)}},v.Promise=global.Promise;const T=/[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/,D=/[^\t\x20-\x7e\x80-\xff]/;function E(e){if(e=`${e}`,T.test(e)||""===e)throw new TypeError(`${e} is not a legal HTTP header name`)}function k(e){if(e=`${e}`,D.test(e))throw new TypeError(`${e} is not a legal HTTP header value`)}function C(e,t){t=t.toLowerCase();for(const a in e)if(a.toLowerCase()===t)return a}const N=Symbol("map");class A{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(this[N]=Object.create(null),e instanceof A){const t=e.raw(),a=Object.keys(t);for(const e of a)for(const a of t[e])this.append(e,a);return}if(null==e);else{if("object"!=typeof e)throw new TypeError("Provided initializer must be an object");{const t=e[Symbol.iterator];if(null!=t){if("function"!=typeof t)throw new TypeError("Header pairs must be iterable");const a=[];for(const t of e){if("object"!=typeof t||"function"!=typeof t[Symbol.iterator])throw new TypeError("Each header pair must be iterable");a.push(Array.from(t))}for(const e of a){if(2!==e.length)throw new TypeError("Each header pair must be a name/value tuple");this.append(e[0],e[1])}}else for(const t of Object.keys(e)){const a=e[t];this.append(t,a)}}}}get(e){E(e=`${e}`);const t=C(this[N],e);return void 0===t?null:this[N][t].join(", ")}forEach(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0,a=$(this),i=0;for(;i<a.length;){var p=a[i];const r=p[0],n=p[1];e.call(t,n,r,this),a=$(this),i++}}set(e,t){t=`${t}`,E(e=`${e}`),k(t);const a=C(this[N],e);this[N][void 0!==a?a:e]=[t]}append(e,t){t=`${t}`,E(e=`${e}`),k(t);const a=C(this[N],e);void 0!==a?this[N][a].push(t):this[N][e]=[t]}has(e){return E(e=`${e}`),void 0!==C(this[N],e)}delete(e){E(e=`${e}`);const t=C(this[N],e);void 0!==t&&delete this[N][t]}raw(){return this[N]}keys(){return V(this,"key")}values(){return V(this,"value")}[Symbol.iterator](){return V(this,"key+value")}}function $(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"key+value";return Object.keys(e[N]).sort().map("key"===t?function(e){return e.toLowerCase()}:"value"===t?function(t){return e[N][t].join(", ")}:function(t){return[t.toLowerCase(),e[N][t].join(", ")]})}A.prototype.entries=A.prototype[Symbol.iterator],Object.defineProperty(A.prototype,Symbol.toStringTag,{value:"Headers",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(A.prototype,{get:{enumerable:!0},forEach:{enumerable:!0},set:{enumerable:!0},append:{enumerable:!0},has:{enumerable:!0},delete:{enumerable:!0},keys:{enumerable:!0},values:{enumerable:!0},entries:{enumerable:!0}});const R=Symbol("internal");function V(e,t){const a=Object.create(M);return a[R]={target:e,kind:t,index:0},a}const M=Object.setPrototypeOf({next(){if(!this||Object.getPrototypeOf(this)!==M)throw new TypeError("Value of `this` is not a HeadersIterator");var e=this[R];const t=e.target,a=e.kind,i=e.index,p=$(t,a);return i>=p.length?{value:void 0,done:!0}:(this[R].index=i+1,{value:p[i],done:!1})}},Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));function I(e){const t=Object.assign({__proto__:null},e[N]),a=C(e[N],"Host");return void 0!==a&&(t[a]=t[a][0]),t}Object.defineProperty(M,Symbol.toStringTag,{value:"HeadersIterator",writable:!1,enumerable:!1,configurable:!0});const P=Symbol("Response internals"),L=p.STATUS_CODES;class F{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};v.call(this,e,t);const a=t.status||200,i=new A(t.headers);if(null!=e&&!i.has("Content-Type")){const t=x(e);t&&i.append("Content-Type",t)}this[P]={url:t.url,status:a,statusText:t.statusText||L[a],headers:i,counter:t.counter}}get url(){return this[P].url||""}get status(){return this[P].status}get ok(){return this[P].status>=200&&this[P].status<300}get redirected(){return this[P].counter>0}get statusText(){return this[P].statusText}get headers(){return this[P].headers}clone(){return new F(b(this),{url:this.url,status:this.status,statusText:this.statusText,headers:this.headers,ok:this.ok,redirected:this.redirected})}}v.mixIn(F.prototype),Object.defineProperties(F.prototype,{url:{enumerable:!0},status:{enumerable:!0},ok:{enumerable:!0},redirected:{enumerable:!0},statusText:{enumerable:!0},headers:{enumerable:!0},clone:{enumerable:!0}}),Object.defineProperty(F.prototype,Symbol.toStringTag,{value:"Response",writable:!1,enumerable:!1,configurable:!0});const O=Symbol("Request internals"),U=r.URL||n.URL,j=r.parse,B=r.format;function H(e){return/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e)&&(e=new U(e).toString()),j(e)}const z="destroy"in i.Readable.prototype;function q(e){return"object"==typeof e&&"object"==typeof e[O]}class W{constructor(e){let t,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};q(e)?t=H(e.url):(t=e&&e.href?H(e.href):H(`${e}`),e={});let i=a.method||e.method||"GET";if(i=i.toUpperCase(),(null!=a.body||q(e)&&null!==e.body)&&("GET"===i||"HEAD"===i))throw new TypeError("Request with GET/HEAD method cannot have body");let p=null!=a.body?a.body:q(e)&&null!==e.body?b(e):null;v.call(this,p,{timeout:a.timeout||e.timeout||0,size:a.size||e.size||0});const r=new A(a.headers||e.headers||{});if(null!=p&&!r.has("Content-Type")){const e=x(p);e&&r.append("Content-Type",e)}let n=q(e)?e.signal:null;if("signal"in a&&(n=a.signal),null!=n&&!function(e){const t=e&&"object"==typeof e&&Object.getPrototypeOf(e);return!(!t||"AbortSignal"!==t.constructor.name)}(n))throw new TypeError("Expected signal to be an instanceof AbortSignal");this[O]={method:i,redirect:a.redirect||e.redirect||"follow",headers:r,parsedURL:t,signal:n},this.follow=void 0!==a.follow?a.follow:void 0!==e.follow?e.follow:20,this.compress=void 0!==a.compress?a.compress:void 0===e.compress||e.compress,this.counter=a.counter||e.counter||0,this.agent=a.agent||e.agent}get method(){return this[O].method}get url(){return B(this[O].parsedURL)}get headers(){return this[O].headers}get redirect(){return this[O].redirect}get signal(){return this[O].signal}clone(){return new W(this)}}function G(e){Error.call(this,e),this.type="aborted",this.message=e,Error.captureStackTrace(this,this.constructor)}v.mixIn(W.prototype),Object.defineProperty(W.prototype,Symbol.toStringTag,{value:"Request",writable:!1,enumerable:!1,configurable:!0}),Object.defineProperties(W.prototype,{method:{enumerable:!0},url:{enumerable:!0},headers:{enumerable:!0},redirect:{enumerable:!0},clone:{enumerable:!0},signal:{enumerable:!0}}),G.prototype=Object.create(Error.prototype),G.prototype.constructor=G,G.prototype.name="AbortError";const Z=r.URL||n.URL,Y=i.PassThrough;function K(e,t){if(!K.Promise)throw new Error("native promise missing, set fetch.Promise to your favorite alternative");return v.Promise=K.Promise,new K.Promise(function(a,r){const n=new W(e,t),o=function(e){const t=e[O].parsedURL,a=new A(e[O].headers);if(a.has("Accept")||a.set("Accept","*/*"),!t.protocol||!t.hostname)throw new TypeError("Only absolute URLs are supported");if(!/^https?:$/.test(t.protocol))throw new TypeError("Only HTTP(S) protocols are supported");if(e.signal&&e.body instanceof i.Readable&&!z)throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");let p=null;if(null==e.body&&/^(POST|PUT)$/i.test(e.method)&&(p="0"),null!=e.body){const t=S(e);"number"==typeof t&&(p=String(t))}p&&a.set("Content-Length",p),a.has("User-Agent")||a.set("User-Agent","node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"),e.compress&&!a.has("Accept-Encoding")&&a.set("Accept-Encoding","gzip,deflate");let r=e.agent;return"function"==typeof r&&(r=r(t)),a.has("Connection")||r||a.set("Connection","close"),Object.assign({},t,{method:e.method,headers:I(a),agent:r})}(n),l=("https:"===o.protocol?s:p).request,m=n.signal;let c=null;const u=function(){let e=new G("The user aborted a request.");r(e),n.body&&n.body instanceof i.Readable&&X(n.body,e),c&&c.body&&c.body.emit("error",e)};if(m&&m.aborted)return void u();const f=function(){u(),y()},g=l(o);let v;function y(){g.abort(),m&&m.removeEventListener("abort",f),clearTimeout(v)}m&&m.addEventListener("abort",f),n.timeout&&g.once("socket",function(e){v=setTimeout(function(){r(new h(`network timeout at: ${n.url}`,"request-timeout")),y()},n.timeout)}),g.on("error",function(e){r(new h(`request to ${n.url} failed, reason: ${e.message}`,"system",e)),c&&c.body&&X(c.body,e),y()}),function(e,t){let a;e.on("socket",function(e){a=e}),e.on("response",function(e){const i=e.headers;"chunked"!==i["transfer-encoding"]||i["content-length"]||e.once("close",function(e){if(a&&a.listenerCount("data")>0&&!e){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",t(e)}})})}(g,function(e){m&&m.aborted||c&&c.body&&X(c.body,e)}),parseInt(process.version.substring(1))<14&&g.on("socket",function(e){e.addListener("close",function(t){const a=e.listenerCount("data")>0;if(c&&a&&!t&&(!m||!m.aborted)){const e=new Error("Premature close");e.code="ERR_STREAM_PREMATURE_CLOSE",c.body.emit("error",e)}})}),g.on("response",function(e){clearTimeout(v);const t=function(e){const t=new A;for(const a of Object.keys(e))if(!T.test(a))if(Array.isArray(e[a]))for(const i of e[a])D.test(i)||(void 0===t[N][a]?t[N][a]=[i]:t[N][a].push(i));else D.test(e[a])||(t[N][a]=[e[a]]);return t}(e.headers);if(K.isRedirect(e.statusCode)){const p=t.get("Location");let s=null;try{s=null===p?null:new Z(p,n.url).toString()}catch(e){if("manual"!==n.redirect)return r(new h(`uri requested responds with an invalid redirect URL: ${p}`,"invalid-redirect")),void y()}switch(n.redirect){case"error":return r(new h(`uri requested responds with a redirect, redirect mode is set to error: ${n.url}`,"no-redirect")),void y();case"manual":if(null!==s)try{t.set("Location",s)}catch(e){r(e)}break;case"follow":if(null===s)break;if(n.counter>=n.follow)return r(new h(`maximum redirect reached at: ${n.url}`,"max-redirect")),void y();const p={headers:new A(n.headers),follow:n.follow,counter:n.counter+1,agent:n.agent,compress:n.compress,method:n.method,body:n.body,signal:n.signal,timeout:n.timeout,size:n.size};if(!function(e,t){const a=new Z(t).hostname,i=new Z(e).hostname;return a===i||"."===a[a.length-i.length-1]&&a.endsWith(i)}(n.url,s)||(i=n.url,new Z(s).protocol!==new Z(i).protocol))for(const e of["authorization","www-authenticate","cookie","cookie2"])p.headers.delete(e);return 303!==e.statusCode&&n.body&&null===S(n)?(r(new h("Cannot follow redirect with body being a readable stream","unsupported-redirect")),void y()):(303!==e.statusCode&&(301!==e.statusCode&&302!==e.statusCode||"POST"!==n.method)||(p.method="GET",p.body=void 0,p.headers.delete("content-length")),a(K(new W(s,p))),void y())}}var i;e.once("end",function(){m&&m.removeEventListener("abort",f)});let p=e.pipe(new Y);const s={url:n.url,status:e.statusCode,statusText:e.statusMessage,headers:t,size:n.size,timeout:n.timeout,counter:n.counter},o=t.get("Content-Encoding");if(!n.compress||"HEAD"===n.method||null===o||204===e.statusCode||304===e.statusCode)return c=new F(p,s),void a(c);const l={flush:d.Z_SYNC_FLUSH,finishFlush:d.Z_SYNC_FLUSH};if("gzip"==o||"x-gzip"==o)return p=p.pipe(d.createGunzip(l)),c=new F(p,s),void a(c);if("deflate"==o||"x-deflate"==o){const t=e.pipe(new Y);return t.once("data",function(e){p=8==(15&e[0])?p.pipe(d.createInflate()):p.pipe(d.createInflateRaw()),c=new F(p,s),a(c)}),void t.on("end",function(){c||(c=new F(p,s),a(c))})}if("br"==o&&"function"==typeof d.createBrotliDecompress)return p=p.pipe(d.createBrotliDecompress()),c=new F(p,s),void a(c);c=new F(p,s),a(c)}),function(e,t){const a=t.body;null===a?e.end():w(a)?a.stream().pipe(e):Buffer.isBuffer(a)?(e.write(a),e.end()):a.pipe(e)}(g,n)})}function X(e,t){e.destroy?e.destroy(t):(e.emit("error",t),e.end())}K.isRedirect=function(e){return 301===e||302===e||303===e||307===e||308===e},K.Promise=global.Promise;const J=K},8058:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SPECIAL_METHOD_DESCRIPTIONS=void 0,t.SPECIAL_METHOD_DESCRIPTIONS={__init__:"Constructor; called to initialize a newly created instance.",__repr__:"Official string representation used for debugging.",__str__:"User-friendly string representation.",__len__:"Return the length of the container.",__iter__:"Return an iterator over the container.",__contains__:"Check membership (in operator).",__getitem__:"Return item indexed by key.",__setitem__:"Assign item for a key.",__enter__:"Context manager entry (with).",__exit__:"Context manager exit (with).",__call__:"Make an instance callable like a function.",__new__:"Low-level constructor; allocates instance.",__eq__:"Equality comparison.",__lt__:"Less-than comparison.",__getattr__:"Fallback attribute access.",__getattribute__:"Primary attribute access implementation.",__setattr__:"Attribute assignment handler.",__delattr__:"Attribute deletion handler.",__bool__:"Boolean value of the instance.",__hash__:"Hash value for dictionary keys.",__add__:"Implement addition (+).",__sub__:"Implement subtraction (-).",__mul__:"Implement multiplication (*).",__truediv__:"Implement division (/).",__floordiv__:"Implement integer division (//).",__mod__:"Implement modulo (%).",__pow__:"Implement power (**).",__del__:"Destructor; called when instance is about to be destroyed."}},8087:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CacheManager=void 0;const i=a(6982),p=a(1943),r=a(6928),n=a(4417);t.CacheManager=class{constructor(e){this.logger=n.Logger.getInstance(),this.cacheDir=r.join(e.fsPath,"python-hover-cache")}async ensureCacheDir(){try{await p.mkdir(this.cacheDir,{recursive:!0})}catch(e){}}getCacheFilePath(e){const t=i.createHash("sha256").update(e,"utf8").digest("hex").substring(0,16);return r.join(this.cacheDir,`${t}.json`)}async get(e){try{const t=this.getCacheFilePath(e),a=await p.readFile(t,"utf-8");return JSON.parse(a)}catch(e){return null}}async set(e,t,a,i){await this.ensureCacheDir();const r={data:t,timestamp:Date.now(),etag:a,lastModified:i},n=this.getCacheFilePath(e);await p.writeFile(n,JSON.stringify(r,null,2))}async isExpired(e,t){const a=await this.get(e);return!a||Date.now()-a.timestamp>t}async delete(e){try{const t=this.getCacheFilePath(e);await p.unlink(t)}catch(e){}}async clear(){try{this.logger.debug(`Clearing cache directory: ${this.cacheDir}`);const e=await p.readdir(this.cacheDir);return this.logger.debug(`Found ${e.length} cache files to delete`,e),0===e.length?(this.logger.debug("No cache files to delete"),{filesDeleted:0,success:!0}):(await Promise.all(e.map(async e=>{const t=r.join(this.cacheDir,e);return this.logger.debug(`Deleting cache file: ${t}`),p.unlink(t)})),this.logger.debug(`Successfully deleted ${e.length} cache files`),{filesDeleted:e.length,success:!0})}catch(e){return this.logger.error("Error clearing cache:",e),e instanceof Error&&"code"in e&&"ENOENT"===e.code?(this.logger.debug("Cache directory does not exist, nothing to clear"),{filesDeleted:0,success:!0}):{filesDeleted:0,success:!1}}}async getStats(){try{await this.ensureCacheDir();const e=await p.readdir(this.cacheDir);let t=0;for(const a of e)try{const e=r.join(this.cacheDir,a);t+=(await p.stat(e)).size}catch(e){}return{fileCount:e.length,totalSize:t,cacheDir:this.cacheDir}}catch(e){return{fileCount:0,totalSize:0,cacheDir:this.cacheDir}}}static daysToMs(e){return 24*e*60*60*1e3}static hoursToMs(e){return 60*e*60*1e3}}},8411:(e,t,a)=>{const{_tr_init:i,_tr_stored_block:p,_tr_flush_block:r,_tr_tally:n,_tr_align:s}=a(3665),d=a(3269),o=a(4823),l=a(4674),{Z_NO_FLUSH:m,Z_PARTIAL_FLUSH:c,Z_FULL_FLUSH:h,Z_FINISH:u,Z_BLOCK:f,Z_OK:g,Z_STREAM_END:v,Z_STREAM_ERROR:y,Z_DATA_ERROR:_,Z_BUF_ERROR:w,Z_DEFAULT_COMPRESSION:b,Z_FILTERED:x,Z_HUFFMAN_ONLY:S,Z_RLE:T,Z_FIXED:D,Z_DEFAULT_STRATEGY:E,Z_UNKNOWN:k,Z_DEFLATED:C}=a(9681),N=258,A=262,$=42,R=113,V=666,M=(e,t)=>(e.msg=l[t],t),I=e=>2*e-(e>4?9:0),P=e=>{let t=e.length;for(;--t>=0;)e[t]=0},L=e=>{let t,a,i,p=e.w_size;t=e.hash_size,i=t;do{a=e.head[--i],e.head[i]=a>=p?a-p:0}while(--t);t=p,i=t;do{a=e.prev[--i],e.prev[i]=a>=p?a-p:0}while(--t)};let F=(e,t,a)=>(t<<e.hash_shift^a)&e.hash_mask;const O=e=>{const t=e.state;let a=t.pending;a>e.avail_out&&(a=e.avail_out),0!==a&&(e.output.set(t.pending_buf.subarray(t.pending_out,t.pending_out+a),e.next_out),e.next_out+=a,t.pending_out+=a,e.total_out+=a,e.avail_out-=a,t.pending-=a,0===t.pending&&(t.pending_out=0))},U=(e,t)=>{r(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,O(e.strm)},j=(e,t)=>{e.pending_buf[e.pending++]=t},B=(e,t)=>{e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t},H=(e,t,a,i)=>{let p=e.avail_in;return p>i&&(p=i),0===p?0:(e.avail_in-=p,t.set(e.input.subarray(e.next_in,e.next_in+p),a),1===e.state.wrap?e.adler=d(e.adler,t,p,a):2===e.state.wrap&&(e.adler=o(e.adler,t,p,a)),e.next_in+=p,e.total_in+=p,p)},z=(e,t)=>{let a,i,p=e.max_chain_length,r=e.strstart,n=e.prev_length,s=e.nice_match;const d=e.strstart>e.w_size-A?e.strstart-(e.w_size-A):0,o=e.window,l=e.w_mask,m=e.prev,c=e.strstart+N;let h=o[r+n-1],u=o[r+n];e.prev_length>=e.good_match&&(p>>=2),s>e.lookahead&&(s=e.lookahead);do{if(a=t,o[a+n]===u&&o[a+n-1]===h&&o[a]===o[r]&&o[++a]===o[r+1]){r+=2,a++;do{}while(o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&o[++r]===o[++a]&&r<c);if(i=N-(c-r),r=c-N,i>n){if(e.match_start=t,n=i,i>=s)break;h=o[r+n-1],u=o[r+n]}}}while((t=m[t&l])>d&&0!==--p);return n<=e.lookahead?n:e.lookahead},q=e=>{const t=e.w_size;let a,i,p;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=t+(t-A)&&(e.window.set(e.window.subarray(t,t+t-i),0),e.match_start-=t,e.strstart-=t,e.block_start-=t,e.insert>e.strstart&&(e.insert=e.strstart),L(e),i+=t),0===e.strm.avail_in)break;if(a=H(e.strm,e.window,e.strstart+e.lookahead,i),e.lookahead+=a,e.lookahead+e.insert>=3)for(p=e.strstart-e.insert,e.ins_h=e.window[p],e.ins_h=F(e,e.ins_h,e.window[p+1]);e.insert&&(e.ins_h=F(e,e.ins_h,e.window[p+3-1]),e.prev[p&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=p,p++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<A&&0!==e.strm.avail_in)},W=(e,t)=>{let a,i,r,n=e.pending_buf_size-5>e.w_size?e.w_size:e.pending_buf_size-5,s=0,d=e.strm.avail_in;do{if(a=65535,r=e.bi_valid+42>>3,e.strm.avail_out<r)break;if(r=e.strm.avail_out-r,i=e.strstart-e.block_start,a>i+e.strm.avail_in&&(a=i+e.strm.avail_in),a>r&&(a=r),a<n&&(0===a&&t!==u||t===m||a!==i+e.strm.avail_in))break;s=t===u&&a===i+e.strm.avail_in?1:0,p(e,0,0,s),e.pending_buf[e.pending-4]=a,e.pending_buf[e.pending-3]=a>>8,e.pending_buf[e.pending-2]=~a,e.pending_buf[e.pending-1]=~a>>8,O(e.strm),i&&(i>a&&(i=a),e.strm.output.set(e.window.subarray(e.block_start,e.block_start+i),e.strm.next_out),e.strm.next_out+=i,e.strm.avail_out-=i,e.strm.total_out+=i,e.block_start+=i,a-=i),a&&(H(e.strm,e.strm.output,e.strm.next_out,a),e.strm.next_out+=a,e.strm.avail_out-=a,e.strm.total_out+=a)}while(0===s);return d-=e.strm.avail_in,d&&(d>=e.w_size?(e.matches=2,e.window.set(e.strm.input.subarray(e.strm.next_in-e.w_size,e.strm.next_in),0),e.strstart=e.w_size,e.insert=e.strstart):(e.window_size-e.strstart<=d&&(e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,e.insert>e.strstart&&(e.insert=e.strstart)),e.window.set(e.strm.input.subarray(e.strm.next_in-d,e.strm.next_in),e.strstart),e.strstart+=d,e.insert+=d>e.w_size-e.insert?e.w_size-e.insert:d),e.block_start=e.strstart),e.high_water<e.strstart&&(e.high_water=e.strstart),s?4:t!==m&&t!==u&&0===e.strm.avail_in&&e.strstart===e.block_start?2:(r=e.window_size-e.strstart,e.strm.avail_in>r&&e.block_start>=e.w_size&&(e.block_start-=e.w_size,e.strstart-=e.w_size,e.window.set(e.window.subarray(e.w_size,e.w_size+e.strstart),0),e.matches<2&&e.matches++,r+=e.w_size,e.insert>e.strstart&&(e.insert=e.strstart)),r>e.strm.avail_in&&(r=e.strm.avail_in),r&&(H(e.strm,e.window,e.strstart,r),e.strstart+=r,e.insert+=r>e.w_size-e.insert?e.w_size-e.insert:r),e.high_water<e.strstart&&(e.high_water=e.strstart),r=e.bi_valid+42>>3,r=e.pending_buf_size-r>65535?65535:e.pending_buf_size-r,n=r>e.w_size?e.w_size:r,i=e.strstart-e.block_start,(i>=n||(i||t===u)&&t!==m&&0===e.strm.avail_in&&i<=r)&&(a=i>r?r:i,s=t===u&&0===e.strm.avail_in&&a===i?1:0,p(e,e.block_start,a,s),e.block_start+=a,O(e.strm)),s?3:1)},G=(e,t)=>{let a,i;for(;;){if(e.lookahead<A){if(q(e),e.lookahead<A&&t===m)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=F(e,e.ins_h,e.window[e.strstart+3-1]),a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==a&&e.strstart-a<=e.w_size-A&&(e.match_length=z(e,a)),e.match_length>=3)if(i=n(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){e.match_length--;do{e.strstart++,e.ins_h=F(e,e.ins_h,e.window[e.strstart+3-1]),a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!==--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=F(e,e.ins_h,e.window[e.strstart+1]);else i=n(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(i&&(U(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,t===u?(U(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(U(e,!1),0===e.strm.avail_out)?1:2},Z=(e,t)=>{let a,i,p;for(;;){if(e.lookahead<A){if(q(e),e.lookahead<A&&t===m)return 1;if(0===e.lookahead)break}if(a=0,e.lookahead>=3&&(e.ins_h=F(e,e.ins_h,e.window[e.strstart+3-1]),a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==a&&e.prev_length<e.max_lazy_match&&e.strstart-a<=e.w_size-A&&(e.match_length=z(e,a),e.match_length<=5&&(e.strategy===x||3===e.match_length&&e.strstart-e.match_start>4096)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){p=e.strstart+e.lookahead-3,i=n(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=p&&(e.ins_h=F(e,e.ins_h,e.window[e.strstart+3-1]),a=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!==--e.prev_length);if(e.match_available=0,e.match_length=2,e.strstart++,i&&(U(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if(i=n(e,0,e.window[e.strstart-1]),i&&U(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(i=n(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,t===u?(U(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(U(e,!1),0===e.strm.avail_out)?1:2};function Y(e,t,a,i,p){this.good_length=e,this.max_lazy=t,this.nice_length=a,this.max_chain=i,this.func=p}const K=[new Y(0,0,0,0,W),new Y(4,4,8,4,G),new Y(4,5,16,8,G),new Y(4,6,32,32,G),new Y(4,4,16,16,Z),new Y(8,16,32,32,Z),new Y(8,16,128,128,Z),new Y(8,32,128,256,Z),new Y(32,128,258,1024,Z),new Y(32,258,258,4096,Z)];function X(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=C,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),P(this.dyn_ltree),P(this.dyn_dtree),P(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),P(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),P(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const J=e=>{if(!e)return 1;const t=e.state;return!t||t.strm!==e||t.status!==$&&57!==t.status&&69!==t.status&&73!==t.status&&91!==t.status&&103!==t.status&&t.status!==R&&t.status!==V?1:0},Q=e=>{if(J(e))return M(e,y);e.total_in=e.total_out=0,e.data_type=k;const t=e.state;return t.pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=2===t.wrap?57:t.wrap?$:R,e.adler=2===t.wrap?0:1,t.last_flush=-2,i(t),g},ee=e=>{const t=Q(e);var a;return t===g&&((a=e.state).window_size=2*a.w_size,P(a.head),a.max_lazy_match=K[a.level].max_lazy,a.good_match=K[a.level].good_length,a.nice_match=K[a.level].nice_length,a.max_chain_length=K[a.level].max_chain,a.strstart=0,a.block_start=0,a.lookahead=0,a.insert=0,a.match_length=a.prev_length=2,a.match_available=0,a.ins_h=0),t},te=(e,t,a,i,p,r)=>{if(!e)return y;let n=1;if(t===b&&(t=6),i<0?(n=0,i=-i):i>15&&(n=2,i-=16),p<1||p>9||a!==C||i<8||i>15||t<0||t>9||r<0||r>D||8===i&&1!==n)return M(e,y);8===i&&(i=9);const s=new X;return e.state=s,s.strm=e,s.status=$,s.wrap=n,s.gzhead=null,s.w_bits=i,s.w_size=1<<s.w_bits,s.w_mask=s.w_size-1,s.hash_bits=p+7,s.hash_size=1<<s.hash_bits,s.hash_mask=s.hash_size-1,s.hash_shift=~~((s.hash_bits+3-1)/3),s.window=new Uint8Array(2*s.w_size),s.head=new Uint16Array(s.hash_size),s.prev=new Uint16Array(s.w_size),s.lit_bufsize=1<<p+6,s.pending_buf_size=4*s.lit_bufsize,s.pending_buf=new Uint8Array(s.pending_buf_size),s.sym_buf=s.lit_bufsize,s.sym_end=3*(s.lit_bufsize-1),s.level=t,s.strategy=r,s.method=a,ee(e)};e.exports.deflateInit=(e,t)=>te(e,t,C,15,8,E),e.exports.deflateInit2=te,e.exports.deflateReset=ee,e.exports.deflateResetKeep=Q,e.exports.deflateSetHeader=(e,t)=>J(e)||2!==e.state.wrap?y:(e.state.gzhead=t,g),e.exports.deflate=(e,t)=>{if(J(e)||t>f||t<0)return e?M(e,y):y;const a=e.state;if(!e.output||0!==e.avail_in&&!e.input||a.status===V&&t!==u)return M(e,0===e.avail_out?w:y);const i=a.last_flush;if(a.last_flush=t,0!==a.pending){if(O(e),0===e.avail_out)return a.last_flush=-1,g}else if(0===e.avail_in&&I(t)<=I(i)&&t!==u)return M(e,w);if(a.status===V&&0!==e.avail_in)return M(e,w);if(a.status===$&&0===a.wrap&&(a.status=R),a.status===$){let t=C+(a.w_bits-8<<4)<<8,i=-1;if(i=a.strategy>=S||a.level<2?0:a.level<6?1:6===a.level?2:3,t|=i<<6,0!==a.strstart&&(t|=32),t+=31-t%31,B(a,t),0!==a.strstart&&(B(a,e.adler>>>16),B(a,65535&e.adler)),e.adler=1,a.status=R,O(e),0!==a.pending)return a.last_flush=-1,g}if(57===a.status)if(e.adler=0,j(a,31),j(a,139),j(a,8),a.gzhead)j(a,(a.gzhead.text?1:0)+(a.gzhead.hcrc?2:0)+(a.gzhead.extra?4:0)+(a.gzhead.name?8:0)+(a.gzhead.comment?16:0)),j(a,255&a.gzhead.time),j(a,a.gzhead.time>>8&255),j(a,a.gzhead.time>>16&255),j(a,a.gzhead.time>>24&255),j(a,9===a.level?2:a.strategy>=S||a.level<2?4:0),j(a,255&a.gzhead.os),a.gzhead.extra&&a.gzhead.extra.length&&(j(a,255&a.gzhead.extra.length),j(a,a.gzhead.extra.length>>8&255)),a.gzhead.hcrc&&(e.adler=o(e.adler,a.pending_buf,a.pending,0)),a.gzindex=0,a.status=69;else if(j(a,0),j(a,0),j(a,0),j(a,0),j(a,0),j(a,9===a.level?2:a.strategy>=S||a.level<2?4:0),j(a,3),a.status=R,O(e),0!==a.pending)return a.last_flush=-1,g;if(69===a.status){if(a.gzhead.extra){let t=a.pending,i=(65535&a.gzhead.extra.length)-a.gzindex;for(;a.pending+i>a.pending_buf_size;){let p=a.pending_buf_size-a.pending;if(a.pending_buf.set(a.gzhead.extra.subarray(a.gzindex,a.gzindex+p),a.pending),a.pending=a.pending_buf_size,a.gzhead.hcrc&&a.pending>t&&(e.adler=o(e.adler,a.pending_buf,a.pending-t,t)),a.gzindex+=p,O(e),0!==a.pending)return a.last_flush=-1,g;t=0,i-=p}let p=new Uint8Array(a.gzhead.extra);a.pending_buf.set(p.subarray(a.gzindex,a.gzindex+i),a.pending),a.pending+=i,a.gzhead.hcrc&&a.pending>t&&(e.adler=o(e.adler,a.pending_buf,a.pending-t,t)),a.gzindex=0}a.status=73}if(73===a.status){if(a.gzhead.name){let t,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(e.adler=o(e.adler,a.pending_buf,a.pending-i,i)),O(e),0!==a.pending)return a.last_flush=-1,g;i=0}t=a.gzindex<a.gzhead.name.length?255&a.gzhead.name.charCodeAt(a.gzindex++):0,j(a,t)}while(0!==t);a.gzhead.hcrc&&a.pending>i&&(e.adler=o(e.adler,a.pending_buf,a.pending-i,i)),a.gzindex=0}a.status=91}if(91===a.status){if(a.gzhead.comment){let t,i=a.pending;do{if(a.pending===a.pending_buf_size){if(a.gzhead.hcrc&&a.pending>i&&(e.adler=o(e.adler,a.pending_buf,a.pending-i,i)),O(e),0!==a.pending)return a.last_flush=-1,g;i=0}t=a.gzindex<a.gzhead.comment.length?255&a.gzhead.comment.charCodeAt(a.gzindex++):0,j(a,t)}while(0!==t);a.gzhead.hcrc&&a.pending>i&&(e.adler=o(e.adler,a.pending_buf,a.pending-i,i))}a.status=103}if(103===a.status){if(a.gzhead.hcrc){if(a.pending+2>a.pending_buf_size&&(O(e),0!==a.pending))return a.last_flush=-1,g;j(a,255&e.adler),j(a,e.adler>>8&255),e.adler=0}if(a.status=R,O(e),0!==a.pending)return a.last_flush=-1,g}if(0!==e.avail_in||0!==a.lookahead||t!==m&&a.status!==V){let i=0===a.level?W(a,t):a.strategy===S?((e,t)=>{let a;for(;;){if(0===e.lookahead&&(q(e),0===e.lookahead)){if(t===m)return 1;break}if(e.match_length=0,a=n(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,a&&(U(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===u?(U(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(U(e,!1),0===e.strm.avail_out)?1:2})(a,t):a.strategy===T?((e,t)=>{let a,i,p,r;const s=e.window;for(;;){if(e.lookahead<=N){if(q(e),e.lookahead<=N&&t===m)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&e.strstart>0&&(p=e.strstart-1,i=s[p],i===s[++p]&&i===s[++p]&&i===s[++p])){r=e.strstart+N;do{}while(i===s[++p]&&i===s[++p]&&i===s[++p]&&i===s[++p]&&i===s[++p]&&i===s[++p]&&i===s[++p]&&i===s[++p]&&p<r);e.match_length=N-(r-p),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(a=n(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(a=n(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),a&&(U(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,t===u?(U(e,!0),0===e.strm.avail_out?3:4):e.sym_next&&(U(e,!1),0===e.strm.avail_out)?1:2})(a,t):K[a.level].func(a,t);if(3!==i&&4!==i||(a.status=V),1===i||3===i)return 0===e.avail_out&&(a.last_flush=-1),g;if(2===i&&(t===c?s(a):t!==f&&(p(a,0,0,!1),t===h&&(P(a.head),0===a.lookahead&&(a.strstart=0,a.block_start=0,a.insert=0))),O(e),0===e.avail_out))return a.last_flush=-1,g}return t!==u?g:a.wrap<=0?v:(2===a.wrap?(j(a,255&e.adler),j(a,e.adler>>8&255),j(a,e.adler>>16&255),j(a,e.adler>>24&255),j(a,255&e.total_in),j(a,e.total_in>>8&255),j(a,e.total_in>>16&255),j(a,e.total_in>>24&255)):(B(a,e.adler>>>16),B(a,65535&e.adler)),O(e),a.wrap>0&&(a.wrap=-a.wrap),0!==a.pending?g:v)},e.exports.deflateEnd=e=>{if(J(e))return y;const t=e.state.status;return e.state=null,t===R?M(e,_):g},e.exports.deflateSetDictionary=(e,t)=>{let a=t.length;if(J(e))return y;const i=e.state,p=i.wrap;if(2===p||1===p&&i.status!==$||i.lookahead)return y;if(1===p&&(e.adler=d(e.adler,t,a,0)),i.wrap=0,a>=i.w_size){0===p&&(P(i.head),i.strstart=0,i.block_start=0,i.insert=0);let e=new Uint8Array(i.w_size);e.set(t.subarray(a-i.w_size,a),0),t=e,a=i.w_size}const r=e.avail_in,n=e.next_in,s=e.input;for(e.avail_in=a,e.next_in=0,e.input=t,q(i);i.lookahead>=3;){let e=i.strstart,t=i.lookahead-2;do{i.ins_h=F(i,i.ins_h,i.window[e+3-1]),i.prev[e&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=e,e++}while(--t);i.strstart=e,i.lookahead=2,q(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,e.next_in=n,e.input=s,e.avail_in=r,i.wrap=p,g},e.exports.deflateInfo="pako deflate (from Nodeca project)"},8446:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DataLoader=void 0;const i=a(4417);t.DataLoader=class{constructor(){this.cache=new Map,this.loadingPromises=new Map,this.logger=i.Logger.getInstance()}async loadEnhancedExamples(){return this.loadModule("enhancedExamples",async()=>(this.logger.debug("Lazy loading enhanced examples..."),(await Promise.resolve().then(()=>a(1844))).ENHANCED_EXAMPLES))}async loadStaticExamples(){return this.loadModule("staticExamples",async()=>(this.logger.debug("Lazy loading static examples..."),(await Promise.resolve().then(()=>a(8704))).STATIC_EXAMPLES))}async loadSpecialMethods(){return this.loadModule("specialMethods",async()=>(this.logger.debug("Lazy loading special methods..."),(await Promise.resolve().then(()=>a(8058))).SPECIAL_METHOD_DESCRIPTIONS))}async loadDocumentationUrls(){return this.loadModule("documentationUrls",async()=>{this.logger.debug("Lazy loading documentation URLs...");const e=await Promise.resolve().then(()=>a(2145));return{MAP:e.MAP,MODULES:e.MODULES,OPERATORS:e.OPERATORS,getDunderInfo:e.getDunderInfo}})}async loadTypingConstructs(){return this.loadModule("typingConstructs",async()=>(this.logger.debug("Lazy loading typing constructs..."),(await Promise.resolve().then(()=>a(1932))).TYPING_CONSTRUCTS))}async loadModule(e,t){if(this.cache.has(e))return this.logger.debug(`Using cached data for: ${e}`),this.cache.get(e);if(this.loadingPromises.has(e))return this.logger.debug(`Reusing in-flight load for: ${e}`),this.loadingPromises.get(e);const a=(async()=>{try{const a=Date.now(),i=await t(),p=Date.now()-a;return this.cache.set(e,i),this.logger.debug(`Loaded ${e} in ${p}ms`),i}catch(t){throw this.logger.error(`Failed to load ${e}:`,t),t}finally{this.loadingPromises.delete(e)}})();return this.loadingPromises.set(e,a),a}async preloadAll(){this.logger.info("Preloading all data modules...");const e=Date.now();await Promise.all([this.loadEnhancedExamples(),this.loadStaticExamples(),this.loadSpecialMethods(),this.loadDocumentationUrls(),this.loadTypingConstructs()]);const t=Date.now()-e;this.logger.info(`Preloaded all data modules in ${t}ms`)}clearCache(){this.cache.clear(),this.logger.debug("Data loader cache cleared")}getCacheStats(){return{modulesLoaded:this.cache.size,modulesInFlight:this.loadingPromises.size}}}},8629:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URLValidator=void 0,t.URLValidator=class{static validateURL(e,t){const a={isValid:!0,errors:[],warnings:[]};if(!e||"string"!=typeof e||""===e.trim())return a.isValid=!1,a.errors.push("URL is empty or invalid"),a;let i;try{i=new URL(e)}catch(t){return a.isValid=!1,a.errors.push(`Invalid URL format: "${e}"`),a}if(t?.requireProtocol)if("any"===t.requireProtocol)["http:","https:"].includes(i.protocol)||(a.isValid=!1,a.errors.push("URL must use http:// or https://"));else{const e=`${t.requireProtocol}:`;i.protocol!==e&&(a.isValid=!1,a.errors.push(`URL must use ${t.requireProtocol}://`))}if(t?.mustEndWith&&!e.endsWith(t.mustEndWith)&&a.warnings.push(`URL should end with ${t.mustEndWith} for proper URL resolution`),t?.shouldContain){const i=t.shouldContain.filter(t=>!e.includes(t));i.length>0&&a.warnings.push(`URL may not be valid (expected to contain: ${i.join(" or ")})`)}return a}static validateInventoryURL(e){return this.validateURL(e,{requireProtocol:"any",shouldContain:["objects.inv","_objects"]})}static validateBaseURL(e){return this.validateURL(e,{requireProtocol:"any",mustEndWith:"/"})}static validateName(e){const t={isValid:!0,errors:[],warnings:[]};return e&&"string"==typeof e&&""!==e.trim()?(/^[a-zA-Z0-9_-]+$/.test(e)||t.warnings.push(`Name "${e}" contains unusual characters (expected alphanumeric, underscore, or hyphen)`),t):(t.isValid=!1,t.errors.push("Name is empty or invalid"),t)}static isURLReachable(e){try{const t=new URL(e);return["http:","https:"].includes(t.protocol)&&t.hostname.length>0}catch{return!1}}}},8704:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.STATIC_EXAMPLES=void 0,t.getStaticExamples=function(e){if(t.STATIC_EXAMPLES[e])return t.STATIC_EXAMPLES[e];const a=e.split(".").pop();if(a&&t.STATIC_EXAMPLES[a])return t.STATIC_EXAMPLES[a];const i=[e,e.replace(/^object\./,""),e.replace(/^.*\./,"")];for(const e of i)if(t.STATIC_EXAMPLES[e])return t.STATIC_EXAMPLES[e];return null},t.STATIC_EXAMPLES={len:{examples:['len("hello")  # 5',"len([1, 2, 3, 4])  # 4",'len({"a": 1, "b": 2})  # 2'],description:"Returns the number of items in an object"},str:{examples:['str(42)  # "42"','str(3.14)  # "3.14"','str([1, 2, 3])  # "[1, 2, 3]"'],description:"Converts objects to string representation"},int:{examples:['int("42")  # 42',"int(3.14)  # 3",'int("1010", 2)  # 10 (binary to decimal)'],description:"Converts to integer"},float:{examples:['float("3.14")  # 3.14',"float(42)  # 42.0",'float("inf")  # inf'],description:"Converts to floating point number"},list:{examples:['list("abc")  # ["a", "b", "c"]',"list(range(3))  # [0, 1, 2]","list((1, 2, 3))  # [1, 2, 3]"],description:"Creates a list from an iterable"},dict:{examples:['dict(a=1, b=2)  # {"a": 1, "b": 2}','dict([("x", 1), ("y", 2)])  # {"x": 1, "y": 2}','dict({"a": 1})  # {"a": 1}'],description:"Creates a dictionary"},set:{examples:["set([1, 2, 2, 3])  # {1, 2, 3}",'set("hello")  # {"h", "e", "l", "o"}',"set()  # empty set"],description:"Creates a set from an iterable"},range:{examples:["list(range(5))  # [0, 1, 2, 3, 4]","list(range(1, 6))  # [1, 2, 3, 4, 5]","list(range(0, 10, 2))  # [0, 2, 4, 6, 8]"],description:"Creates a sequence of numbers"},max:{examples:["max(1, 3, 2)  # 3","max([1, 3, 2])  # 3",'max("abc", key=len)  # "abc"'],description:"Returns the largest item"},min:{examples:["min(1, 3, 2)  # 1","min([1, 3, 2])  # 1",'min("hello", "hi", key=len)  # "hi"'],description:"Returns the smallest item"},sum:{examples:["sum([1, 2, 3])  # 6","sum([1, 2, 3], 10)  # 16","sum(range(1, 5))  # 10"],description:"Sums numeric values in an iterable"},print:{examples:['print("Hello, World!")','print("Value:", 42)','print("A", "B", "C", sep="-")  # A-B-C'],description:"Prints objects to console"},round:{examples:["round(3.14159, 2)  # 3.14","round(3.7)  # 4","round(1234.5, -1)  # 1230.0"],description:"Rounds a number to given precision"},abs:{examples:["abs(-5)  # 5","abs(3.14)  # 3.14","abs(-2.7)  # 2.7"],description:"Returns the absolute value"},all:{examples:["all([True, True, True])  # True","all([True, False, True])  # False","all([1, 2, 3])  # True (all truthy)"],description:"Returns True if all elements are true"},any:{examples:["any([False, False, True])  # True","any([False, False, False])  # False","any([0, 1, 2])  # True (at least one truthy)"],description:"Returns True if any element is true"},bool:{examples:["bool(1)  # True","bool(0)  # False",'bool("hello")  # True'],description:"Converts to boolean value"},next:{examples:["it = iter([1, 2, 3]); next(it)  # 1",'next(it, "default")  # returns "default" if exhausted',"for item in my_list: break  # next() used internally"],description:"Gets next item from iterator"},object:{examples:["obj = object()  # creates empty object","class MyClass(object): pass","isinstance([], object)  # True (everything inherits from object)"],description:"Base class for all Python classes"},oct:{examples:['oct(8)  # "0o10"','oct(255)  # "0o377"','oct(-8)  # "-0o10"'],description:"Converts integer to octal string"},open:{examples:['with open("file.txt", "r") as f: content = f.read()','with open("data.txt", "w") as f: f.write("Hello")','f = open("file.txt", "r", encoding="utf-8")'],description:"Opens a file and returns a file object"},input:{examples:['name = input("Enter name: ")','age = int(input("Enter age: "))',"data = input().strip()"],description:"Reads a line of input from user"},type:{examples:['type(42)  # <class "int">','type("hello")  # <class "str">','type([1, 2, 3])  # <class "list">'],description:"Returns the type of an object"},isinstance:{examples:["isinstance(42, int)  # True",'isinstance("hello", str)  # True',"isinstance([1, 2], (list, tuple))  # True"],description:"Checks if object is instance of class"},hasattr:{examples:['hasattr("hello", "upper")  # True','hasattr([1, 2], "append")  # True','hasattr(42, "split")  # False'],description:"Checks if object has an attribute"},getattr:{examples:['getattr("hello", "upper")  # <method "upper">','getattr(obj, "name", "default")','getattr([1, 2], "append")'],description:"Gets an attribute from an object"},zip:{examples:['list(zip([1, 2], ["a", "b"]))  # [(1, "a"), (2, "b")]','list(zip("abc", "123"))  # [("a", "1"), ("b", "2"), ("c", "3")]','dict(zip(["x", "y"], [1, 2]))  # {"x": 1, "y": 2}'],description:"Combines multiple iterables"},enumerate:{examples:['list(enumerate(["a", "b", "c"]))  # [(0, "a"), (1, "b"), (2, "c")]','list(enumerate("abc", 1))  # [(1, "a"), (2, "b"), (3, "c")]',"for i, val in enumerate(items): ..."],description:"Returns enumerated pairs of index and value"},sorted:{examples:["sorted([3, 1, 2])  # [1, 2, 3]",'sorted("hello")  # ["e", "h", "l", "l", "o"]','sorted(["apple", "pie"], key=len)  # ["pie", "apple"]'],description:"Returns a sorted list"},reversed:{examples:["list(reversed([1, 2, 3]))  # [3, 2, 1]",'list(reversed("hello"))  # ["o", "l", "l", "e", "h"]','"".join(reversed("hello"))  # "olleh"'],description:"Returns a reverse iterator"},filter:{examples:["list(filter(lambda x: x > 0, [-1, 0, 1, 2]))  # [1, 2]",'list(filter(str.isdigit, ["a", "1", "b", "2"]))  # ["1", "2"]','list(filter(None, [0, 1, "", "hello"]))  # [1, "hello"]'],description:"Filters items based on a function"},map:{examples:['list(map(str.upper, ["a", "b", "c"]))  # ["A", "B", "C"]','list(map(len, ["hi", "hello"]))  # [2, 5]',"list(map(lambda x: x * 2, [1, 2, 3]))  # [2, 4, 6]"],description:"Applies function to all items"},"str.upper":{examples:['"hello".upper()  # "HELLO"','"Hello World".upper()  # "HELLO WORLD"',"name.upper()"],description:"Converts to uppercase"},"str.lower":{examples:['"HELLO".lower()  # "hello"','"Hello World".lower()  # "hello world"',"text.lower()"],description:"Converts to lowercase"},"str.strip":{examples:['"  hello  ".strip()  # "hello"','"...hello...".strip(".")  # "hello"',"user_input.strip()"],description:"Removes whitespace or specified characters"},"str.split":{examples:['"a,b,c".split(",")  # ["a", "b", "c"]','"hello world".split()  # ["hello", "world"]','"a:b:c".split(":", 1)  # ["a", "b:c"]'],description:"Splits string into list"},"str.join":{examples:['",".join(["a", "b", "c"])  # "a,b,c"','" ".join(["hello", "world"])  # "hello world"','"".join(["a", "b", "c"])  # "abc"'],description:"Joins iterable with separator"},"str.replace":{examples:['"hello world".replace("world", "Python")  # "hello Python"','"aaa".replace("a", "b", 2)  # "bba"','text.replace(" ", "_")'],description:"Replaces occurrences of substring"},"str.find":{examples:['"hello".find("ll")  # 2','"hello".find("x")  # -1','"hello world".find("world")  # 6'],description:"Finds index of substring (-1 if not found)"},"str.startswith":{examples:['"hello".startswith("he")  # True','"hello".startswith("world")  # False','filename.startswith("data_")'],description:"Checks if string starts with prefix"},"str.endswith":{examples:['"hello.txt".endswith(".txt")  # True','"hello.txt".endswith(".py")  # False','filename.endswith((".txt", ".csv"))'],description:"Checks if string ends with suffix"},"str.format":{examples:['"Hello, {}!".format("World")  # "Hello, World!"','"{0} {1}".format("Hello", "World")  # "Hello World"','"{name} is {age}".format(name="Alice", age=30)'],description:"Formats string with placeholders"},"list.append":{examples:["lst = [1, 2]; lst.append(3)  # [1, 2, 3]",'fruits.append("apple")',"numbers.append(len(data))"],description:"Adds item to end of list"},"list.extend":{examples:["lst = [1, 2]; lst.extend([3, 4])  # [1, 2, 3, 4]",'fruits.extend(["apple", "banana"])',"numbers.extend(range(5))"],description:"Extends list with items from iterable"},"list.insert":{examples:["lst = [1, 3]; lst.insert(1, 2)  # [1, 2, 3]",'fruits.insert(0, "apple")',"data.insert(len(data), item)"],description:"Inserts item at specified index"},"list.remove":{examples:["lst = [1, 2, 3]; lst.remove(2)  # [1, 3]",'fruits.remove("apple")',"if item in lst: lst.remove(item)"],description:"Removes first occurrence of item"},"list.pop":{examples:["lst = [1, 2, 3]; lst.pop()  # 3, lst becomes [1, 2]","lst = [1, 2, 3]; lst.pop(0)  # 1, lst becomes [2, 3]","last_item = stack.pop()"],description:"Removes and returns item at index (last by default)"},"list.index":{examples:["[1, 2, 3].index(2)  # 1",'fruits.index("apple")  # position of "apple"',"data.index(target, start, end)"],description:"Returns index of first occurrence"},"list.count":{examples:["[1, 2, 2, 3].count(2)  # 2",'text.count("a")  # count of "a" in text','votes.count("yes")'],description:"Counts occurrences of item"},"list.sort":{examples:["lst = [3, 1, 2]; lst.sort()  # [1, 2, 3]","names.sort(key=str.lower)","data.sort(reverse=True)"],description:"Sorts list in place"},"list.reverse":{examples:["lst = [1, 2, 3]; lst.reverse()  # [3, 2, 1]","numbers.reverse()","words[::-1]  # alternative reversal"],description:"Reverses list in place"},"list.copy":{examples:["original = [1, 2, 3]; copy = original.copy()","backup = data.copy()","new_list = old_list.copy()"],description:"Creates shallow copy of list"},"list.clear":{examples:["lst = [1, 2, 3]; lst.clear()  # []","cache.clear()","temporary_data.clear()"],description:"Removes all items from list"},"dict.get":{examples:['data = {"name": "Alice"}; data.get("name")  # "Alice"','data.get("age", 0)  # 0 (default)','config.get("debug", False)'],description:"Gets value for key with optional default"},"dict.keys":{examples:['data = {"a": 1, "b": 2}; list(data.keys())  # ["a", "b"]',"for key in data.keys(): ...","set(config.keys())"],description:"Returns view of dictionary keys"},"dict.values":{examples:['data = {"a": 1, "b": 2}; list(data.values())  # [1, 2]',"for value in data.values(): ...","sum(scores.values())"],description:"Returns view of dictionary values"},"dict.items":{examples:['data = {"a": 1, "b": 2}; list(data.items())  # [("a", 1), ("b", 2)]',"for key, value in data.items(): ...","dict(reversed(data.items()))"],description:"Returns view of key-value pairs"},"dict.update":{examples:['data = {"a": 1}; data.update({"b": 2})  # {"a": 1, "b": 2}',"config.update(new_settings)","data.update(b=2, c=3)"],description:"Updates dictionary with key-value pairs"},"dict.pop":{examples:['data = {"a": 1, "b": 2}; data.pop("a")  # 1','value = cache.pop("key", None)','last_item = data.pop("last", "default")'],description:"Removes and returns value for key"},"dict.setdefault":{examples:['data = {}; data.setdefault("count", 0)  # 0',"groups.setdefault(key, []).append(item)","cache.setdefault(url, fetch_data(url))"],description:"Gets value or sets default if key missing"},"set.add":{examples:["data = {1, 2}; data.add(3)  # {1, 2, 3}","seen.add(item)","valid_ids.add(user_id)"],description:"Adds element to set"},"set.remove":{examples:["data = {1, 2, 3}; data.remove(2)  # {1, 3}","active_users.remove(user_id)","if item in data: data.remove(item)"],description:"Removes element from set (raises KeyError if not found)"},"set.discard":{examples:["data = {1, 2, 3}; data.discard(2)  # {1, 3}","data.discard(999)  # no error if not found","seen.discard(old_item)"],description:"Removes element from set (no error if not found)"},"set.union":{examples:["{1, 2}.union({2, 3})  # {1, 2, 3}","set1 | set2  # alternative syntax","all_items = set1.union(set2, set3)"],description:"Returns union of sets"},"set.intersection":{examples:["{1, 2, 3}.intersection({2, 3, 4})  # {2, 3}","set1 & set2  # alternative syntax","common = users1.intersection(users2)"],description:"Returns intersection of sets"},"set.difference":{examples:["{1, 2, 3}.difference({2, 4})  # {1, 3}","set1 - set2  # alternative syntax","unique = all_items.difference(common)"],description:"Returns elements in set but not in others"},__init__:{examples:["def __init__(self, name): self.name = name","def __init__(self, x, y=0): ...","super().__init__(args)"],description:"Constructor method called when creating instances"},__str__:{examples:['def __str__(self): return f"Person({self.name})"',"def __str__(self): return str(self.value)","str(obj)  # calls obj.__str__()"],description:"Returns string representation for humans"},__repr__:{examples:['def __repr__(self): return f"Point({self.x}, {self.y})"','def __repr__(self): return f"{self.__class__.__name__}({self.data!r})"',"repr(obj)  # calls obj.__repr__()"],description:"Returns unambiguous string representation for developers"},__len__:{examples:["def __len__(self): return len(self.items)","def __len__(self): return self.size","len(obj)  # calls obj.__len__()"],description:"Returns length when len() is called"},__getitem__:{examples:["def __getitem__(self, key): return self.data[key]","def __getitem__(self, index): return self.items[index]","obj[key]  # calls obj.__getitem__(key)"],description:"Enables indexing with []"},__setitem__:{examples:["def __setitem__(self, key, value): self.data[key] = value","def __setitem__(self, index, value): self.items[index] = value","obj[key] = value  # calls obj.__setitem__(key, value)"],description:"Enables item assignment with []"},__contains__:{examples:["def __contains__(self, item): return item in self.data","def __contains__(self, value): return value in self.items","item in obj  # calls obj.__contains__(item)"],description:'Enables membership testing with "in"'},__iter__:{examples:["def __iter__(self): return iter(self.items)","def __iter__(self): yield from self.data","for item in obj:  # calls obj.__iter__()"],description:"Makes object iterable"},__call__:{examples:["def __call__(self, *args): return self.func(*args)","def __call__(self, x): return self.multiplier * x","obj()  # calls obj.__call__()"],description:"Makes object callable like a function"},__enter__:{examples:["def __enter__(self): return self","def __enter__(self): self.file = open(self.filename); return self.file","with obj:  # calls obj.__enter__()"],description:"Context manager entry"},__exit__:{examples:["def __exit__(self, exc_type, exc_val, exc_tb): return False","def __exit__(self, *args): self.cleanup(); return False",'# called when exiting "with" statement'],description:"Context manager exit"},bin:{examples:['bin(8)  # "0b1000"','bin(255)  # "0b11111111"','bin(-8)  # "-0b1000"'],description:"Converts integer to binary string"},hex:{examples:['hex(255)  # "0xff"','hex(16)  # "0x10"','hex(-255)  # "-0xff"'],description:"Converts integer to hexadecimal string"},ord:{examples:['ord("A")  # 65','ord("a")  # 97','ord("€")  # 8364'],description:"Returns Unicode code point of character"},chr:{examples:['chr(65)  # "A"','chr(97)  # "a"','chr(8364)  # "€"'],description:"Returns character for Unicode code point"},id:{examples:["x = [1, 2, 3]; id(x)  # unique object ID",'id("hello")  # memory address',"a = b = []; id(a) == id(b)  # True"],description:"Returns unique identifier of an object"},hash:{examples:['hash("hello")  # hash value of string',"hash(42)  # hash value of integer","hash((1, 2, 3))  # hash value of tuple"],description:"Returns hash value of an object"},pow:{examples:["pow(2, 3)  # 8","pow(2, 3, 5)  # 3 (2**3 % 5)","pow(10, -2)  # 0.01"],description:"Returns x to the power of y, optionally modulo z"},divmod:{examples:["divmod(10, 3)  # (3, 1)","divmod(9, 4)  # (2, 1)","divmod(20, 6)  # (3, 2)"],description:"Returns quotient and remainder as tuple"},callable:{examples:["callable(len)  # True","callable(42)  # False","callable(lambda x: x)  # True"],description:"Checks if object is callable"},iter:{examples:["it = iter([1, 2, 3])",'it = iter("hello")','it = iter({"a": 1, "b": 2})'],description:"Creates an iterator from an iterable"},globals:{examples:["globals()  # dict of global variables",'globals()["__name__"]  # module name','"my_var" in globals()  # check if exists'],description:"Returns dictionary of global variables"},locals:{examples:["def func(): print(locals())  # local variables","locals()  # current local scope",'x = 5; "x" in locals()  # True'],description:"Returns dictionary of local variables"},vars:{examples:["vars()  # same as locals()","vars(obj)  # obj.__dict__","class C: pass; vars(C())  # {}"],description:"Returns __dict__ attribute of object"},dir:{examples:["dir([])  # list methods and attributes","dir(str)  # string class methods","dir()  # names in current scope"],description:"Lists attributes of an object"},eval:{examples:['eval("2 + 3")  # 5','eval("len([1, 2, 3])")  # 3','x = 5; eval("x * 2")  # 10'],description:"Evaluates a string as Python expression"},exec:{examples:["exec(\"print('Hello')\")  # Hello",'exec("x = 5\\nprint(x)")  # 5','code = "for i in range(3): print(i)"; exec(code)'],description:"Executes Python code from string"},compile:{examples:['code = compile("2 + 3", "<string>", "eval")','compiled = compile("print(x)", "<string>", "exec")','eval(compile("1 + 1", "<string>", "eval"))  # 2'],description:"Compiles source into code object"},repr:{examples:['repr("hello")  # "\'hello\'"','repr([1, 2, 3])  # "[1, 2, 3]"','repr({"a": 1})  # "{\'a\': 1}"'],description:"Returns unambiguous string representation"},ascii:{examples:['ascii("hello")  # "\'hello\'"','ascii("café")  # "\'caf\\xe9\'"','ascii("🐍")  # "\'\\U0001f40d\'"'],description:"Returns ASCII-only string representation"},format:{examples:['format(42, "d")  # "42"','format(3.14159, ".2f")  # "3.14"','format(255, "x")  # "ff"'],description:"Formats a value using format specification"},slice:{examples:["s = slice(1, 5); [1,2,3,4,5,6][s]  # [2,3,4,5]","slice(None, 3)  # equivalent to [:3]","slice(1, None, 2)  # equivalent to [1::2]"],description:"Creates a slice object"},memoryview:{examples:['mv = memoryview(b"hello")','mv = memoryview(bytearray(b"hello"))','list(memoryview(b"abc"))  # [97, 98, 99]'],description:"Creates a memory view object"},bytearray:{examples:['bytearray(b"hello")  # mutable bytes','bytearray([65, 66, 67])  # bytearray(b"ABC")',"bytearray(5)  # 5 zero bytes"],description:"Creates a mutable byte array"},bytes:{examples:['bytes("hello", "utf-8")  # b"hello"','bytes([65, 66, 67])  # b"ABC"','bytes(5)  # b"\\x00\\x00\\x00\\x00\\x00"'],description:"Creates immutable bytes object"},complex:{examples:["complex(3, 4)  # (3+4j)",'complex("3+4j")  # (3+4j)',"complex(2.5)  # (2.5+0j)"],description:"Creates complex number"},frozenset:{examples:["frozenset([1, 2, 3, 2])  # frozenset({1, 2, 3})",'frozenset("hello")  # frozenset({"h", "e", "l", "o"})',"frozenset()  # empty frozenset"],description:"Creates immutable set"},property:{examples:["@property\\ndef name(self): return self._name","name = property(get_name, set_name)","class C: x = property(lambda self: self._x)"],description:"Creates a property attribute"},staticmethod:{examples:["@staticmethod\\ndef add(x, y): return x + y","add = staticmethod(lambda x, y: x + y)","class Math: add = staticmethod(lambda x, y: x + y)"],description:"Creates static method"},classmethod:{examples:["@classmethod\\ndef from_string(cls, s): return cls(s)","from_str = classmethod(lambda cls, s: cls(s))","class Person: create = classmethod(lambda cls, name: cls(name))"],description:"Creates class method"},super:{examples:["super().__init__(args)","super(Child, self).method()","class Child(Parent): def __init__(self): super().__init__()"],description:"Returns proxy object for method calls to parent"},if:{examples:['if x > 0: print("positive")',"if condition: do_something() else: do_other()","value = x if x > 0 else 0  # ternary operator"],description:"Conditional statement"},else:{examples:["# If-else statement","if age >= 18:",'    print("Adult")',"else:",'    print("Minor")',"","# Multiple conditions","if score >= 90:",'    grade = "A"',"elif score >= 80:",'    grade = "B"',"else:",'    grade = "C"',"","# For-else loop","for item in search_list:","    if item == target:",'        print("Found!")',"        break","else:",'    print("Not found")',"","# While-else loop","while attempts < max_attempts:","    if try_operation():",'        print("Success!")',"        break","    attempts += 1","else:",'    print("Failed after all attempts")',"","# Try-else (no exception)","try:","    result = risky_operation()","except ValueError:",'    print("Error occurred")',"else:",'    print("No exception, result:", result)',"","# Ternary operator with else",'status = "pass" if score >= 60 else "fail"',"max_val = a if a > b else b"],description:"Else clause used with if, for, while, and try statements"},for:{examples:["# Basic iteration","for i in range(5): print(i)  # 0, 1, 2, 3, 4","for item in [1, 2, 3]: print(item)",'for char in "hello": print(char)',"","# Dictionary iteration","for key in my_dict: print(key)","for key, value in my_dict.items(): print(key, value)","for value in my_dict.values(): print(value)","","# Enumerate with index","for i, item in enumerate(my_list): print(i, item)",'for i, char in enumerate("abc", 1): print(i, char)  # start=1',"","# Multiple iterables","for x, y in zip(list1, list2): print(x, y)","for item in itertools.chain(list1, list2): print(item)","","# List comprehensions","squares = [x**2 for x in range(5)]","evens = [x for x in range(10) if x % 2 == 0]","pairs = [(x, y) for x in range(3) for y in range(3)]","","# Nested loops","for i in range(3):","    for j in range(3):",'        print(f"({i}, {j})")',"","# With else clause","for item in my_list:","    if condition(item): break","else:",'    print("No item found")',"","# Advanced patterns",'for line in open("file.txt"): print(line.strip())',"for match in re.finditer(pattern, text): print(match.group())","for item in reversed(my_list): print(item)"],description:"For loop statement with comprehensive iteration patterns"},while:{examples:["# Basic while loop","x = 5","while x > 0:","    print(x)","    x -= 1","","# Infinite loop with break","while True:",'    user_input = input("Enter command: ")','    if user_input == "quit":',"        break","    process_command(user_input)","","# While with else clause","while condition:","    if found_what_we_need:","        break","    do_something()","else:",'    print("Loop completed without break")',"","# Common patterns","while items:  # while list is not empty","    item = items.pop()","    process(item)","","while line := file.readline():  # walrus operator","    process_line(line)"],description:"While loop with comprehensive patterns"},def:{examples:["# Basic function","def greet(name):",'    return f"Hello, {name}!"',"","# Function with default arguments","def power(base, exponent=2):","    return base ** exponent","","# Function with *args and **kwargs","def flexible_func(*args, **kwargs):",'    print(f"Args: {args}, Kwargs: {kwargs}")',"","# Type hints","def add_numbers(a: int, b: int) -> int:","    return a + b","","# Nested functions","def outer_func(x):","    def inner_func(y):","        return x + y","    return inner_func","","# Decorators","@staticmethod","def utility_func():",'    return "I am a static method"',"","# Lambda functions","square = lambda x: x ** 2","sorted(items, key=lambda x: x.name)","","# Generator functions","def countdown(n):","    while n > 0:","        yield n","        n -= 1"],description:"Function definition with comprehensive patterns"},class:{examples:["# Basic class","class Person:","    def __init__(self, name, age):","        self.name = name","        self.age = age","","    def greet(self):",'        return f"Hi, I\'m {self.name}"',"","# Class with inheritance","class Student(Person):","    def __init__(self, name, age, student_id):","        super().__init__(name, age)","        self.student_id = student_id","","# Class with properties","class Circle:","    def __init__(self, radius):","        self._radius = radius","","    @property","    def area(self):","        return 3.14159 * self._radius ** 2","","# Class with class methods","class MathUtils:","    PI = 3.14159","","    @classmethod","    def from_diameter(cls, diameter):","        return cls(diameter / 2)","","    @staticmethod","    def degrees_to_radians(degrees):","        return degrees * MathUtils.PI / 180","","# Abstract base class","from abc import ABC, abstractmethod","","class Shape(ABC):","    @abstractmethod","    def area(self):","        pass","","# Data classes (Python 3.7+)","from dataclasses import dataclass","","@dataclass","class Point:","    x: float","    y: float","","    def distance(self, other):","        return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5"],description:"Class definition with comprehensive patterns"},try:{examples:["try: risky_operation() except Exception: handle_error()","try: x = int(s) except ValueError: x = 0","try: do_something() finally: cleanup()"],description:"Exception handling"},except:{examples:['except ValueError: print("Invalid value")',"except (TypeError, ValueError): handle_error()",'except Exception as e: print(f"Error: {e}")'],description:"Exception handler"},finally:{examples:["try: do_work() finally: cleanup()","finally: close_file()","try: risky() except: handle() finally: cleanup()"],description:"Always executed cleanup code"},with:{examples:['with open("file.txt") as f: content = f.read()',"with lock: critical_section()","with context_manager as cm: use(cm)"],description:"Context manager statement"},import:{examples:["import os","import json as js","import sys, os, re"],description:"Module import statement"},from:{examples:["from os import path","from json import loads, dumps","from . import module  # relative import"],description:"Selective import statement"},return:{examples:["def func(): return 42","return x + y","return  # returns None"],description:"Function return statement"},yield:{examples:["def gen(): yield 1; yield 2","yield from range(5)","result = yield value  # generator receives value"],description:"Generator yield statement"},lambda:{examples:["square = lambda x: x ** 2","sorted(items, key=lambda x: x.name)","map(lambda x: x * 2, [1, 2, 3])"],description:"Anonymous function expression"},pass:{examples:["if condition: pass  # placeholder","def todo(): pass  # not implemented yet","class EmptyClass: pass"],description:"No-operation placeholder"},break:{examples:["for i in range(10): if i == 5: break","while True: if done: break","for item in items: if item is None: break"],description:"Exit from loop"},continue:{examples:["for i in range(10): if i % 2: continue; print(i)","while True: if skip_condition: continue","for item in items: if not valid(item): continue"],description:"Skip to next loop iteration"},raise:{examples:['raise ValueError("Invalid input")',"raise  # re-raise current exception",'raise CustomError("Something went wrong") from e'],description:"Raise an exception"},assert:{examples:['assert x > 0, "x must be positive"',"assert len(items) == 5",'assert callable(func), "func must be callable"'],description:"Debug assertion statement"},del:{examples:["del my_list[0]  # delete first element",'del my_dict["key"]  # delete dictionary entry',"del variable  # delete variable"],description:"Delete statement"},global:{examples:["def func(): global x; x = 10","global counter; counter += 1","def reset(): global data; data = []"],description:"Declare global variable"},nonlocal:{examples:["def outer(): x = 1; def inner(): nonlocal x; x = 2","nonlocal counter; counter += 1",'def closure(): nonlocal state; state = "changed"'],description:"Declare nonlocal variable"},True:{examples:["x = True",'if True: print("always runs")',"bool(1) == True  # True"],description:"Boolean true value"},False:{examples:["x = False",'if not False: print("runs")',"bool(0) == False  # True"],description:"Boolean false value"},None:{examples:["x = None",'if x is None: print("x is None")',"def func(): return None  # implicit"],description:"Null value"},Exception:{examples:["try: risky() except Exception: handle()",'raise Exception("Generic error")',"class CustomError(Exception): pass"],description:"Base exception class"},ValueError:{examples:['try: int("not_a_number") except ValueError: handle()','raise ValueError("Invalid value provided")','if x < 0: raise ValueError("x must be non-negative")'],description:"Invalid value exception"},TypeError:{examples:['try: "string" + 5 except TypeError: handle()','raise TypeError("Expected string, got int")','if not isinstance(x, str): raise TypeError("x must be string")'],description:"Type-related exception"},KeyError:{examples:['try: my_dict["missing_key"] except KeyError: handle()','raise KeyError("Key not found")','if key not in my_dict: raise KeyError(f"Missing key: {key}")'],description:"Dictionary key not found exception"},IndexError:{examples:["try: my_list[100] except IndexError: handle()",'raise IndexError("List index out of range")','if i >= len(my_list): raise IndexError("Index too large")'],description:"Sequence index out of range exception"},AttributeError:{examples:["try: obj.missing_attr except AttributeError: handle()","raise AttributeError(\"Object has no attribute 'x'\")",'if not hasattr(obj, "attr"): raise AttributeError("Missing attr")'],description:"Attribute not found exception"},FileNotFoundError:{examples:['try: open("missing.txt") except FileNotFoundError: handle()','raise FileNotFoundError("File does not exist")',"if not os.path.exists(path): raise FileNotFoundError(path)"],description:"File not found exception"},ImportError:{examples:["try: import missing_module except ImportError: handle()",'raise ImportError("Cannot import required module")',"try: from module import func except ImportError: func = None"],description:"Module import failed exception"},ZeroDivisionError:{examples:["try: x / 0 except ZeroDivisionError: handle()",'raise ZeroDivisionError("Division by zero")','if divisor == 0: raise ZeroDivisionError("Cannot divide by zero")'],description:"Division by zero exception"},StopIteration:{examples:["try: next(iterator) except StopIteration: handle()",'raise StopIteration("Iterator exhausted")',"def my_generator(): yield 1; raise StopIteration"],description:"Iterator exhausted exception"},"file-operations":{examples:["# Reading files",'with open("file.txt", "r") as f: content = f.read()','with open("file.txt", "r", encoding="utf-8") as f: lines = f.readlines()','with open("data.json", "r") as f: data = json.load(f)',"","# Writing files",'with open("output.txt", "w") as f: f.write("Hello")','with open("data.json", "w") as f: json.dump(data, f)','with open("log.txt", "a") as f: f.write("New entry\\n")',"","# Binary files",'with open("image.jpg", "rb") as f: data = f.read()','with open("output.bin", "wb") as f: f.write(bytes_data)',"","# Advanced modes",'f = open("file.txt", "r+")  # read and write','f = open("file.txt", "x")   # exclusive creation'],description:"Comprehensive file operation patterns"},"f-string":{examples:['name = "Alice"; f"Hello, {name}!"  # "Hello, Alice!"','x = 42; f"The answer is {x}"  # "The answer is 42"','pi = 3.14159; f"Pi is {pi:.2f}"  # "Pi is 3.14"','items = [1, 2, 3]; f"Items: {items}"  # "Items: [1, 2, 3]"',"","# Expressions in f-strings",'f"{2 + 3}"  # "5"','f"{len([1, 2, 3])}"  # "3"','f"{\'hello\'.upper()}"  # "HELLO"',"","# Format specifiers",'f"{42:05d}"  # "00042" (zero-padded)','f"{3.14159:.3f}"  # "3.142" (3 decimal places)','f"{255:x}"  # "ff" (hexadecimal)','f"{1000000:,}"  # "1,000,000" (thousands separator)'],description:"F-string literal for formatted string expressions"},"list-comprehension":{examples:["# Basic list comprehensions","[x**2 for x in range(5)]  # [0, 1, 4, 9, 16]","[x for x in range(10) if x % 2 == 0]  # [0, 2, 4, 6, 8]",'[len(word) for word in ["hello", "world"]]  # [5, 5]',"","# Nested comprehensions","[[x*y for x in range(3)] for y in range(3)]","[x for sublist in lists for x in sublist]  # flatten","","# With functions","[word.upper() for word in words]",'[int(x) for x in "12345"]  # [1, 2, 3, 4, 5]',"","# Complex conditions","[x for x in range(20) if x % 2 == 0 if x % 3 == 0]","[x if x > 0 else 0 for x in numbers]  # conditional expression"],description:"List comprehension syntax for creating lists"},"dict-comprehension":{examples:["# Basic dict comprehensions","{x: x**2 for x in range(5)}  # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}",'{word: len(word) for word in ["hello", "world"]}',"{k: v.upper() for k, v in my_dict.items()}","","# With conditions","{x: x**2 for x in range(10) if x % 2 == 0}","{k: v for k, v in my_dict.items() if v is not None}","","# From sequences",'{i: chr(65+i) for i in range(26)}  # {0: "A", 1: "B", ...}','dict(enumerate(["a", "b", "c"]))  # {0: "a", 1: "b", 2: "c"}'],description:"Dictionary comprehension syntax for creating dictionaries"},"set-comprehension":{examples:["# Basic set comprehensions","{x**2 for x in range(5)}  # {0, 1, 4, 9, 16}","{len(word) for word in words}","{x % 3 for x in range(10)}  # {0, 1, 2}","","# With conditions","{x for x in range(20) if x % 2 == 0}","{word.lower() for word in words if len(word) > 3}"],description:"Set comprehension syntax for creating sets"},"generator-expression":{examples:["# Basic generator expressions","gen = (x**2 for x in range(5))","sum(x for x in range(100) if x % 2 == 0)","max(len(line) for line in file)","","# Memory efficient","total = sum(x**2 for x in huge_list)  # no intermediate list","any(x > 100 for x in numbers)  # stops at first True","all(x > 0 for x in numbers)  # stops at first False","","# Chaining","words = (line.strip() for line in file)","lengths = (len(word) for word in words)","result = list(lengths)"],description:"Generator expression for memory-efficient iteration"},"str.format_map":{examples:['template = "Hello {name}, you are {age} years old"','data = {"name": "Alice", "age": 30}','template.format_map(data)  # "Hello Alice, you are 30 years old"',"","class SafeDict(dict):",'    def __missing__(self, key): return "{" + key + "}"','template.format_map(SafeDict(name="Bob"))  # missing keys safe'],description:"Formats string using mapping object"},"str.partition":{examples:['"hello-world-python".partition("-")  # ("hello", "-", "world-python")','"no-separator".partition("-")  # ("no-separator", "", "")','email = "user@domain.com"','username, sep, domain = email.partition("@")'],description:"Splits string into three parts around separator"},"str.rpartition":{examples:['"hello-world-python".rpartition("-")  # ("hello-world", "-", "python")','path = "/home/user/file.txt"','directory, sep, filename = path.rpartition("/")'],description:"Splits string into three parts around last separator"},"str.expandtabs":{examples:['"hello\\tworld".expandtabs()  # "hello   world" (8 spaces)','"hello\\tworld".expandtabs(4)  # "hello   world" (4 spaces)','code = "def\\tfunc():\\n\\tpass"',"print(code.expandtabs(4))  # proper indentation"],description:"Expands tabs to spaces"},"str.translate":{examples:["# Create translation table",'table = str.maketrans("aeiou", "12345")','"hello world".translate(table)  # "h2ll4 w4rld"',"","# Remove characters",'table = str.maketrans("", "", "aeiou")','"hello world".translate(table)  # "hll wrld"',"","# Unicode translation",'table = str.maketrans("αβγ", "abc")','"αβγδε".translate(table)  # "abcδε"'],description:"Translates characters using translation table"},"list-advanced":{examples:["# Shallow copy","original = [1, [2, 3], 4]","copy = original.copy()","copy[0] = 99  # original unchanged","copy[1][0] = 99  # original[1] also changes!","","# Alternative methods","copy = original[:]  # slice copy","copy = list(original)  # constructor copy","","# Deep copy (for nested structures)","import copy","deep_copy = copy.deepcopy(original)"],description:"Advanced list operations and copying"},"dict.fromkeys":{examples:["# Create dict with same value",'dict.fromkeys(["a", "b", "c"], 0)  # {"a": 0, "b": 0, "c": 0}','dict.fromkeys("abc")  # {"a": None, "b": None, "c": None}',"dict.fromkeys(range(3), [])  # {0: [], 1: [], 2: []}","","# Warning: mutable defaults share reference!",'d = dict.fromkeys(["a", "b"], [])','d["a"].append(1)  # d becomes {"a": [1], "b": [1]}',"","# Safe pattern for mutable defaults",'d = {k: [] for k in ["a", "b"]}  # each gets own list'],description:"Creates dictionary from keys with same default value"},"itertools.chain":{examples:["import itertools","list1 = [1, 2, 3]","list2 = [4, 5, 6]","list(itertools.chain(list1, list2))  # [1, 2, 3, 4, 5, 6]","","# Chain multiple iterables",'itertools.chain([1, 2], "abc", [3, 4])  # 1, 2, "a", "b", "c", 3, 4',"","# Chain from iterable of iterables","lists = [[1, 2], [3, 4], [5, 6]]","list(itertools.chain.from_iterable(lists))  # [1, 2, 3, 4, 5, 6]"],description:"Chains multiple iterables together"},"itertools.combinations":{examples:["import itertools",'items = ["A", "B", "C", "D"]',"list(itertools.combinations(items, 2))",'# [("A", "B"), ("A", "C"), ("A", "D"), ("B", "C"), ("B", "D"), ("C", "D")]',"","# All possible pairs","for pair in itertools.combinations(range(4), 2):","    print(pair)  # (0,1), (0,2), (0,3), (1,2), (1,3), (2,3)","","# Combinations of different lengths",'list(itertools.combinations("abc", 1))  # [("a",), ("b",), ("c",)]'],description:"Returns combinations of elements"},"itertools.permutations":{examples:["import itertools",'items = ["A", "B", "C"]',"list(itertools.permutations(items))",'# [("A","B","C"), ("A","C","B"), ("B","A","C"), ("B","C","A"), ("C","A","B"), ("C","B","A")]',"","# Permutations of specific length",'list(itertools.permutations("abc", 2))','# [("a","b"), ("a","c"), ("b","a"), ("b","c"), ("c","a"), ("c","b")]',"","# Generate all arrangements","for perm in itertools.permutations(range(3)):","    print(perm)"],description:"Returns permutations of elements"},"itertools.product":{examples:["import itertools",'colors = ["red", "blue"]','sizes = ["S", "M", "L"]',"list(itertools.product(colors, sizes))",'# [("red","S"), ("red","M"), ("red","L"), ("blue","S"), ("blue","M"), ("blue","L")]',"","# Cartesian product with repeat",'list(itertools.product("AB", repeat=2))  # [("A","A"), ("A","B"), ("B","A"), ("B","B")]',"","# Multiple iterables",'list(itertools.product([1, 2], ["a", "b"], [10, 20]))'],description:"Cartesian product of iterables"},setattr:{examples:["# Set attribute on object",'setattr(obj, "name", "Alice")','setattr(obj, "age", 30)',"","# Dynamic attribute setting",'attr_name = "dynamic_attr"','setattr(obj, attr_name, "dynamic_value")',"","# Set method on class",'def new_method(self): return "hello"','setattr(MyClass, "greet", new_method)'],description:"Sets attribute on object"},delattr:{examples:["# Delete attribute from object",'delattr(obj, "name")',"","# Conditional deletion",'if hasattr(obj, "temp_attr"):','    delattr(obj, "temp_attr")',"","# Dynamic attribute deletion",'attr_to_delete = "unwanted_attr"',"delattr(obj, attr_to_delete)"],description:"Deletes attribute from object"},"type-checking":{examples:["# Basic type checking","isinstance(42, int)  # True",'isinstance("hello", str)  # True',"isinstance([1, 2, 3], list)  # True","","# Multiple types","isinstance(value, (int, float))  # True if int OR float","isinstance(obj, (list, tuple, set))  # True if any sequence type","","# Class inheritance","class Animal: pass","class Dog(Animal): pass","my_dog = Dog()","isinstance(my_dog, Animal)  # True (inheritance)","isinstance(my_dog, Dog)     # True (exact type)"],description:"Comprehensive type checking with isinstance"},issubclass:{examples:["# Check inheritance","class Animal: pass","class Dog(Animal): pass","issubclass(Dog, Animal)  # True","issubclass(Animal, Dog)  # False","","# Multiple parent classes","issubclass(bool, int)  # True (bool inherits from int)","issubclass(Dog, (Animal, object))  # True if subclass of any","","# Built-in types","issubclass(list, object)  # True (everything inherits from object)","issubclass(int, (int, float))  # True"],description:"Checks if class is subclass of another class"},"contextlib.contextmanager":{examples:["from contextlib import contextmanager","","@contextmanager","def my_context():",'    print("Entering context")',"    try:",'        yield "resource"',"    finally:",'        print("Exiting context")',"","# Usage","with my_context() as resource:",'    print(f"Using {resource}")',"","# Error handling context","@contextmanager","def database_transaction():","    try:","        db.begin()","        yield db","        db.commit()","    except Exception:","        db.rollback()","        raise"],description:"Decorator to create context managers from generators"},"functools.wraps":{examples:["from functools import wraps","","def my_decorator(func):","    @wraps(func)","    def wrapper(*args, **kwargs):",'        print(f"Calling {func.__name__}")',"        return func(*args, **kwargs)","    return wrapper","","@my_decorator","def greet(name):",'    """Greets a person"""','    return f"Hello, {name}!"',"","# Preserves original function metadata",'print(greet.__name__)  # "greet" (not "wrapper")','print(greet.__doc__)   # "Greets a person"'],description:"Preserves function metadata when decorating"},"functools.lru_cache":{examples:["from functools import lru_cache","","@lru_cache(maxsize=128)","def fibonacci(n):","    if n < 2:","        return n","    return fibonacci(n-1) + fibonacci(n-2)","","# Faster recursive calls due to caching","print(fibonacci(100))","","# Cache info","print(fibonacci.cache_info())  # hits, misses, maxsize, currsize","fibonacci.cache_clear()  # clear cache"],description:"LRU (Least Recently Used) cache decorator"},match:{examples:["# Basic pattern matching","match value:","    case 1:",'        print("one")',"    case 2:",'        print("two")',"    case _:",'        print("other")',"","# Pattern with conditions","match point:","    case (x, y) if x == y:",'        print("Diagonal")',"    case (x, 0):",'        print("On x-axis")',"    case (0, y):",'        print("On y-axis")',"","# Class patterns","match shape:","    case Circle(radius=r):",'        print(f"Circle with radius {r}")',"    case Rectangle(width=w, height=h):",'        print(f"Rectangle {w}x{h}")'],description:"Structural pattern matching (Python 3.10+)"},and:{examples:["# Logical AND","if age >= 18 and has_license:",'    print("Can drive")',"","# Multiple conditions","if x > 0 and x < 100 and x % 2 == 0:",'    print("Even number between 0 and 100")',"","# Short-circuit evaluation","if user and user.is_active():",'    print("Active user")',"","# In expressions","result = condition1 and condition2 and condition3","valid = name and email and password"],description:"Logical AND operator"},or:{examples:["# Logical OR","if is_admin or is_moderator:",'    print("Has elevated privileges")',"","# Default values",'name = user_name or "Anonymous"',"config = custom_config or default_config","","# Multiple conditions",'if status == "error" or status == "failed" or status == "timeout":',"    handle_error()","","# Function parameters","def greet(name=None):",'    name = name or "World"','    print(f"Hello, {name}!")'],description:"Logical OR operator"},not:{examples:["# Logical NOT","if not is_empty(list):","    process(list)","","# Negating conditions","if not (age < 18 or age > 65):",'    print("Working age")',"","# Boolean negation","active = not inactive","visible = not hidden","","# Membership testing","if item not in forbidden_items:","    allow_item(item)","","# Identity testing","if response is not None:","    process_response(response)"],description:"Logical NOT operator"},in:{examples:["# List membership","if item in shopping_list:",'    print("Already in cart")',"","# String containment",'if "error" in log_message:',"    handle_error()","","# Dictionary keys",'if "name" in user_data:','    name = user_data["name"]',"","# Range checking","if score in range(90, 101):",'    grade = "A"',"","# Multiple containers",'valid_extensions = [".txt", ".csv", ".json"]',"if file_extension in valid_extensions:","    process_file()"],description:"Membership testing operator"},is:{examples:["# Identity comparison","if value is None:",'    print("No value provided")',"","# Boolean literals","if flag is True:","    activate_feature()","if status is False:","    show_error()","","# Same object check","if current_user is admin_user:",'    print("Admin logged in")',"","# Type checking","if type(obj) is list:","    process_list(obj)","","# Singleton comparison","if result is not None:","    return result"],description:"Identity comparison operator"},async:{examples:["# Async function definition","async def fetch_data():","    response = await http_client.get(url)","    return response.json()","","# Async context manager","async def process_file():",'    async with aiofiles.open("file.txt") as f:',"        content = await f.read()","        return content","","# Async generator","async def async_range(n):","    for i in range(n):","        await asyncio.sleep(0.1)","        yield i","","# Async comprehension","results = [item async for item in async_generator()]"],description:"Async function and coroutine definition"},await:{examples:["# Await coroutine","async def main():","    result = await fetch_data()","    return result","","# Await with error handling","async def safe_operation():","    try:","        result = await risky_async_operation()","        return result","    except Exception as e:",'        print(f"Error: {e}")',"        return None","","# Multiple awaits","async def parallel_tasks():","    task1 = asyncio.create_task(fetch_data())","    task2 = asyncio.create_task(process_data())","    result1 = await task1","    result2 = await task2","    return result1, result2"],description:"Await expression for coroutines"}}},9023:e=>{e.exports=require("util")},9075:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TypeDetectionService=void 0;class a{static detectTypeFromValue(e){const t=e.indexOf("#"),a=(t>=0?e.substring(0,t):e).trim();if(this.isStringLiteral(a))return"str";if(this.isListComprehension(a))return"list";if(this.isDictComprehension(a))return"dict";if(this.isSetComprehension(a))return"set";if(this.isGeneratorExpression(a))return"generator";if(a.startsWith("["))return"list";if(a.startsWith("{")&&a.includes(":"))return"dict";if(a.startsWith("{"))return"set";if(a.startsWith("("))return"tuple";if(this.isLambdaExpression(a))return"function";if(/^-?\d+$/.test(a))return"int";if(/^-?\d+\.\d+$/.test(a))return"float";if("True"===a||"False"===a)return"bool";if("None"===a)return"NoneType";return this.detectConstructorCall(a)||void 0}static isStringLiteral(e){return e.startsWith('"')||e.startsWith("'")||e.startsWith('r"')||e.startsWith("r'")||e.startsWith('f"')||e.startsWith("f'")||e.startsWith('b"')||e.startsWith("b'")}static isListComprehension(e){return e.startsWith("[")&&e.includes(" for ")}static isDictComprehension(e){return e.startsWith("{")&&e.includes(":")&&e.includes(" for ")}static isSetComprehension(e){return e.startsWith("{")&&!e.includes(":")&&e.includes(" for ")}static isGeneratorExpression(e){return e.startsWith("(")&&e.includes(" for ")}static isLambdaExpression(e){return e.startsWith("lambda ")||/^lambda\s*:/.test(e)}static detectConstructorCall(e){const t=e.match(/^([\w.]+)\(/);if(t){const e=t[1];return["str","int","float","list","dict","set","tuple","bool"].includes(e)||e.includes("."),e}}static isBuiltinType(e){return this.BUILTIN_TYPES.includes(e)}}t.TypeDetectionService=a,a.BUILTIN_TYPES=["str","int","float","list","dict","set","tuple","bool","bytes","bytearray","frozenset","complex","NoneType","generator","function"]},9221:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ContextDetector=void 0;const i=a(9310),p=a(4417),r=a(9075),n=a(5097);t.ContextDetector=class{constructor(){this.regexCache=new n.BoundedCache({maxSize:i.LIMITS.MAX_REGEX_CACHE_SIZE})}getCachedRegex(e,t){const a=`${e}:${t||""}`;if(!this.regexCache.has(a))try{this.regexCache.set(a,new RegExp(e,t))}catch(t){return p.Logger.getInstance().error(`Invalid regex pattern: ${e}`,t),/(?!)/}return this.regexCache.get(a)}detectVariableTypeFromContext(e,t,a){if(!a)return;const p=i.PERFORMANCE.MAX_CONTEXT_SCAN_LINES,r=Math.max(0,t.line-p),n=Math.min(e.lineCount-1,t.line+5);for(const i of this.scanLines(e,t.line,r,-1)){const e=this.detectTypeFromLine(i,a);if(e)return e}for(const i of this.scanLines(e,t.line+1,n,1)){const e=this.detectTypeFromLine(i,a);if(e)return e}}*scanLines(e,t,a,i){if(i>0)for(let i=t;i<=a;i++)yield e.lineAt(i).text;else for(let i=t;i>=a;i--)yield e.lineAt(i).text}detectTypeFromLine(e,t){const a=this.getCachedRegex(`${t}\\s*=\\s*(.+)$`),i=e.match(a);if(i){const e=r.TypeDetectionService.detectTypeFromValue(i[1].trim());if(e)return e}const p=this.getCachedRegex(`${t}\\s*:=\\s*(.+)$`),n=e.match(p);if(n){const e=r.TypeDetectionService.detectTypeFromValue(n[1].trim());if(e)return e}const s=this.getCachedRegex(`${t}\\s*:\\s*(\\w+)`),d=e.match(s);if(d){const e=d[1];if(r.TypeDetectionService.isBuiltinType(e))return e}}detectMethodContext(e,t,a){const i=e.lineAt(t.line).text,r=i.substring(0,t.character);p.Logger.getInstance().info(`[detectMethodContext] Line: "${i}"`),p.Logger.getInstance().info(`[detectMethodContext] BeforePosition: "${r}"`),p.Logger.getInstance().info(`[detectMethodContext] MethodName: "${a}"`);const n=r.match(this.getCachedRegex("(\\w+)\\s*\\.\\s*$"));if(p.Logger.getInstance().info("[detectMethodContext] DotMatch: "+(n?`Found: ${n[0]}, Object: ${n[1]}`:"No match")),n){const a=n[1],i=this.detectVariableTypeFromContext(e,t,a);return p.Logger.getInstance().info(`[detectMethodContext] Detected type for "${a}": ${i}`),i&&i.includes("."),i}return{strip:"str",split:"str",join:"str",replace:"str",find:"str",startswith:"str",endswith:"str",upper:"str",lower:"str",capitalize:"str",title:"str",isdigit:"str",isalpha:"str",isalnum:"str",format:"str",append:"list",extend:"list",insert:"list",remove:"list",pop:"list",clear:"list",copy:"list",reverse:"list",sort:"list",keys:"dict",values:"dict",items:"dict",get:"dict",setdefault:"dict",update:"dict",popitem:"dict",fromkeys:"dict",add:"set",discard:"set",union:"set",intersection:"set",head:"DataFrame",tail:"DataFrame",describe:"DataFrame",groupby:"DataFrame",merge:"DataFrame",fillna:"DataFrame",dropna:"DataFrame",drop:"DataFrame",reset_index:"DataFrame",value_counts:"Series",unique:"Series",nunique:"Series",reshape:"ndarray",flatten:"ndarray",transpose:"ndarray",dot:"ndarray",sum:"ndarray",mean:"ndarray"}[a]}}},9310:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CONSTANTS=t.DEBUG=t.FEATURES=t.LIMITS=t.NETWORK=t.UI=t.CACHE=t.PERFORMANCE=void 0,t.daysToMs=function(e){return 24*e*60*60*1e3},t.hoursToMs=function(e){return 60*e*60*1e3},t.minutesToMs=function(e){return 60*e*1e3},t.secondsToMs=function(e){return 1e3*e},t.PERFORMANCE={STATUS_BAR_UPDATE_INTERVAL:3e4,DEBOUNCE_DELAY:150,VERSION_CACHE_TTL:3e4,REQUEST_TIMEOUT:1e4,HEALTH_CHECK_TIMEOUT:3e3,MAX_CONTEXT_SCAN_LINES:100,MAX_CONCURRENT_REQUESTS:5},t.CACHE={INVENTORY_TTL_DAYS:7,SNIPPET_TTL_HOURS:48,HISTORY_TTL_HOURS:168,MAX_CACHE_SIZE_MB:100,HEALTH_CHECK_INTERVAL:36e5,CLEANUP_INTERVAL:36e5,LIBRARY_DISCOVERY_TTL:864e5,MIN_INVENTORY_SIZE:1024},t.UI={MAX_HOVER_LENGTH:800,MAX_SNIPPET_LINES:12,RECENT_DOCS_LIMIT:50,MAX_PARAM_TABLE_ROWS:10,LOADING_INDICATOR_DELAY:200,SEARCH_RESULTS_LIMIT:50,MIN_WORD_LENGTH:2},t.NETWORK={CB_FAILURE_THRESHOLD:5,CB_SUCCESS_THRESHOLD:2,CB_TIMEOUT:6e4,CB_RESET_TIMEOUT:12e4,MAX_RETRY_ATTEMPTS:3,RETRY_DELAY:1e3,RETRY_BACKOFF_MULTIPLIER:2},t.LIMITS={MAX_VERSION_CACHE_SIZE:10,MAX_PENDING_REQUESTS:20,MAX_REGEX_CACHE_SIZE:100,MAX_HISTORY_SIZE:50,MAX_INVENTORY_ENTRIES:1e4,MAX_DATA_LOADER_CACHE:10},t.FEATURES={ENABLE_PROGRESSIVE_DISCLOSURE:!0,ENABLE_THEME_ADAPTATION:!0,ENABLE_CIRCUIT_BREAKER:!0,ENABLE_REQUEST_DEDUP:!0,ENABLE_LAZY_LOADING:!0,ENABLE_CACHE_HEALTH_CHECKS:!0},t.DEBUG={LOG_PERFORMANCE:!1,LOG_CACHE_STATS:!1,LOG_NETWORK_REQUESTS:!1,VERBOSE_SYMBOL_RESOLUTION:!1},t.CONSTANTS={PERFORMANCE:t.PERFORMANCE,CACHE:t.CACHE,UI:t.UI,NETWORK:t.NETWORK,LIMITS:t.LIMITS,FEATURES:t.FEATURES,DEBUG:t.DEBUG}},9324:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.HoverTheme=void 0;const i=a(1398);t.HoverTheme=class{constructor(){this.currentTheme="dark",this.config=this.loadConfig(),this.detectTheme(),this.setupThemeChangeListener()}loadConfig(){const e=i.workspace.getConfiguration("pythonHover");return{fontSize:e.get("fontSize","medium"),showEmojis:e.get("showEmojis",!0),showColors:e.get("showColors",!0),showBorders:e.get("showBorders",!0)}}detectTheme(){switch(i.window.activeColorTheme.kind){case i.ColorThemeKind.Light:this.currentTheme="light";break;case i.ColorThemeKind.HighContrast:case i.ColorThemeKind.HighContrastLight:this.currentTheme="high-contrast";break;default:this.currentTheme="dark"}}setupThemeChangeListener(){this.themeChangeListener=i.window.onDidChangeActiveColorTheme(()=>{this.detectTheme()})}getCurrentTheme(){return this.currentTheme}getThemedColor(e){const t={light:{accent:"#0066cc",background:"#f5f5f5",text:"#333333",border:"#cccccc",success:"#22863a",warning:"#bf8700",error:"#d73a49"},dark:{accent:"#4daafc",background:"#1e1e1e",text:"#cccccc",border:"#444444",success:"#28a745",warning:"#ffc107",error:"#f85149"},"high-contrast":{accent:"#ffffff",background:"#000000",text:"#ffffff",border:"#ffffff",success:"#00ff00",warning:"#ffff00",error:"#ff0000"}};return t[this.currentTheme][e]||t.dark[e]}getThemedIcon(e,t){if("high-contrast"===this.currentTheme)return e;if(t&&this.config.showColors){const a={accent:"🔵",success:"🟢",warning:"🟡",error:"🔴"};return this.config.showEmojis?`${a[t]} ${e}`:e}return e}refresh(){this.config=this.loadConfig(),this.detectTheme()}getConfig(){return{...this.config}}dispose(){this.themeChangeListener?.dispose()}createMarkdown(){const e=new i.MarkdownString;return e.isTrusted=!0,e.supportHtml=!0,e.supportThemeIcons=!0,e}getSymbolEmoji(e){return this.config.showEmojis?{function:"🔧",method:"⚙️",class:"📦",module:"📚",keyword:"🔑",builtin:"🐍",exception:"⚠️",constant:"💎",variable:"📊",typing:"🏷️",decorator:"✨"}[e]||"📝":""}getSymbolIcon(e){return{function:"$(symbol-function)",method:"$(symbol-method)",class:"$(symbol-class)",module:"$(symbol-namespace)",keyword:"$(symbol-keyword)",builtin:"$(symbol-constant)",exception:"$(error)",constant:"$(symbol-constant)",variable:"$(symbol-variable)",typing:"$(symbol-interface)",decorator:"$(symbol-event)"}[e]||"$(symbol-misc)"}formatHeader(e,t){return`## ${this.getSymbolIcon(t)} \`${e}\`\n\n`}formatSectionHeader(e,t){return`### ${{Parameters:"$(symbol-parameter)",Returns:"$(output)",Example:"$(lightbulb)",Signature:"$(code)",Description:"$(book)",Related:"$(link)",Version:"$(info)"}[e]||"$(chevron-right)"} ${e}\n\n`}formatDivider(){return this.config.showBorders?"\n---\n\n":"\n"}formatBadge(e,t){return this.config.showColors&&t?`${{info:"🔵",success:"🟢",warning:"🟡",error:"🔴"}[t]||""} **\`${e}\`**`:`**\`${e}\`**`}formatCodeBlock(e,t="python"){return`\`\`\`${t}\n${e}\n\`\`\`\n\n`}formatLink(e,t,a){const i=a||"$(link-external)";return`[${this.config.showEmojis&&a?a:i} ${e}](${t})`}formatListItem(e,t){const a={required:"$(circle-filled)",optional:"$(circle-outline)",default:"$(chevron-right)"};return`${t&&a[t]?a[t]:this.config.showEmojis&&t?t:"$(chevron-right)"} ${e}\n`}formatTypeHint(e){const t="$(symbol-interface)";return`${this.config.showEmojis?`🏷️ ${t}`:t} **Type:** \`${e}\``}formatTip(e,t){const a=t||"💡";return`> ${this.config.showEmojis?a:""} **Tip:** ${e}\n\n`}formatNote(e,t){const a=t||"📝";return`> ${this.config.showEmojis?a:""} **Note:** ${e}\n\n`}formatWarning(e){return`> ${this.config.showEmojis?"⚠️":""} **Warning:** ${e}\n\n`}formatActionLinks(e){return e.map(e=>{const t=e.icon||"$(link)";return e.command?`$(${t.replace(/\$\(|\)/g,"")}) [${e.text}](${e.command})`:e.url?`$(link-external) [${e.text}](${e.url})`:`- ${e.text}`}).join(" · ")+"\n"}formatBadgeGroup(e){return e.map(e=>this.formatBadge(e.text,e.type)).join(" ")+"\n\n"}formatParameter(e,t,a=!0){const i=a?"required":"optional",p=a?"**Required:**":"**Optional:**";return this.formatListItem(`${p} \`${e}\` — ${t}`,i)}formatContent(e){return e.trim()+"\n\n"}formatSignature(e){return this.formatCodeBlock(e,"python")}formatParameterTable(e){if(0===e.length)return"";let t="| Parameter | Type | Description |\n";t+="|-----------|------|-------------|\n";for(const a of e)t+=`| ${!1!==a.required?`\`${a.name}\` ✓`:`\`${a.name}\` ○`} | ${a.type?`\`${a.type}\``:"—"} | ${a.description||"—"} |\n`;return t+"\n"}formatSignatureBox(e,t){let a=this.formatSectionHeader("Signature","$(code)");return a+=this.formatCodeBlock(e,"python"),a}formatDeprecation(e,t,a){let i=`\n> ${this.config.showEmojis?"⚠️":"$(warning)"} **DEPRECATED`;return e&&(i+=` (since ${e})`),i+="**\n>\n",i+=`> ${t}`,a&&(i+=`\n>\n> **Use instead:** \`${a}\``),i+="\n\n",i}formatReturnType(e,t){let a=`$(output) **Returns:** \`${e}\``;return t&&(a+=` — ${t}`),a+"\n\n"}formatQuickActions(e){return"🎯 "+e.map(e=>{const t=`$(${e.icon.replace(/\$\(|\)/g,"")})`,a=e.command||e.url;return`[${t} ${e.text}](${a})`}).join(" · ")+"\n\n"}formatSeeAlso(e){if(0===e.length)return"";let t=this.formatSectionHeader("See Also","$(link)");for(const a of e)t+=`- ${a.type?this.getSymbolIcon(a.type):"$(symbol-misc)"} \`${a.name}\` — ${a.description}\n`;return t+"\n"}formatPerformance(e,t){let a=`${this.config.showEmojis?"⚡":"$(zap)"} **Performance:** ${e}`;return t&&(a+=` — ${t}`),a+"\n\n"}formatKeyboardHint(e){return 0===e.length?"":`\n---\n\n${this.config.showEmojis?"⌨️":"$(keyboard)"} ${e.map(e=>`**${e.keys}**: ${e.description}`).join(" | ")}\n`}formatContentWithTruncation(e,t,a){if(e.length<=t)return this.formatContent(e);let i=e.substring(0,t);const p=i.lastIndexOf(". "),r=i.lastIndexOf("\n"),n=Math.max(p,r);n>.7*t&&(i=e.substring(0,n+1));let s=i.trim();return s+=a?` [...read more](${a})`:" [...]",this.formatContent(s)}formatTypeAnnotation(e,t){let a=`$(symbol-interface) \`${e}\``;return t&&(a+=` — ${t}`),a}formatParameterDetailed(e){let t=`${!1!==e.required?"$(circle-filled)":"$(circle-outline)"} **\`${e.name}\`**`;return e.type&&(t+=` : ${this.formatTypeAnnotation(e.type)}`),e.default&&(t+=` = \`${e.default}\``),t+="\n\n",t+=`  ${e.description}`,e.constraints&&(t+=`\n  $(info) *${e.constraints}*`),t+"\n\n"}formatSummaryBox(e){return`> 📋 **Summary:** ${e}\n\n`}formatVersionMetadata(e){const t=[];return e.added&&t.push(`$(history) New in version **${e.added}**`),e.changed&&t.push(`$(git-commit) Changed in version **${e.changed}**`),e.deprecated&&t.push(`$(warning) Deprecated: ${e.deprecated}`),0===t.length?"":"\n"+t.join(" · ")+"\n\n"}formatRaises(e){if(0===e.length)return"";let t=this.formatSectionHeader("Raises");for(const a of e)t+=`$(error) \`${a}\`\n`;return t+"\n"}formatYields(e){return`$(symbol-property) **Yields:** ${e}\n\n`}formatAttributes(e){if(0===e.length)return"";let t=this.formatSectionHeader("Attributes");for(const a of e)t+=`$(symbol-property) **\`${a.name}\`**`,a.type&&(t+=` : \`${a.type}\``),t+=`\n  ${a.description}\n\n`;return t}formatExampleEnhanced(e){let t="";return e.title&&(t+=`**${e.title}**\n\n`),e.description&&(t+=`${e.description}\n\n`),t+=this.formatCodeBlock(e.code,"python"),e.output&&(t+="**Output:**\n",t+=this.formatCodeBlock(e.output,"text")),t}}},9332:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DocumentationFetcher=void 0;const i=a(2145),p=a(8087),r=a(4417),n=a(5766),s=a(9647),d=a(1265),o=a(9764);function l(e){const t="https://docs.python.org/3/"+e.url;return e.anchor?`${t}#${e.anchor}`:t}t.DocumentationFetcher=class{constructor(e,t){this.cacheManager=e,this.logger=r.Logger.getInstance(),this.exampleEnricher=new d.ExampleEnricher,this.pypiService=t||new n.PyPIService,this.sphinxParser=new o.SphinxParser}async fetchRichDocumentation(e,t){try{this.logger.debug(`📚 Fetching rich documentation from ${e}`);const a=`rich-doc:${e}`,i=await this.cacheManager.get(a);if(i)return this.logger.debug(`✅ Found cached rich documentation for ${t}`),i.data;const p=await s.FetchWithTimeout.fetch(e,{timeoutMs:8e3});if(!p.ok)return this.logger.debug(`❌ Failed to fetch documentation: ${p.status}`),null;const r=await p.text(),n=this.sphinxParser.parseDocumentation(r),d={name:t,url:e,...n};return await this.cacheManager.set(a,d,"24h"),this.logger.debug(`✅ Successfully parsed rich documentation for ${t}`),this.logger.debug(`   - Parameters: ${n.parameters?.length||0}`),this.logger.debug(`   - Examples: ${n.examples?.length||0}`),this.logger.debug(`   - See Also: ${n.seeAlso?.length||0}`),d}catch(e){return this.logger.debug(`Error fetching rich documentation: ${e}`),null}}async fetchDocumentationForSymbol(e,t,a=25,p){let n;if(this.logger.debug(`Fetching documentation for symbol: ${e}, context: ${p}, hasEntry: ${!!t}`),function(e){const t=e in i.MAP||e in i.MODULES||!!(0,i.getDunderInfo)(e);return r.Logger.getInstance().debug(`hasDocumentationMapping("${e}"): ${t} (in MAP: ${e in i.MAP}, in MODULES: ${e in i.MODULES})`),t}(e))this.logger.debug(`Using direct URL mapping for symbol: ${e}`),n=await this.fetchFromDirectMapping(e,a);else if(t)this.logger.debug(`Using intersphinx inventory for symbol: ${e}`),n=await this.fetchDocumentation(t,a);else{this.logger.debug(`No documentation source found for symbol: ${e}`);let t="https://docs.python.org/3/",a=`No documentation found for '${e}'.`;if(p){const i=p.split(".")[0];t={numpy:"https://numpy.org/doc/stable/",pandas:"https://pandas.pydata.org/docs/",requests:"https://docs.python-requests.org/",flask:"https://flask.palletsprojects.com/",django:"https://docs.djangoproject.com/",scipy:"https://docs.scipy.org/doc/scipy/",matplotlib:"https://matplotlib.org/stable/",sklearn:"https://scikit-learn.org/stable/",pytest:"https://docs.pytest.org/",sqlalchemy:"https://docs.sqlalchemy.org/",pydantic:"https://docs.pydantic.dev/",fastapi:"https://fastapi.tiangolo.com/",beautifulsoup4:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/",bs4:"https://www.crummy.com/software/BeautifulSoup/bs4/doc/",selenium:"https://www.selenium.dev/selenium/docs/api/py/",pillow:"https://pillow.readthedocs.io/en/stable/",pil:"https://pillow.readthedocs.io/en/stable/",torch:"https://pytorch.org/docs/stable/",pytorch:"https://pytorch.org/docs/stable/",aiohttp:"https://docs.aiohttp.org/en/stable/",click:"https://click.palletsprojects.com/en/stable/"}[s=i]||`https://pypi.org/project/${s}/`,a=`No documentation found for '${e}'. See the ${i} documentation for details.`}else a=`No documentation found for '${e}'. See the official Python documentation for details.`;n={title:e,content:a,url:t,anchor:""}}var s;return this.exampleEnricher.enrichWithExamples(n,e,p)}async fetchFromDirectMapping(e,t){const a=function(e){if(e in i.MAP)return i.MAP[e];if(e in i.MODULES)return i.MODULES[e];return(0,i.getDunderInfo)(e)||null}(e);if(!a)throw new Error(`No mapping found for symbol: ${e}`);const r=l(a),n=`direct-doc-v1-${e}-${r}`,d=p.CacheManager.hoursToMs(48),o=await this.cacheManager.get(n);if(o&&!await this.cacheManager.isExpired(n,d))return this.logger.debug(`Returning cached direct mapping for symbol: ${e}`),o.data;try{const i="https://docs.python.org/3/"+a.url;this.logger.debug(`Fetching from direct URL: ${i}`);const p=await s.FetchWithTimeout.fetch(i);if(!p.ok)throw new Error(`Failed to fetch documentation: ${p.status}`);const r=await p.text(),d=await this.extractDirectMappingContent(r,a,e,t);return await this.cacheManager.set(n,d),d}catch(t){return this.logger.error(`Error fetching direct mapping for ${e}:`,t),o?o.data:{title:e,content:`Documentation for '${e}' - ${a.title}`,url:r,anchor:a.anchor||""}}}async fetchDocumentation(e,t){const a=`doc-v11-${e.uri}#${e.anchor}`,i=p.CacheManager.hoursToMs(48),r=await this.cacheManager.get(a);if(r&&!await this.cacheManager.isExpired(a,i))return r.data;try{const i=await this.fetchAndExtractSnippet(e,t);return await this.cacheManager.set(a,i),i}catch(t){return r?r.data:(this.logger.error(`Failed to fetch or extract documentation for ${e.name}:`,t),{title:e.name,content:"",url:this.buildFullUrl(e),anchor:e.anchor})}}async fetchAndExtractSnippet(e,t){const a=this.buildFullUrl(e);this.logger.debug(`Fetching documentation from: ${a}`);const i=await s.FetchWithTimeout.fetch(a);if(!i.ok)throw new Error(`Failed to fetch documentation: ${i.status}`);const p=await i.text();this.logger.debug(`Fetched HTML length: ${p.length} characters`);const r=this.extractRelevantSection(p,e.anchor,t,a,e.name);return this.logger.debug(`Extracted snippet length: ${r.length} characters`),this.logger.debug(`Snippet preview: ${r.substring(0,200)}...`),{title:e.name,content:r,url:a,anchor:e.anchor}}buildFullUrl(e){return e.anchor?`${e.uri}#${e.anchor}`:e.uri}extractRelevantSection(e,t,a,i,p){try{if(t){const r=this.extractAnchoredSection(e,t);if(r){const n=this.htmlToMarkdown(r,a,i,p);if(this.logger.debug(`📄 Extracted markdown length: ${n.trim().length} chars`),this.logger.debug(`📄 Preview: ${n.trim().substring(0,150)}...`),n.trim().length<100){this.logger.debug("⚠️ Markdown too short, trying paragraph fallback...");const r=this.extractParagraphsAfterAnchor(e,t,5);if(r){const e=this.htmlToMarkdown(r,a,i,p);return this.logger.debug(`✅ Paragraph fallback succeeded: ${e.trim().length} chars`),e}this.logger.debug("⚠️ Paragraph fallback failed, using original short content")}return n}}const r=this.extractMainContent(e);return this.htmlToMarkdown(r,a,i,p)}catch(e){return this.logger.error("Error extracting section:",e),""}}extractParagraphsAfterAnchor(e,t,a=2){try{const i=new RegExp(`id=["']${this.escapeRegex(t)}["']`,"i"),p=e.match(i);let r=-1;if(p&&"number"==typeof p.index)r=p.index;else{const a=new RegExp(`<a[^>]+href=["'][^"']*#${this.escapeRegex(t)}["'][^>]*>`,"i"),i=e.match(a);i&&"number"==typeof i.index&&(r=i.index)}if(-1===r)return this.logger.debug(`Paragraph fallback: anchor '${t}' not found by id or href`),null;const n=e.substring(r,Math.min(e.length,r+8e3)),s=/<p[^>]*>[\s\S]*?<\/p>/gi,d=[];let o;for(;null!==(o=s.exec(n))&&d.length<a;)d.push(o[0]);if(0===d.length)return this.logger.debug(`Paragraph fallback: no <p> found after anchor '${t}'`),null;const l=d.join("\n\n");return this.logger.debug(`Paragraph fallback: extracted ${d.length} paragraphs for anchor '${t}'`),l}catch(e){return this.logger.error(`Error in paragraph fallback for anchor '${t}':`,e),null}}async fetchOperatorDocumentation(e){const t=i.OPERATORS.find(t=>t===e);return t?{title:t,content:`Documentation for operator '${t}'.`,url:"https://docs.python.org/3/reference/expressions.html",anchor:""}:{title:e,content:`No documentation found for operator '${e}'.`,url:"https://docs.python.org/3/reference/expressions.html",anchor:""}}async extractDirectMappingContent(e,t,a,i){const p=l(t);try{let r;if(t.anchor){const p=this.extractAnchoredSection(e,t.anchor);if(p){const e="https://docs.python.org/3/"+t.url;r=this.htmlToMarkdown(p,i,e,a)}else{this.logger.debug(`Anchor ${t.anchor} not found, using main content`);const p=this.extractMainContent(e),n="https://docs.python.org/3/"+t.url;r=this.htmlToMarkdown(p,i,n,a)}}else{const p=this.extractMainContent(e),n="https://docs.python.org/3/"+t.url;r=this.htmlToMarkdown(p,i,n,a)}return{title:a,content:r||`Documentation for '${a}' - ${t.title}`,url:p,anchor:t.anchor||""}}catch(e){return this.logger.error(`Error extracting direct mapping content for ${a}:`,e),{title:a,content:`Documentation for '${a}' - ${t.title}`,url:p,anchor:t.anchor||""}}}extractAnchoredSection(e,t){this.logger.debug(`Looking for anchor: ${t}`);const a=new RegExp(`<[^>]+id=["']${this.escapeRegex(t)}["'][^>]*>`,"i"),i=e.match(a);if(!i){this.logger.debug(`Anchor ${t} not found in HTML`);const a=new RegExp(`<a[^>]+href=["'][^"']*#${this.escapeRegex(t)}["'][^>]*>`,"i");e.match(a)&&this.logger.debug("Found anchor in href, but not as id");try{const a=t.replace(/[-_]+/g," ").replace(/^the\s+/i,"").trim();if(a.length>2){const t=new RegExp(`<h[1-6][^>]*>[^<]*${this.escapeRegex(a)}[^<]*</h[1-6]>`,"i"),i=e.match(t);if(i){this.logger.debug(`Found header by readable anchor fallback: ${a}`);const t=i.index+i[0].length,p=e.substring(t),r=/<h[1-6][^>]*>/i,n=p.match(r),s=n?t+n.index:Math.min(e.length,t+3500);return i[0]+e.substring(t,s)}}}catch(e){this.logger.debug(`Readable anchor fallback failed for '${t}'`,e)}return null}this.logger.debug(`Found anchor at position ${i.index}`);const p=i.index;if(e.includes("datamodel.html")&&t.startsWith("object."))return this.extractDataModelMethod(e,t,p);if(e.includes("compound_stmts.html")&&["else","elif","finally","except","break","continue","for","while","if","try"].includes(t))return this.extractCompoundStatementKeyword(e,t,p);let r=this.findSectionStart(e,p,t),n=this.findSectionEnd(e,p);this.logger.debug(`Section from ${r} to ${n} (length: ${n-r})`),this.logger.debug(`Section start preview: ${e.substring(r,r+200)}...`);const s=e.substring(r,n);return this.logger.debug(`Extracted HTML length: ${s.length}`),this.logger.debug(`Extracted HTML preview: ${s.substring(0,500)}...`),s}extractDataModelMethod(e,t,a){this.logger.debug(`Using specialized data model extraction for: ${t}`);let i=Math.max(0,a-2e3),p=a+500,r=e.substring(i,p);const n=/<dt[^>]*>/gi;let s,d=i;for(;null!==(s=n.exec(r));){const e=i+s.index,t=i+s.index+s[0].length;if(e<=a&&a<=t+200){d=e,this.logger.debug(`Found method definition dt at position: ${d}`);break}}const o=[/<dt[^>]*>/gi,/<\/dl>/gi,/<h[2-6][^>]*>/gi];let l=Math.min(e.length,a+5e3);const m=e.substring(a+100);for(const e of o){e.lastIndex=0;const t=e.exec(m);if(t){const e=a+100+t.index;l=Math.min(l,e)}}return this.logger.debug(`Data model method section from ${d} to ${l} (length: ${l-d})`),this.logger.debug(`Data model section start preview: ${e.substring(d,d+200)}...`),e.substring(d,l)}extractCompoundStatementKeyword(e,t,a){this.logger.debug(`Using specialized compound statement extraction for: ${t}`);const i=e.substring(a,a+2e4),p=new RegExp(`<h[1-6][^>]*>([^<]*\\b${t}\\b[^<]*statement[^<]*)</h[1-6]>`,"gi").exec(i);if(p){this.logger.debug(`Found section header for ${t}: ${p[1]}`);const i=a+p.index+p[0].length,r=/<h[1-6][^>]*>[^<]*\d+\.\d+\.[^<]*<\/h[1-6]>/i,n=e.substring(i).match(r),s=n?i+n.index:i+3500,d=p[0]+e.substring(i,s);return this.logger.debug(`Extracted section content length: ${d.length}`),this.logger.debug(`Section content preview: ${d.substring(0,200)}...`),d}const r=new RegExp(`<h[1-6][^>]*>([^<]*\\b${t}\\b[^<]*)</h[1-6]>`,"gi").exec(i);if(r){this.logger.debug(`Found alternative header for ${t}: ${r[1]}`);const i=a+r.index+r[0].length,p=e.substring(i),n=r[0].match(/<h([1-6])/)?.[1],s=new RegExp(`<h[1-${n}][^>]*>`,"i"),d=p.match(s),o=d?i+d.index:i+3e3,l=r[0]+e.substring(i,o);return this.logger.debug(`Extracted alternative section content length: ${l.length}`),l}this.logger.debug(`No header found, looking for specific content patterns for ${t}`);const n=[],s=new RegExp(`${t}_stmt\\s*::=`,"i"),d=i.match(s);if(d){this.logger.debug(`Found syntax definition for ${t}`);const e=d.index,a=i.substring(Math.max(0,e-100),e+800),p=/<(?:p|pre|div)[^>]*>[\s\S]*?<\/(?:p|pre|div)>/gi;let r;for(;null!==(r=p.exec(a));)if(r[0].includes(d[0])){n.push(r[0]);break}}const o=/<p[^>]*>[\s\S]*?<\/p>/gi;let l,m=0;for(;null!==(l=o.exec(i))&&m<2;){const e=l[0],a=e.replace(/<[^>]*>/g,"").trim();if(a.toLowerCase().includes(`the ${t} statement is used`)||a.toLowerCase().includes(`${t} statement is used`)||a.toLowerCase().startsWith(`the ${t} statement`)||a.toLowerCase().startsWith(`${t} may only`)){if(l.index<200)continue;n.push(e),m++,this.logger.debug(`Found relevant paragraph for ${t}: ${a.substring(0,100)}...`)}}if(0===n.length)return this.logger.debug(`No specific content found for ${t}, falling back to null`),null;const c=n.join("\n\n");return this.logger.debug(`Final fallback content length: ${c.length}`),c}findSectionStart(e,t,a){return this.logger.debug(`Starting section from anchor position: ${t} (forward-only)`),t}findSectionEnd(e,t){const a=e.includes("compound_stmts.html")||e.includes("Compound statements"),i=e.includes("datamodel.html")||e.includes("Data model");if(a){const a=[/<section[^>]*id="[^"]*"[^>]*>/gi,/<h[2-4][^>]*>/gi];let i=Math.min(e.length,t+2e4);for(const p of a){p.lastIndex=0;const a=e.substring(t+200),r=p.exec(a);if(r){const e=t+200+r.index;i=Math.min(i,e)}}return i}if(i){const a=[/<\/dd>/gi,/<dt[^>]*id="[^"]*"[^>]*>/gi,/<h[2-6][^>]*>/gi,/<\/dl>/gi];let i=Math.min(e.length,t+8e3);for(const p of a){p.lastIndex=0;const a=e.substring(t+100),r=p.exec(a);if(r){const e=t+100+r.index;i=r[0].includes("</dd>")?Math.min(i,e+r[0].length):Math.min(i,e)}}return i}{const a=[/<\/section>/gi,/<h[1-6][^>]*>/gi,/<div[^>]+class="[^"]*section[^"]*"[^>]*>/gi,/<section[^>]*>/gi,/<\/article>/gi,/<\/main>/gi];let i=Math.min(e.length,t+1e4);for(const p of a){p.lastIndex=0;const a=e.substring(t+1),r=p.exec(a);if(r){const e=t+1+r.index;i=r[0].includes("</section>")?Math.min(i,e+r[0].length):Math.min(i,e)}}return i}}extractMainContent(e){const t=[/<div[^>]+class="[^"]*body[^"]*"[^>]*>(.*?)<\/div>/is,/<main[^>]*>(.*?)<\/main>/is,/<article[^>]*>(.*?)<\/article>/is,/<div[^>]+class="[^"]*content[^"]*"[^>]*>(.*?)<\/div>/is,/<section[^>]*>(.*?)<\/section>/is];for(const a of t){const t=e.match(a);if(t)return t[1]}const a=e.match(/<body[^>]*>(.*?)<\/body>/is);return a?a[1]:e}htmlToMarkdown(e,t,a,i){let p=e.replace(/<(?:script|style)[^>]*>.*?<\/(?:script|style)>/gis,"").replace(/<a[^>]+href=["']([^"']+)["'][^>]*>(.*?)<\/a>/gi,(e,t,i)=>{let p=t;const r=this.stripTags(i);if("if"!==r&&"else"!==r&&"break"!==r&&"continue"!==r||this.logger.debug(`IMPORTANT LINK - content: "${r}", href: "${t}", baseUrl: "${a}"`),t.startsWith("#"))p=`${a.split("#")[0]}${t}`,"if"!==r&&"else"!==r&&"break"!==r&&"continue"!==r||this.logger.debug(`IMPORTANT LINK RESOLVED - "${r}": ${p}`);else if(t.startsWith("/"))p=`https://docs.python.org${t}`;else if(t.startsWith("http"))p=t;else if(t.startsWith("../")){const e=a.split("#")[0].split("/").slice(0,-1),i=t.split("/");for(const t of i)".."===t?e.pop():"."!==t&&e.push(t);p=e.join("/")}else{const e=a.split("#")[0];p=`${e.substring(0,e.lastIndexOf("/")+1)}${t}`}return`[${r}](${p})`}).replace(/<h([1-6])[^>]*>(.*?)<\/h[1-6]>/gi,(e,t,a)=>`\n${"#".repeat(parseInt(t))} ${this.stripTags(a)}\n`).replace(/<p[^>]*>(.*?)<\/p>/gi,"\n$1\n").replace(/<pre[^>]*><code[^>]*>(.*?)<\/code><\/pre>/gis,"\n```\n$1\n```\n").replace(/<code[^>]*>(.*?)<\/code>/gi,"`$1`").replace(/<li[^>]*>(.*?)<\/li>/gi,"- $1\n").replace(/<br\s*\/?>/gi,"\n").replace(/<[^>]*>/g,"").replace(/&quot;/g,'"').replace(/&apos;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/\n\s*\n\s*\n/g,"\n\n").trim();const r=p.split("\n");return r.length>t?`${r.slice(0,t).join("\n")}\n\n*[Truncated - see full documentation for more details]*`:p}stripTags(e){return e.replace(/<[^>]*>/g,"").trim()}escapeRegex(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}async fetchPyPIDescription(e){return await this.pypiService.fetchSummary(e)}async fetchPyPIInfo(e){return await this.pypiService.fetchPackageInfo(e)}}},9647:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FetchWithTimeout=void 0;const i=a(7540),p=i.default||i;class r{static async fetch(e,t={}){const a=t.timeoutMs??this.DEFAULT_TIMEOUT_MS,i=new AbortController,r=setTimeout(()=>i.abort(),a);try{return await p(e,{signal:t.signal??i.signal,headers:{"User-Agent":"VSCode-Python-Hover-Extension",...t.headers}})}catch(t){if("AbortError"===t.name)throw new Error(`Request timed out after ${a}ms: ${e}`);throw t}finally{clearTimeout(r)}}static async fetchText(e,t={}){const a=await this.fetch(e,t);if(!a.ok)throw new Error(`HTTP ${a.status}: Failed to fetch ${e}`);return await a.text()}static async fetchJson(e,t={}){const a=await this.fetch(e,t);if(!a.ok)throw new Error(`HTTP ${a.status}: Failed to fetch ${e}`);return await a.json()}static async isReachable(e,t=5e3){const a=new AbortController,i=setTimeout(()=>a.abort(),t);try{return(await p(e,{method:"HEAD",signal:a.signal,headers:{"User-Agent":"VSCode-Python-Hover-Extension"}})).ok}catch{return!1}finally{clearTimeout(i)}}}t.FetchWithTimeout=r,r.DEFAULT_TIMEOUT_MS=1e4},9681:e=>{e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},9764:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SphinxParser=void 0;const i=a(4417);t.SphinxParser=class{constructor(){this.logger=i.Logger.getInstance()}parseDocumentation(e){const t={description:"",parameters:[],examples:[],seeAlso:[]};try{t.summary=this.extractSummary(e),t.description=this.extractDescription(e),t.parameters=this.extractParameters(e),t.returns=this.extractReturns(e),t.returnType=this.extractReturnType(e),t.examples=this.extractExamples(e),t.seeAlso=this.extractSeeAlso(e),t.notes=this.extractNotes(e),t.warnings=this.extractWarnings(e),t.raises=this.extractRaises(e),t.yields=this.extractYields(e),t.attributes=this.extractAttributes(e),t.versionAdded=this.extractVersionAdded(e),t.versionChanged=this.extractVersionChanged(e),t.deprecated=this.extractDeprecated(e)}catch(e){this.logger.debug(`Error parsing Sphinx documentation: ${e}`)}return t}extractSummary(e){const t=this.extractDescription(e);if(!t)return;const a=t.match(/^[^.!?]+[.!?]/);return a?a[0].trim():t.substring(0,100).trim()+(t.length>100?"...":"")}extractDescription(e){const t=[],a=[/<p class="?[^"]*"?>([^<]+(?:<[^>]+>[^<]*<\/[^>]+>)*[^<]*)<\/p>/gi,/<dd>(?:<p>)?([^<]+)(?:<\/p>)?/i,/<div class="?body"?[^>]*>.*?<p>([^<]+)<\/p>/is];for(const i of a){const a=e.match(i);if(a&&a.length>0){for(let e=0;e<Math.min(3,a.length);e++){const i=this.cleanHtml(a[e]);i.length>20&&!i.startsWith("Parameters")&&!i.startsWith("Returns")&&t.push(i)}if(t.length>0)break}}return t.join("\n\n").substring(0,500)}extractParameters(e){const t=[],a=e.match(/(?:Parameters|Arguments)[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Returns|Raises|See Also|Examples|Notes|$)/i);if(a){const e=a[1],i=/<dt[^>]*>(?:<[^>]*>)*([a-zA-Z_][a-zA-Z0-9_]*)(?:<[^>]*>)*\s*:\s*(?:<[^>]*>)*([^<\n]+)?(?:<[^>]*>)*<\/dt>\s*<dd[^>]*>([\s\S]*?)<\/dd>/gi;let p;for(;null!==(p=i.exec(e));){const e={name:p[1].trim(),type:p[2]?this.cleanHtml(p[2]).trim():void 0,description:this.cleanHtml(p[3]).trim().substring(0,200)},a=e.description.match(/default[:\s]+([^\s,\.]+)/i);a&&(e.default=a[1]),t.push(e)}if(0===t.length){const a=this.extractParametersFromTable(e);t.push(...a)}}return t}extractParametersFromTable(e){const t=[],a=/<tr[^>]*>(?:<td[^>]*>(?:<[^>]*>)*([^<]+)(?:<[^>]*>)*<\/td>)+/gi;let i;for(;null!==(i=a.exec(e))&&t.length<10;){const e=i[0].match(/<td[^>]*>([\s\S]*?)<\/td>/gi);e&&e.length>=2&&t.push({name:this.cleanHtml(e[0]),type:e.length>2?this.cleanHtml(e[1]):void 0,description:this.cleanHtml(e[e.length-1]).substring(0,150)})}return t}extractReturns(e){const t=e.match(/Returns[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Raises|See Also|Examples|Notes|Parameters|$)/i);if(t)return this.cleanHtml(t[1]).substring(0,300)}extractExamples(e){const t=[],a=e.match(/Examples[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:See Also|Notes|Raises|$)/i);if(a){const e=a[1],i=[/<pre[^>]*>([\s\S]*?)<\/pre>/gi,/<div class="?highlight[^"]*"?[^>]*>(?:<pre>)?([\s\S]*?)(?:<\/pre>)?<\/div>/gi,/<code class="?[^"]*doctest[^"]*"?[^>]*>([\s\S]*?)<\/code>/gi];for(const a of i){let i;for(;null!==(i=a.exec(e))&&t.length<5;){const a=this.cleanCodeBlock(i[1]);if(a.length>10){const p=e.substring(Math.max(0,i.index-200),i.index).match(/<p>([^<]+)<\/p>\s*$/);t.push({title:p?this.cleanHtml(p[1]):void 0,code:a})}}}}return t}extractSeeAlso(e){const t=[],a=e.match(/See Also[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Examples|Notes|References|$)/i);if(a){const e=a[1],i=/(?:<code[^>]*>|<tt>)([a-zA-Z0-9_.]+)(?:<\/code>|<\/tt>)/gi;let p;for(;null!==(p=i.exec(e))&&t.length<10;){const a=p[1],i=e.substring(p.index).match(/(?:<\/[^>]+>)\s*[:\-]?\s*([^<\n]{10,100})/);i?t.push(`${a} - ${this.cleanHtml(i[1])}`):t.push(a)}if(0===t.length){const a=/<li[^>]*>([\s\S]*?)<\/li>/gi;let i;for(;null!==(i=a.exec(e))&&t.length<10;){const e=this.cleanHtml(i[1]);e.length>5&&e.length<150&&t.push(e)}}}return t}extractNotes(e){const t=e.match(/Notes[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Examples|References|See Also|$)/i);if(t)return this.cleanHtml(t[1]).substring(0,400)}extractWarnings(e){const t=e.match(/(?:Warning|Warnings|Caution)[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Examples|Notes|See Also|$)/i);if(t)return this.cleanHtml(t[1]).substring(0,300)}cleanHtml(e){return e.replace(/<script[\s\S]*?<\/script>/gi,"").replace(/<style[\s\S]*?<\/style>/gi,"").replace(/<[^>]+>/g," ").replace(/&nbsp;/g," ").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/\s+/g," ").trim()}cleanCodeBlock(e){return e.replace(/<span[^>]*>/gi,"").replace(/<\/span>/gi,"").replace(/&nbsp;/g," ").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/^\s*>>>\s*/gm,"").replace(/^\s*\.\.\.\s*/gm,"").trim()}extractReturnType(e){const t=e.match(/->[\s]*(?:<[^>]+>)*([A-Za-z_][A-Za-z0-9_\[\],\s]*?)(?:<[^>]+>)*(?::|<br|$)/i);if(t)return this.cleanHtml(t[1]).trim()}extractRaises(e){const t=[],a=e.match(/(?:Raises|Exceptions)[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Returns|See Also|Examples|Notes|$)/i);if(a){const e=a[1],i=/([A-Z][a-zA-Z]*Error|[A-Z][a-zA-Z]*Exception)/g;let p;for(;null!==(p=i.exec(e))&&t.length<10;)t.includes(p[1])||t.push(p[1])}return t.length>0?t:void 0}extractYields(e){const t=e.match(/Yields[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Returns|Raises|See Also|Examples|$)/i);if(t)return this.cleanHtml(t[1]).substring(0,250)}extractAttributes(e){const t=[],a=e.match(/Attributes[:\s]*(?:<\/[^>]+>)*([\s\S]*?)(?:Methods|Examples|Notes|$)/i);if(a){const e=a[1],i=/<dt[^>]*>(?:<[^>]*>)*([a-zA-Z_][a-zA-Z0-9_]*)(?:<[^>]*>)*\s*:\s*(?:<[^>]*>)*([^<\n]+)?(?:<[^>]*>)*<\/dt>\s*<dd[^>]*>([\s\S]*?)<\/dd>/gi;let p;for(;null!==(p=i.exec(e))&&t.length<20;)t.push({name:p[1].trim(),type:p[2]?this.cleanHtml(p[2]).trim():void 0,description:this.cleanHtml(p[3]).trim().substring(0,150)})}return t.length>0?t:void 0}extractVersionAdded(e){const t=e.match(/(?:versionadded|new in version)[:\s]*(?:<[^>]+>)*([0-9]+\.[0-9]+(?:\.[0-9]+)?)/i);if(t)return t[1]}extractVersionChanged(e){const t=e.match(/(?:versionchanged|changed in version)[:\s]*(?:<[^>]+>)*([0-9]+\.[0-9]+(?:\.[0-9]+)?)/i);if(t)return t[1]}extractDeprecated(e){const t=e.match(/<div class="?(?:deprecated|admonition-deprecated)[^"]*"?[^>]*>([\s\S]*?)<\/div>/i);if(t)return this.cleanHtml(t[1]).substring(0,150);const a=e.match(/(?:^|<p[^>]*>|<div[^>]*>)\s*(?:<strong>)?Deprecated(?:<\/strong>)?[:\s]+([^<\n]{20,200})/i);return a?this.cleanHtml(a[1]).substring(0,150):void 0}}},9805:e=>{const t=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);e.exports.assign=function(e){const a=Array.prototype.slice.call(arguments,1);for(;a.length;){const i=a.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(const a in i)t(i,a)&&(e[a]=i[a])}}return e},e.exports.flattenChunks=e=>{let t=0;for(let a=0,i=e.length;a<i;a++)t+=e[a].length;const a=new Uint8Array(t);for(let t=0,i=0,p=e.length;t<p;t++){let p=e[t];a.set(p,i),i+=p.length}return a}},9896:e=>{e.exports=require("fs")}},t={};function a(i){var p=t[i];if(void 0!==p)return p.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,a),r.exports}a.d=(e,t)=>{for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{var e=i;Object.defineProperty(e,"__esModule",{value:!0}),e.activate=function(e){const a=new n.ConfigurationManager,i=l.Logger.getInstance(a);i.info("🐍 Extension activating...");const f=new s.DataLoader,g=new u.CircuitBreakerManager,v=(g.getBreaker("docs-api",{failureThreshold:p.NETWORK.CB_FAILURE_THRESHOLD,successThreshold:p.NETWORK.CB_SUCCESS_THRESHOLD,timeout:p.NETWORK.CB_TIMEOUT,resetTimeout:p.NETWORK.CB_RESET_TIMEOUT}),g.getBreaker("inventory-api",{failureThreshold:p.NETWORK.CB_FAILURE_THRESHOLD,successThreshold:p.NETWORK.CB_SUCCESS_THRESHOLD,timeout:p.NETWORK.CB_TIMEOUT,resetTimeout:p.NETWORK.CB_RESET_TIMEOUT}),new r.CacheManager(e.globalStorageUri)),y=new m.PackageDetector,_=new o.InventoryManager(v,i,a,y),w=new h.VersionDetector(a),b=new c.PythonHoverProvider(a,_,w,v,f),x=t.languages.registerHoverProvider({language:"python"},b);e.subscriptions.push(x),e.subscriptions.push({dispose:()=>b.dispose()}),e.subscriptions.push({dispose:()=>i.dispose()});const S=t.window.createStatusBarItem(t.StatusBarAlignment.Right,100);async function T(){try{const e=await v.getStats();if(e&&void 0!==e.totalSize){const t=(e.totalSize/1048576).toFixed(1);S.text=`$(database) ${t}MB`,S.tooltip=`Python Hover Cache\n${e.fileCount} files • ${t}MB\nClick for details`}}catch(e){i.error("Failed to update status bar:",e),S.text="$(database) Python Docs"}}S.text="$(database) Python Docs",S.tooltip="Python Hover: Click to view cache info",S.command="pythonHover.showCacheInfo",S.show(),e.subscriptions.push(S);const D=setInterval(T,p.PERFORMANCE.STATUS_BAR_UPDATE_INTERVAL);e.subscriptions.push({dispose:()=>clearInterval(D)}),T(),e.subscriptions.push(t.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("python.defaultInterpreterPath")&&(i.info("Python interpreter changed, clearing version cache"),b.clearVersionCache())})),setTimeout(async function(){try{const a=t.extensions.getExtension("ms-python.python");if(a){a.isActive||await a.activate();const t=a.exports;if(t&&t.environments&&t.environments.onDidChangeActiveEnvironmentPath){const a=t.environments.onDidChangeActiveEnvironmentPath(()=>{i.info("Active Python environment changed, clearing version cache"),b.clearVersionCache()});e.subscriptions.push(a),i.info("Python environment change listener registered")}else i.debug("Python extension API does not expose environment change events")}else i.debug("Python extension not found, skipping environment change listener")}catch(e){i.error("Failed to setup Python extension listener:",e)}},1e3),e.subscriptions.push(t.commands.registerCommand("pythonHover.showCacheInfo",async()=>{try{const e=await v.getStats(),a=(e.totalSize/1048576).toFixed(2),i=(e.totalSize/1024).toFixed(0),p=`📦 **Python Hover Cache**\n\n📁 Files: ${e.fileCount}\n💾 Size: ${a} MB (${i} KB)\n📍 Location: ${e.cacheDir||"Global storage"}\n\nCache includes documentation snippets and Intersphinx inventories for faster hover responses.`,r=await d.ErrorNotifier.showInfo(p,"Clear Cache","Open Location","Close");"Clear Cache"===r?(await t.commands.executeCommand("pythonHover.clearCache"),T()):"Open Location"===r&&e.cacheDir&&await t.commands.executeCommand("revealFileInOS",t.Uri.file(e.cacheDir))}catch(e){i.error("Failed to show cache info:",e),await d.ErrorNotifier.showError("Failed to retrieve cache information")}})),e.subscriptions.push(t.commands.registerCommand("pythonHover.clearCache",async()=>{try{const e=await v.clear();await _.invalidateCache(),T(),await d.ErrorNotifier.showInfo(`✅ Cache cleared! Deleted ${e.filesDeleted} files.`)}catch(e){await d.ErrorNotifier.showError(`Failed to clear cache: ${e}`),i.error("Cache clear error:",e)}})),e.subscriptions.push(t.commands.registerCommand("pythonHover.openDocs",e=>{e&&e.startsWith("http")&&(t.workspace.getConfiguration("pythonHover").get("openDocsInEditor",!1)?t.commands.executeCommand("simpleBrowser.show",e):t.env.openExternal(t.Uri.parse(e)))})),e.subscriptions.push(t.commands.registerCommand("pythonHover.copyUrl",e=>{e&&(t.env.clipboard.writeText(e),d.ErrorNotifier.showInfo("📋 URL copied to clipboard!"))})),e.subscriptions.push(t.commands.registerCommand("pythonHover.insertExample",e=>{const a=t.window.activeTextEditor;if(a&&e){const i=new t.SnippetString(e);a.insertSnippet(i),d.ErrorNotifier.showInfo("✅ Example inserted!")}})),e.subscriptions.push(t.commands.registerCommand("pythonHover.increaseFontSize",async()=>{const e=t.workspace.getConfiguration("pythonHover"),a=["small","medium","large"],i=e.get("fontSize","medium"),p=a.indexOf(i);if(p<a.length-1){const i=a[p+1];await e.update("fontSize",i,t.ConfigurationTarget.Global),b.refreshTheme(),d.ErrorNotifier.showInfo(`🔤 Font size: ${i}`)}else d.ErrorNotifier.showInfo("Already at maximum font size")})),e.subscriptions.push(t.commands.registerCommand("pythonHover.decreaseFontSize",async()=>{const e=t.workspace.getConfiguration("pythonHover"),a=["small","medium","large"],i=e.get("fontSize","medium"),p=a.indexOf(i);if(p>0){const i=a[p-1];await e.update("fontSize",i,t.ConfigurationTarget.Global),b.refreshTheme(),d.ErrorNotifier.showInfo(`🔤 Font size: ${i}`)}else d.ErrorNotifier.showInfo("Already at minimum font size")})),e.subscriptions.push(t.commands.registerCommand("pythonHover.showSupportedLibraries",async()=>{const e=_.getAllSupportedLibraries(),i=_.getSupportedLibrariesCount(),p=a.autoDetectLibrariesEnabled,r={numpy:"Data Science & ML",pandas:"Data Science & ML",scipy:"Data Science & ML",matplotlib:"Data Science & ML",sklearn:"Data Science & ML",torch:"Data Science & ML",pytorch:"Data Science & ML",flask:"Web Development",django:"Web Development",fastapi:"Web Development",aiohttp:"Web Development",requests:"Web Development",pytest:"Testing & Automation",selenium:"Testing & Automation",sqlalchemy:"Database & Validation",pydantic:"Database & Validation",beautifulsoup4:"Utilities",bs4:"Utilities",pillow:"Utilities",click:"Utilities",sphinx:"Utilities"},n={"Data Science & ML":[],"Web Development":[],"Testing & Automation":[],"Database & Validation":[],Utilities:[],"Custom Libraries":[],Other:[]},s=new Set((a.customLibraries??[]).map(e=>e.name));for(const t of e){const e=t.name;s.has(e)?n["Custom Libraries"].push(e):n[r[e]||"Other"].push(e)}let d="# 📚 Supported Python Libraries\n\n";d+=`**Total Libraries:** ${i.total}\n`,d+=`- Built-in: ${i.builtIn}\n`,d+=`- Custom: ${i.custom}\n\n`,d+=p?"🧪 **Auto-detect:** ✅ Enabled - Any library with Intersphinx docs is supported!\n\n":"🧪 **Auto-detect:** ❌ Disabled - Only pre-configured libraries shown\n\n",d+="---\n\n";for(const[e,t]of Object.entries(n))t.length>0&&(d+=`## ${e}\n\n`,d+=t.sort().map(e=>`- \`${e}\``).join("\n"),d+="\n\n");d+="---\n\n",d+="💡 **Tip:** Add your own libraries in settings:\n",d+="`pythonHover.customLibraries`\n\n",d+="🧪 **Auto-detect:** Toggle in settings:\n",d+="`pythonHover.experimental.autoDetectLibraries`\n\n",d+=`📖 [Learn more about custom libraries](command:vscode.open?${encodeURIComponent(JSON.stringify("https://github.com/KiidxAtlas/python-hover/blob/main/CUSTOM_LIBRARIES.md"))})\n`;const o=await t.workspace.openTextDocument({content:d,language:"markdown"});await t.window.showTextDocument(o,{preview:!0,viewColumn:t.ViewColumn.Beside})})),e.subscriptions.push(t.commands.registerCommand("pythonHover.showHealthStatus",async()=>{const e=g.getHealthSummary();let t="🏥 **Python Hover Health Status**\n\n";if(t+="📊 **Circuit Breakers:**\n",t+=`- Total: ${e.total}\n`,t+=`- Healthy: ${e.healthy} ✅\n`,t+=`- Unhealthy: ${e.unhealthy} ⚠️\n\n`,e.details.length>0){t+="**Details:**\n";for(const a of e.details){const e="closed"===a.state?"✅":"half-open"===a.state?"🔄":"🔴",i=(100*a.successRate).toFixed(1);t+=`- ${e} ${a.name}: ${a.state} (${i}% success)\n`}}await d.ErrorNotifier.showInfo(t,"Reset All","Close")})),e.subscriptions.push(t.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("pythonHover")&&(a.refresh(),b.refreshTheme(),(e.affectsConfiguration("pythonHover.customLibraries")||e.affectsConfiguration("pythonHover.experimental.autoDetectLibraries"))&&(i.info("Library configuration changed, invalidating inventory cache"),_.invalidateCache().catch(e=>{i.error("Failed to invalidate inventory cache:",e)})),e.affectsConfiguration("pythonHover.docsVersion")&&(i.info("Documentation version setting changed, clearing version cache"),b.clearVersionCache()),i.info("Configuration reloaded successfully"))})),i.info("✅ Extension activated successfully")},e.deactivate=function(){l.Logger.getInstance().info("Extension deactivated")};const t=a(1398),p=a(9310),r=a(8087),n=a(3211),s=a(8446),d=a(3029),o=a(3681),l=a(4417),m=a(5259),c=a(4820),h=a(4789),u=a(417)})(),module.exports=i})();